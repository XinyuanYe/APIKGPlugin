{"node_name": "listenerList", "type": "field", "idx": 4, "Desc": "the current list of registered propertychangelistener classes ."}{"node_name": "listenerList", "type": "field", "idx": 11, "Desc": "the list of listener type , listener pairs"}{"node_name": "ACTION", "type": "field", "idx": 72, "Desc": "maps to awt action support ( i.e. , actionlistener and actionevent )"}{"node_name": "ADJUSTMENT", "type": "field", "idx": 73, "Desc": "maps to awt adjustment support ( i.e. , adjustmentlistener and adjustmentevent )"}{"node_name": "COMPONENT", "type": "field", "idx": 74, "Desc": "maps to awt component support ( i.e. , componentlistener and componentevent )"}{"node_name": "CONTAINER", "type": "field", "idx": 75, "Desc": "maps to awt container support ( i.e. , containerlistener and containerevent )"}{"node_name": "FOCUS", "type": "field", "idx": 76, "Desc": "maps to awt focus support ( i.e. , focuslistener and focusevent )"}{"node_name": "ITEM", "type": "field", "idx": 77, "Desc": "maps to awt item support ( i.e. , itemlistener and itemevent )"}{"node_name": "KEY", "type": "field", "idx": 78, "Desc": "maps to awt key support ( i.e. , keylistener and keyevent )"}{"node_name": "MOUSE", "type": "field", "idx": 79, "Desc": "maps to awt mouse support ( i.e. , mouselistener and mouseevent )"}{"node_name": "MOTION", "type": "field", "idx": 80, "Desc": "maps to awt mousemotion support ( i.e. , mousemotionlistener and mousemotionevent )"}{"node_name": "TEXT", "type": "field", "idx": 81, "Desc": "maps to awt text support ( i.e. , textlistener and textevent )"}{"node_name": "WINDOW", "type": "field", "idx": 82, "Desc": "maps to awt window support ( i.e. , windowlistener and windowevent )"}{"node_name": "ANCESTOR", "type": "field", "idx": 83, "Desc": "maps to swing ancestor support ( i.e. , ancestorlistener and ancestorevent )"}{"node_name": "CARET", "type": "field", "idx": 84, "Desc": "maps to swing text caret support ( i.e. , caretlistener and caretevent )"}{"node_name": "CELLEDITOR", "type": "field", "idx": 85, "Desc": "maps to swing celleditor support ( i.e. , celleditorlistener and celleditorevent )"}{"node_name": "CHANGE", "type": "field", "idx": 86, "Desc": "maps to swing change support ( i.e. , changelistener and changeevent )"}{"node_name": "COLUMNMODEL", "type": "field", "idx": 87, "Desc": "maps to swing tablecolumnmodel support ( i.e. , tablecolumnmodellistener and tablecolumnmodelevent )"}{"node_name": "DOCUMENT", "type": "field", "idx": 88, "Desc": "maps to swing document support ( i.e. , documentlistener and documentevent )"}{"node_name": "LISTDATA", "type": "field", "idx": 89, "Desc": "maps to swing listdata support ( i.e. , listdatalistener and listdataevent )"}{"node_name": "LISTSELECTION", "type": "field", "idx": 90, "Desc": "maps to swing listselection support ( i.e. , listselectionlistener and listselectionevent )"}{"node_name": "MENU", "type": "field", "idx": 91, "Desc": "maps to swing menu support ( i.e. , menulistener and menuevent )"}{"node_name": "POPUPMENU", "type": "field", "idx": 92, "Desc": "maps to swing popupmenu support ( i.e. , popupmenulistener and popupmenuevent )"}{"node_name": "TABLEMODEL", "type": "field", "idx": 93, "Desc": "maps to swing tablemodel support ( i.e. , tablemodellistener and tablemodelevent )"}{"node_name": "TREEEXPANSION", "type": "field", "idx": 94, "Desc": "maps to swing treeexpansion support ( i.e. , treeexpansionlistener and treeexpansionevent )"}{"node_name": "TREEMODEL", "type": "field", "idx": 95, "Desc": "maps to swing treemodel support ( i.e. , treemodellistener and treemodelevent )"}{"node_name": "TREESELECTION", "type": "field", "idx": 96, "Desc": "maps to swing treeselection support ( i.e. , treeselectionlistener and treeselectionevent )"}{"node_name": "UNDOABLEEDIT", "type": "field", "idx": 97, "Desc": "maps to swing undoableedit support ( i.e. , undoableeditlistener and undoableeditevent )"}{"node_name": "PROPERTYCHANGE", "type": "field", "idx": 98, "Desc": "maps to beans propertychange support ( i.e. , propertychangelistener and propertychangeevent )"}{"node_name": "VETOABLECHANGE", "type": "field", "idx": 99, "Desc": "maps to beans vetoablechange support ( i.e. , vetoablechangelistener and vetoablechangeevent )"}{"node_name": "INTERNALFRAME", "type": "field", "idx": 100, "Desc": "maps to swing internalframe support ( i.e. , internalframelistener )"}{"node_name": "listenerList", "type": "field", "idx": 124, "Desc": "the master list of all listeners registered by other classes . this can only be publicly modified by calling the add or remove listener methods in this class ."}{"node_name": "source", "type": "field", "idx": 204, "Desc": "the source object needing translating ."}{"node_name": "INVOKE_SINGLE_THREADED", "type": "field", "idx": 345, "Desc": "perform method invocation with only the invoking thread resumed"}{"node_name": "INVOKE_SINGLE_THREADED", "type": "field", "idx": 679, "Desc": "perform method invocation with only the invoking thread resumed"}{"node_name": "INVOKE_NONVIRTUAL", "type": "field", "idx": 680, "Desc": "perform non-virtual method invocation"}{"node_name": "SUSPEND_NONE", "type": "field", "idx": 803, "Desc": "suspend no threads when the event occurs"}{"node_name": "SUSPEND_EVENT_THREAD", "type": "field", "idx": 804, "Desc": "suspend only the thread which generated the event when the event occurs"}{"node_name": "SUSPEND_ALL", "type": "field", "idx": 805, "Desc": "suspend all threads when the event occurs"}{"node_name": "STEP_INTO", "type": "field", "idx": 950, "Desc": "step into any newly pushed frames"}{"node_name": "STEP_OVER", "type": "field", "idx": 951, "Desc": "step over any newly pushed frames"}{"node_name": "STEP_OUT", "type": "field", "idx": 952, "Desc": "step out of the current frame"}{"node_name": "STEP_MIN", "type": "field", "idx": 953, "Desc": "step to the next available location"}{"node_name": "STEP_LINE", "type": "field", "idx": 954, "Desc": "step to the next location on a different line"}{"node_name": "THREAD_STATUS_UNKNOWN", "type": "field", "idx": 1016, "Desc": "thread status is unknown"}{"node_name": "THREAD_STATUS_ZOMBIE", "type": "field", "idx": 1017, "Desc": "thread has completed execution"}{"node_name": "THREAD_STATUS_RUNNING", "type": "field", "idx": 1018, "Desc": "thread is runnable"}{"node_name": "THREAD_STATUS_SLEEPING", "type": "field", "idx": 1019, "Desc": "thread is sleeping - thread.sleep() or jvm_sleep() was called"}{"node_name": "THREAD_STATUS_MONITOR", "type": "field", "idx": 1020, "Desc": "thread is waiting on a java monitor"}{"node_name": "THREAD_STATUS_WAIT", "type": "field", "idx": 1021, "Desc": "thread is waiting - object.wait() or jvm_monitorwait() was called"}{"node_name": "THREAD_STATUS_NOT_STARTED", "type": "field", "idx": 1022, "Desc": "thread has not yet been started"}{"node_name": "TRACE_NONE", "type": "field", "idx": 1062, "Desc": "all tracing is disabled ."}{"node_name": "TRACE_SENDS", "type": "field", "idx": 1063, "Desc": "tracing enabled for jdwp packets sent to target vm ."}{"node_name": "TRACE_RECEIVES", "type": "field", "idx": 1064, "Desc": "tracing enabled for jdwp packets received from target vm ."}{"node_name": "TRACE_EVENTS", "type": "field", "idx": 1065, "Desc": "tracing enabled for internal event handling ."}{"node_name": "TRACE_REFTYPES", "type": "field", "idx": 1066, "Desc": "tracing enabled for internal managment of reference types ."}{"node_name": "TRACE_OBJREFS", "type": "field", "idx": 1067, "Desc": "tracing enabled for internal management of object references ."}{"node_name": "TRACE_ALL", "type": "field", "idx": 1068, "Desc": "all tracing is enabled ."}{"node_name": "GARBAGE_COLLECTION_NOTIFICATION", "type": "field", "idx": 1170, "Desc": "notification type denoting that the java virtual machine has completed a garbage collection cycle . this notification is emitted by a garbagecollectormxbean . the value of this notification type is com.sun.management.gc.notification ."}{"node_name": "realm", "type": "field", "idx": 1259, "Desc": ""}{"node_name": "SCTP_DISABLE_FRAGMENTS", "type": "field", "idx": 1610, "Desc": "enables or disables message fragmentation . the value of this socket option is a boolean that represents whether the option is enabled or disabled . if enabled no sctp message fragmentation will be performed . instead if a message being sent exceeds the current pmtu size , the message will not be sent and an error will be indicated to the user . it is implementation specific whether or not this option is supported ."}{"node_name": "SCTP_EXPLICIT_COMPLETE", "type": "field", "idx": 1611, "Desc": "enables or disables explicit message completion . the value of this socket option is a boolean that represents whether the option is enabled or disabled . when this option is enabled , the send method may be invoked multiple times to a send message . the iscomplete parameter of the messageinfo must only be set to true for the final send to indicate that the message is complete . if this option is disabled then each individual send invocation is considered complete . the default value of the option is false indicating that the option is disabled . it is implementation specific whether or not this option is supported ."}{"node_name": "SCTP_FRAGMENT_INTERLEAVE", "type": "field", "idx": 1612, "Desc": "fragmented interleave controls how the presentation of messages occur for the message receiver . there are three levels of fragment interleave defined . two of the levels effect sctpchannel , while sctpmultichannel is effected by all three levels . this option takes an integer value . it can be set to a value of 0 , 1 or 2 . setting the three levels provides the following receiver interactions : level 0 - prevents the interleaving of any messages . this means that when a partial delivery begins , no other messages will be received except the message being partially delivered . if another message arrives on a different stream ( or association ) that could be delivered , it will be blocked waiting for the user to read all of the partially delivered message . level 1 - allows interleaving of messages that are from different associations . for sctpchannel , level 0 and level 1 have the same meaning since an sctpchannel always receives messages from the same association . note that setting an sctpmultichannel to this level may cause multiple partial delivers from different associations but for any given association , only one message will be delivered until all parts of a message have been delivered . this means that one large message , being read with an association identification of \" x \" , will block other messages from association \" x \" from being delivered . level 2 - allows complete interleaving of messages . this level requires that the sender carefully observe not only the peer association but also must pay careful attention to the stream number . with this option enabled a partially delivered message may begin being delivered for association \" x \" stream \" y \" and the next subsequent receive may return a message from association \" x \" stream \" z \" . note that no other messages would be delivered for association \" x \" stream \" y \" until all of stream \" y \"' s partially delivered message was read . note that this option effects both channel types . also note that for an sctpmultichannel not only may another streams message from the same association be delivered from the next receive , some other associations message may be delivered upon the next receive . it is implementation specific whether or not this option is supported ."}{"node_name": "SCTP_INIT_MAXSTREAMS", "type": "field", "idx": 1613, "Desc": "the maximum number of streams requested by the local endpoint during association initialization . the value of this socket option is an initmaxstreams , that represents the maximum number of inbound and outbound streams that an association on the channel is prepared to support . for an sctpchannel this option may only be used to change the number of inbound / outbound streams prior to connecting . for an sctpmultichannel this option determines the maximum number of inbound / outbound streams new associations setup on the channel will be prepared to support . for an sctpserverchannel this option determines the maximum number of inbound / outbound streams accepted sockets will negotiate with their connecting peer . in all cases the value set by this option is used in the negotiation of new associations setup on the channel's socket and the actual maximum number of inbound / outbound streams that have been negotiated with the peer can be retrieved from the appropriate association . the association can be retrieved from the comm_up associationchangenotification belonging to that association . this value is bounded by the actual implementation . in other words the user may be able to support more streams than the operating system . in such a case , the operating system limit may override the value requested by the user . the default value of 0 indicates to use the endpoints default value ."}{"node_name": "SCTP_NODELAY", "type": "field", "idx": 1614, "Desc": "enables or disables a nagle-like algorithm . the value of this socket option is a boolean that represents whether the option is enabled or disabled . sctp uses an algorithm like the nagle algorithm to coalesce short segments and improve network efficiency ."}{"node_name": "SCTP_PRIMARY_ADDR", "type": "field", "idx": 1615, "Desc": "requests that the local sctp stack use the given peer address as the association primary . the value of this socket option is a socketaddress that represents the peer address that the local sctp stack should use as the association primary . the address must be one of the association peer's addresses . an sctpmultichannel can control more than one association , the association parameter must be given when setting or retrieving this option . since sctpchannel only controls one association , the association parameter is not required and this option can be set or queried directly ."}{"node_name": "SCTP_SET_PEER_PRIMARY_ADDR", "type": "field", "idx": 1616, "Desc": "requests that the peer mark the enclosed address as the association primary . the value of this socket option is a socketaddress that represents the local address that the peer should use as its primary address . the given address must be one of the association's locally bound addresses . an sctpmultichannel can control more than one association , the association parameter must be given when setting or retrieving this option . since sctpchannel only controls one association , the association parameter is not required and this option can be queried directly . note , this is a set only option and cannot be retrieved by getoption . it is implementation specific whether or not this option is supported ."}{"node_name": "SO_SNDBUF", "type": "field", "idx": 1617, "Desc": "the size of the socket send buffer . the value of this socket option is an integer that is the size of the socket send buffer in bytes . the socket send buffer is an output buffer used by the networking implementation . it may need to be increased for high-volume connections . the value of the socket option is a hint to the implementation to size the buffer and the actual size may differ . the socket option can be queried to retrieve the actual size . for sctpchannel , this controls the amount of data the sctp stack may have waiting in internal buffers to be sent . this option therefore bounds the maximum size of data that can be sent in a single send call . for sctpmultichannel , the effect is the same as for sctpchannel , except that it applies to all associations . the option applies to each association's window size separately . an implementation allows this socket option to be set before the socket is bound or connected . whether an implementation allows the socket send buffer to be changed after the socket is bound is system dependent ."}{"node_name": "SO_RCVBUF", "type": "field", "idx": 1618, "Desc": "the size of the socket receive buffer . the value of this socket option is an integer that is the size of the socket receive buffer in bytes . the socket receive buffer is an input buffer used by the networking implementation . it may need to be increased for high-volume connections or decreased to limit the possible backlog of incoming data . the value of the socket option is a hint to the implementation to size the buffer and the actual size may differ . for sctpchannel , this controls the receiver window size . for sctpmultichannel , the meaning is implementation dependent . it might control the receive buffer for each association bound to the socket descriptor or it might control the receive buffer for the whole socket . an implementation allows this socket option to be set before the socket is bound or connected . whether an implementation allows the socket receive buffer to be changed after the socket is bound is system dependent ."}{"node_name": "SO_LINGER", "type": "field", "idx": 1619, "Desc": "linger on close if data is present . the value of this socket option is an integer that controls the action taken when unsent data is queued on the socket and a method to close the socket is invoked . if the value of the socket option is zero or greater , then it represents a timeout value , in seconds , known as the linger interval . the linger interval is the timeout for the close method to block while the operating system attempts to transmit the unsent data or it decides that it is unable to transmit the data . if the value of the socket option is less than zero then the option is disabled . in that case the close method does not wait until unsent data is transmitted ; if possible the operating system will transmit any unsent data before the connection is closed . this socket option is intended for use with sockets that are configured in blocking mode only . the behavior of the close method when this option is enabled on a non-blocking socket is not defined . the initial value of this socket option is a negative value , meaning that the option is disabled . the option may be enabled , or the linger interval changed , at any time . the maximum value of the linger interval is system dependent . setting the linger interval to a value that is greater than its maximum value causes the linger interval to be set to its maximum value ."}{"node_name": "USER_PROVIDER", "type": "field", "idx": 1650, "Desc": "jndi provider"}{"node_name": "GROUP_PROVIDER", "type": "field", "idx": 1651, "Desc": ""}{"node_name": "username", "type": "field", "idx": 1727, "Desc": ""}{"node_name": "uid", "type": "field", "idx": 1728, "Desc": ""}{"node_name": "gid", "type": "field", "idx": 1729, "Desc": ""}{"node_name": "groups", "type": "field", "idx": 1730, "Desc": ""}{"node_name": "tagName", "type": "field", "idx": 1892, "Desc": "the name of the tag , if any , associated with this kind of node ."}{"node_name": "DEFAULT_VALUE", "type": "field", "idx": 2817, "Desc": "the default value , returned by the default action ."}{"node_name": "DEFAULT_VALUE", "type": "field", "idx": 2939, "Desc": "the default value , returned by the default action ."}{"node_name": "CONNECTION_STATE_PROPERTY", "type": "field", "idx": 3498, "Desc": "the connectionstate bound property name ."}{"node_name": "HORIZONTAL", "type": "field", "idx": 3528, "Desc": "indicates that the adjustable has horizontal orientation ."}{"node_name": "VERTICAL", "type": "field", "idx": 3529, "Desc": "indicates that the adjustable has vertical orientation ."}{"node_name": "NO_ORIENTATION", "type": "field", "idx": 3530, "Desc": "indicates that the adjustable has no orientation ."}{"node_name": "CLEAR", "type": "field", "idx": 3555, "Desc": "both the color and the alpha of the destination are cleared ( porter-duff clear rule ) . neither the source nor the destination is used as input . fs = 0 and fd = 0 , thus : ar = 0 cr = 0"}{"node_name": "SRC", "type": "field", "idx": 3556, "Desc": "the source is copied to the destination ( porter-duff source rule ) . the destination is not used as input . fs = 1 and fd = 0 , thus : ar = as cr = cs"}{"node_name": "DST", "type": "field", "idx": 3557, "Desc": "the destination is left untouched ( porter-duff destination rule ) . fs = 0 and fd = 1 , thus : ar = ad cr = cd"}{"node_name": "SRC_OVER", "type": "field", "idx": 3558, "Desc": "the source is composited over the destination ( porter-duff source over destination rule ) . fs = 1 and fd = ( 1-as ) , thus : ar = as + ad* ( 1-as ) cr = cs + cd* ( 1-as )"}{"node_name": "DST_OVER", "type": "field", "idx": 3559, "Desc": "the destination is composited over the source and the result replaces the destination ( porter-duff destination over source rule ) . fs = ( 1-ad ) and fd = 1 , thus : ar = as* ( 1-ad ) + ad cr = cs* ( 1-ad ) + cd"}{"node_name": "SRC_IN", "type": "field", "idx": 3560, "Desc": "the part of the source lying inside of the destination replaces the destination ( porter-duff source in destination rule ) . fs = ad and fd = 0 , thus : ar = as*ad cr = cs*ad"}{"node_name": "DST_IN", "type": "field", "idx": 3561, "Desc": "the part of the destination lying inside of the source replaces the destination ( porter-duff destination in source rule ) . fs = 0 and fd = as , thus : ar = ad*as cr = cd*as"}{"node_name": "SRC_OUT", "type": "field", "idx": 3562, "Desc": "the part of the source lying outside of the destination replaces the destination ( porter-duff source held out by destination rule ) . fs = ( 1-ad ) and fd = 0 , thus : ar = as* ( 1-ad ) cr = cs* ( 1-ad )"}{"node_name": "DST_OUT", "type": "field", "idx": 3563, "Desc": "the part of the destination lying outside of the source replaces the destination ( porter-duff destination held out by source rule ) . fs = 0 and fd = ( 1-as ) , thus : ar = ad* ( 1-as ) cr = cd* ( 1-as )"}{"node_name": "SRC_ATOP", "type": "field", "idx": 3564, "Desc": "the part of the source lying inside of the destination is composited onto the destination ( porter-duff source atop destination rule ) . fs = ad and fd = ( 1-as ) , thus : ar = as*ad + ad* ( 1-as ) = ad cr = cs*ad + cd* ( 1-as )"}{"node_name": "DST_ATOP", "type": "field", "idx": 3565, "Desc": "the part of the destination lying inside of the source is composited over the source and replaces the destination ( porter-duff destination atop source rule ) . fs = ( 1-ad ) and fd = as , thus : ar = as* ( 1-ad ) + ad*as = as cr = cs* ( 1-ad ) + cd*as"}{"node_name": "XOR", "type": "field", "idx": 3566, "Desc": "the part of the source that lies outside of the destination is combined with the part of the destination that lies outside of the source ( porter-duff source xor destination rule ) . fs = ( 1-ad ) and fd = ( 1-as ) , thus : ar = as* ( 1-ad ) + ad* ( 1-as ) cr = cs* ( 1-ad ) + cd* ( 1-as )"}{"node_name": "Clear", "type": "field", "idx": 3567, "Desc": "alphacomposite object that implements the opaque clear rule with an alpha of 1.0f ."}{"node_name": "Src", "type": "field", "idx": 3568, "Desc": "alphacomposite object that implements the opaque src rule with an alpha of 1.0f ."}{"node_name": "Dst", "type": "field", "idx": 3569, "Desc": "alphacomposite object that implements the opaque dst rule with an alpha of 1.0f ."}{"node_name": "SrcOver", "type": "field", "idx": 3570, "Desc": "alphacomposite object that implements the opaque src_over rule with an alpha of 1.0f ."}{"node_name": "DstOver", "type": "field", "idx": 3571, "Desc": "alphacomposite object that implements the opaque dst_over rule with an alpha of 1.0f ."}{"node_name": "SrcIn", "type": "field", "idx": 3572, "Desc": "alphacomposite object that implements the opaque src_in rule with an alpha of 1.0f ."}{"node_name": "DstIn", "type": "field", "idx": 3573, "Desc": "alphacomposite object that implements the opaque dst_in rule with an alpha of 1.0f ."}{"node_name": "SrcOut", "type": "field", "idx": 3574, "Desc": "alphacomposite object that implements the opaque src_out rule with an alpha of 1.0f ."}{"node_name": "DstOut", "type": "field", "idx": 3575, "Desc": "alphacomposite object that implements the opaque dst_out rule with an alpha of 1.0f ."}{"node_name": "SrcAtop", "type": "field", "idx": 3576, "Desc": "alphacomposite object that implements the opaque src_atop rule with an alpha of 1.0f ."}{"node_name": "DstAtop", "type": "field", "idx": 3577, "Desc": "alphacomposite object that implements the opaque dst_atop rule with an alpha of 1.0f ."}{"node_name": "Xor", "type": "field", "idx": 3578, "Desc": "alphacomposite object that implements the opaque xor rule with an alpha of 1.0f ."}{"node_name": "id", "type": "field", "idx": 3601, "Desc": "the event's id ."}{"node_name": "consumed", "type": "field", "idx": 3602, "Desc": "controls whether or not the event is sent back down to the peer once the source has processed it - false means it's sent to the peer ; true means it's not . semantic events always have a ' true ' value since they were generated by the peer in response to a low-level event ."}{"node_name": "COMPONENT_EVENT_MASK", "type": "field", "idx": 3603, "Desc": "the event mask for selecting component events ."}{"node_name": "CONTAINER_EVENT_MASK", "type": "field", "idx": 3604, "Desc": "the event mask for selecting container events ."}{"node_name": "FOCUS_EVENT_MASK", "type": "field", "idx": 3605, "Desc": "the event mask for selecting focus events ."}{"node_name": "KEY_EVENT_MASK", "type": "field", "idx": 3606, "Desc": "the event mask for selecting key events ."}{"node_name": "MOUSE_EVENT_MASK", "type": "field", "idx": 3607, "Desc": "the event mask for selecting mouse events ."}{"node_name": "MOUSE_MOTION_EVENT_MASK", "type": "field", "idx": 3608, "Desc": "the event mask for selecting mouse motion events ."}{"node_name": "WINDOW_EVENT_MASK", "type": "field", "idx": 3609, "Desc": "the event mask for selecting window events ."}{"node_name": "ACTION_EVENT_MASK", "type": "field", "idx": 3610, "Desc": "the event mask for selecting action events ."}{"node_name": "ADJUSTMENT_EVENT_MASK", "type": "field", "idx": 3611, "Desc": "the event mask for selecting adjustment events ."}{"node_name": "ITEM_EVENT_MASK", "type": "field", "idx": 3612, "Desc": "the event mask for selecting item events ."}{"node_name": "TEXT_EVENT_MASK", "type": "field", "idx": 3613, "Desc": "the event mask for selecting text events ."}{"node_name": "INPUT_METHOD_EVENT_MASK", "type": "field", "idx": 3614, "Desc": "the event mask for selecting input method events ."}{"node_name": "PAINT_EVENT_MASK", "type": "field", "idx": 3615, "Desc": "the event mask for selecting paint events ."}{"node_name": "INVOCATION_EVENT_MASK", "type": "field", "idx": 3616, "Desc": "the event mask for selecting invocation events ."}{"node_name": "HIERARCHY_EVENT_MASK", "type": "field", "idx": 3617, "Desc": "the event mask for selecting hierarchy events ."}{"node_name": "HIERARCHY_BOUNDS_EVENT_MASK", "type": "field", "idx": 3618, "Desc": "the event mask for selecting hierarchy bounds events ."}{"node_name": "MOUSE_WHEEL_EVENT_MASK", "type": "field", "idx": 3619, "Desc": "the event mask for selecting mouse wheel events ."}{"node_name": "WINDOW_STATE_EVENT_MASK", "type": "field", "idx": 3620, "Desc": "the event mask for selecting window state events ."}{"node_name": "WINDOW_FOCUS_EVENT_MASK", "type": "field", "idx": 3621, "Desc": "the event mask for selecting window focus events ."}{"node_name": "RESERVED_ID_MAX", "type": "field", "idx": 3622, "Desc": "the maximum value for reserved awt event ids . programs defining their own event ids should use ids greater than this value ."}{"node_name": "a", "type": "field", "idx": 3634, "Desc": "a variable in the event chain ( listener-a )"}{"node_name": "b", "type": "field", "idx": 3635, "Desc": "a variable in the event chain ( listener-b )"}{"node_name": "JOIN_MITER", "type": "field", "idx": 3876, "Desc": "joins path segments by extending their outside edges until they meet ."}{"node_name": "JOIN_ROUND", "type": "field", "idx": 3877, "Desc": "joins path segments by rounding off the corner at a radius of half the line width ."}{"node_name": "JOIN_BEVEL", "type": "field", "idx": 3878, "Desc": "joins path segments by connecting the outer corners of their wide outlines with a straight segment ."}{"node_name": "CAP_BUTT", "type": "field", "idx": 3879, "Desc": "ends unclosed subpaths and dash segments with no added decoration ."}{"node_name": "CAP_ROUND", "type": "field", "idx": 3880, "Desc": "ends unclosed subpaths and dash segments with a round decoration that has a radius equal to half of the width of the pen ."}{"node_name": "CAP_SQUARE", "type": "field", "idx": 3881, "Desc": "ends unclosed subpaths and dash segments with a square projection that extends beyond the end of the segment to a distance equal to half of the line width ."}{"node_name": "NORTH", "type": "field", "idx": 3913, "Desc": "the north layout constraint ( top of container ) ."}{"node_name": "SOUTH", "type": "field", "idx": 3914, "Desc": "the south layout constraint ( bottom of container ) ."}{"node_name": "EAST", "type": "field", "idx": 3915, "Desc": "the east layout constraint ( right side of container ) ."}{"node_name": "WEST", "type": "field", "idx": 3916, "Desc": "the west layout constraint ( left side of container ) ."}{"node_name": "CENTER", "type": "field", "idx": 3917, "Desc": "the center layout constraint ( middle of container ) ."}{"node_name": "BEFORE_FIRST_LINE", "type": "field", "idx": 3918, "Desc": "synonym for page_start . exists for compatibility with previous versions . page_start is preferred ."}{"node_name": "AFTER_LAST_LINE", "type": "field", "idx": 3919, "Desc": "synonym for page_end . exists for compatibility with previous versions . page_end is preferred ."}{"node_name": "BEFORE_LINE_BEGINS", "type": "field", "idx": 3920, "Desc": "synonym for line_start . exists for compatibility with previous versions . line_start is preferred ."}{"node_name": "AFTER_LINE_ENDS", "type": "field", "idx": 3921, "Desc": "synonym for line_end . exists for compatibility with previous versions . line_end is preferred ."}{"node_name": "PAGE_START", "type": "field", "idx": 3922, "Desc": "the component comes before the first line of the layout's content . for western , left-to-right and top-to-bottom orientations , this is equivalent to north ."}{"node_name": "PAGE_END", "type": "field", "idx": 3923, "Desc": "the component comes after the last line of the layout's content . for western , left-to-right and top-to-bottom orientations , this is equivalent to south ."}{"node_name": "LINE_START", "type": "field", "idx": 3924, "Desc": "the component goes at the beginning of the line direction for the layout . for western , left-to-right and top-to-bottom orientations , this is equivalent to west ."}{"node_name": "LINE_END", "type": "field", "idx": 3925, "Desc": "the component goes at the end of the line direction for the layout . for western , left-to-right and top-to-bottom orientations , this is equivalent to east ."}{"node_name": "UNDEFINED", "type": "field", "idx": 3964, "Desc": "when flip contents are undefined , the contents of the back buffer are undefined after flipping ."}{"node_name": "BACKGROUND", "type": "field", "idx": 3965, "Desc": "when flip contents are background , the contents of the back buffer are cleared with the background color after flipping ."}{"node_name": "PRIOR", "type": "field", "idx": 3966, "Desc": "when flip contents are prior , the contents of the back buffer are the prior contents of the front buffer ( a true page flip ) ."}{"node_name": "COPIED", "type": "field", "idx": 3967, "Desc": "when flip contents are copied , the contents of the back buffer are copied to the front buffer when flipping ."}{"node_name": "TYPE_XYZ", "type": "field", "idx": 4237, "Desc": "any of the family of xyz color spaces ."}{"node_name": "TYPE_Lab", "type": "field", "idx": 4238, "Desc": "any of the family of lab color spaces ."}{"node_name": "TYPE_Luv", "type": "field", "idx": 4239, "Desc": "any of the family of luv color spaces ."}{"node_name": "TYPE_YCbCr", "type": "field", "idx": 4240, "Desc": "any of the family of ycbcr color spaces ."}{"node_name": "TYPE_Yxy", "type": "field", "idx": 4241, "Desc": "any of the family of yxy color spaces ."}{"node_name": "TYPE_RGB", "type": "field", "idx": 4242, "Desc": "any of the family of rgb color spaces ."}{"node_name": "TYPE_GRAY", "type": "field", "idx": 4243, "Desc": "any of the family of gray color spaces ."}{"node_name": "TYPE_HSV", "type": "field", "idx": 4244, "Desc": "any of the family of hsv color spaces ."}{"node_name": "TYPE_HLS", "type": "field", "idx": 4245, "Desc": "any of the family of hls color spaces ."}{"node_name": "TYPE_CMYK", "type": "field", "idx": 4246, "Desc": "any of the family of cmyk color spaces ."}{"node_name": "TYPE_CMY", "type": "field", "idx": 4247, "Desc": "any of the family of cmy color spaces ."}{"node_name": "TYPE_2CLR", "type": "field", "idx": 4248, "Desc": "generic 2 component color spaces ."}{"node_name": "TYPE_3CLR", "type": "field", "idx": 4249, "Desc": "generic 3 component color spaces ."}{"node_name": "TYPE_4CLR", "type": "field", "idx": 4250, "Desc": "generic 4 component color spaces ."}{"node_name": "TYPE_5CLR", "type": "field", "idx": 4251, "Desc": "generic 5 component color spaces ."}{"node_name": "TYPE_6CLR", "type": "field", "idx": 4252, "Desc": "generic 6 component color spaces ."}{"node_name": "TYPE_7CLR", "type": "field", "idx": 4253, "Desc": "generic 7 component color spaces ."}{"node_name": "TYPE_8CLR", "type": "field", "idx": 4254, "Desc": "generic 8 component color spaces ."}{"node_name": "TYPE_9CLR", "type": "field", "idx": 4255, "Desc": "generic 9 component color spaces ."}{"node_name": "TYPE_ACLR", "type": "field", "idx": 4256, "Desc": "generic 10 component color spaces ."}{"node_name": "TYPE_BCLR", "type": "field", "idx": 4257, "Desc": "generic 11 component color spaces ."}{"node_name": "TYPE_CCLR", "type": "field", "idx": 4258, "Desc": "generic 12 component color spaces ."}{"node_name": "TYPE_DCLR", "type": "field", "idx": 4259, "Desc": "generic 13 component color spaces ."}{"node_name": "TYPE_ECLR", "type": "field", "idx": 4260, "Desc": "generic 14 component color spaces ."}{"node_name": "TYPE_FCLR", "type": "field", "idx": 4261, "Desc": "generic 15 component color spaces ."}{"node_name": "CS_sRGB", "type": "field", "idx": 4262, "Desc": "the srgb color space defined at http://www.w3.org/pub/www/graphics/color/srgb.html ."}{"node_name": "CS_LINEAR_RGB", "type": "field", "idx": 4263, "Desc": "a built-in linear rgb color space . this space is based on the same rgb primaries as cs_srgb , but has a linear tone reproduction curve ."}{"node_name": "CS_CIEXYZ", "type": "field", "idx": 4264, "Desc": "the ciexyz conversion color space defined above ."}{"node_name": "CS_PYCC", "type": "field", "idx": 4265, "Desc": "the photo ycc conversion color space ."}{"node_name": "CS_GRAY", "type": "field", "idx": 4266, "Desc": "the built-in linear gray scale color space ."}{"node_name": "CLASS_INPUT", "type": "field", "idx": 4306, "Desc": "profile class is input ."}{"node_name": "CLASS_DISPLAY", "type": "field", "idx": 4307, "Desc": "profile class is display ."}{"node_name": "CLASS_OUTPUT", "type": "field", "idx": 4308, "Desc": "profile class is output ."}{"node_name": "CLASS_DEVICELINK", "type": "field", "idx": 4309, "Desc": "profile class is device link ."}{"node_name": "CLASS_COLORSPACECONVERSION", "type": "field", "idx": 4310, "Desc": "profile class is color space conversion ."}{"node_name": "CLASS_ABSTRACT", "type": "field", "idx": 4311, "Desc": "profile class is abstract ."}{"node_name": "CLASS_NAMEDCOLOR", "type": "field", "idx": 4312, "Desc": "profile class is named color ."}{"node_name": "icSigXYZData", "type": "field", "idx": 4313, "Desc": "icc profile color space type signature : ' xyz ' ."}{"node_name": "icSigLabData", "type": "field", "idx": 4314, "Desc": "icc profile color space type signature : ' lab ' ."}{"node_name": "icSigLuvData", "type": "field", "idx": 4315, "Desc": "icc profile color space type signature : ' luv ' ."}{"node_name": "icSigYCbCrData", "type": "field", "idx": 4316, "Desc": "icc profile color space type signature : ' ycbr ' ."}{"node_name": "icSigYxyData", "type": "field", "idx": 4317, "Desc": "icc profile color space type signature : ' yxy ' ."}{"node_name": "icSigRgbData", "type": "field", "idx": 4318, "Desc": "icc profile color space type signature : ' rgb ' ."}{"node_name": "icSigGrayData", "type": "field", "idx": 4319, "Desc": "icc profile color space type signature : ' gray ' ."}{"node_name": "icSigHsvData", "type": "field", "idx": 4320, "Desc": "icc profile color space type signature : ' hsv ' ."}{"node_name": "icSigHlsData", "type": "field", "idx": 4321, "Desc": "icc profile color space type signature : ' hls ' ."}{"node_name": "icSigCmykData", "type": "field", "idx": 4322, "Desc": "icc profile color space type signature : ' cmyk ' ."}{"node_name": "icSigCmyData", "type": "field", "idx": 4323, "Desc": "icc profile color space type signature : ' cmy ' ."}{"node_name": "icSigSpace2CLR", "type": "field", "idx": 4324, "Desc": "icc profile color space type signature : ' 2clr ' ."}{"node_name": "icSigSpace3CLR", "type": "field", "idx": 4325, "Desc": "icc profile color space type signature : ' 3clr ' ."}{"node_name": "icSigSpace4CLR", "type": "field", "idx": 4326, "Desc": "icc profile color space type signature : ' 4clr ' ."}{"node_name": "icSigSpace5CLR", "type": "field", "idx": 4327, "Desc": "icc profile color space type signature : ' 5clr ' ."}{"node_name": "icSigSpace6CLR", "type": "field", "idx": 4328, "Desc": "icc profile color space type signature : ' 6clr ' ."}{"node_name": "icSigSpace7CLR", "type": "field", "idx": 4329, "Desc": "icc profile color space type signature : ' 7clr ' ."}{"node_name": "icSigSpace8CLR", "type": "field", "idx": 4330, "Desc": "icc profile color space type signature : ' 8clr ' ."}{"node_name": "icSigSpace9CLR", "type": "field", "idx": 4331, "Desc": "icc profile color space type signature : ' 9clr ' ."}{"node_name": "icSigSpaceACLR", "type": "field", "idx": 4332, "Desc": "icc profile color space type signature : ' aclr ' ."}{"node_name": "icSigSpaceBCLR", "type": "field", "idx": 4333, "Desc": "icc profile color space type signature : ' bclr ' ."}{"node_name": "icSigSpaceCCLR", "type": "field", "idx": 4334, "Desc": "icc profile color space type signature : ' cclr ' ."}{"node_name": "icSigSpaceDCLR", "type": "field", "idx": 4335, "Desc": "icc profile color space type signature : ' dclr ' ."}{"node_name": "icSigSpaceECLR", "type": "field", "idx": 4336, "Desc": "icc profile color space type signature : ' eclr ' ."}{"node_name": "icSigSpaceFCLR", "type": "field", "idx": 4337, "Desc": "icc profile color space type signature : ' fclr ' ."}{"node_name": "icSigInputClass", "type": "field", "idx": 4338, "Desc": "icc profile class signature : ' scnr ' ."}{"node_name": "icSigDisplayClass", "type": "field", "idx": 4339, "Desc": "icc profile class signature : ' mntr ' ."}{"node_name": "icSigOutputClass", "type": "field", "idx": 4340, "Desc": "icc profile class signature : ' prtr ' ."}{"node_name": "icSigLinkClass", "type": "field", "idx": 4341, "Desc": "icc profile class signature : ' link ' ."}{"node_name": "icSigAbstractClass", "type": "field", "idx": 4342, "Desc": "icc profile class signature : ' abst ' ."}{"node_name": "icSigColorSpaceClass", "type": "field", "idx": 4343, "Desc": "icc profile class signature : ' spac ' ."}{"node_name": "icSigNamedColorClass", "type": "field", "idx": 4344, "Desc": "icc profile class signature : ' nmcl ' ."}{"node_name": "icPerceptual", "type": "field", "idx": 4345, "Desc": "icc profile rendering intent : perceptual ."}{"node_name": "icRelativeColorimetric", "type": "field", "idx": 4346, "Desc": "icc profile rendering intent : relativecolorimetric ."}{"node_name": "icMediaRelativeColorimetric", "type": "field", "idx": 4347, "Desc": "icc profile rendering intent : media-relativecolorimetric ."}{"node_name": "icSaturation", "type": "field", "idx": 4348, "Desc": "icc profile rendering intent : saturation ."}{"node_name": "icAbsoluteColorimetric", "type": "field", "idx": 4349, "Desc": "icc profile rendering intent : absolutecolorimetric ."}{"node_name": "icICCAbsoluteColorimetric", "type": "field", "idx": 4350, "Desc": "icc profile rendering intent : icc-absolutecolorimetric ."}{"node_name": "icSigHead", "type": "field", "idx": 4351, "Desc": "icc profile tag signature : ' head ' - special ."}{"node_name": "icSigAToB0Tag", "type": "field", "idx": 4352, "Desc": "icc profile tag signature : ' a2b0 ' ."}{"node_name": "icSigAToB1Tag", "type": "field", "idx": 4353, "Desc": "icc profile tag signature : ' a2b1 ' ."}{"node_name": "icSigAToB2Tag", "type": "field", "idx": 4354, "Desc": "icc profile tag signature : ' a2b2 ' ."}{"node_name": "icSigBlueColorantTag", "type": "field", "idx": 4355, "Desc": "icc profile tag signature : ' bxyz ' ."}{"node_name": "icSigBlueMatrixColumnTag", "type": "field", "idx": 4356, "Desc": "icc profile tag signature : ' bxyz ' ."}{"node_name": "icSigBlueTRCTag", "type": "field", "idx": 4357, "Desc": "icc profile tag signature : ' btrc ' ."}{"node_name": "icSigBToA0Tag", "type": "field", "idx": 4358, "Desc": "icc profile tag signature : ' b2a0 ' ."}{"node_name": "icSigBToA1Tag", "type": "field", "idx": 4359, "Desc": "icc profile tag signature : ' b2a1 ' ."}{"node_name": "icSigBToA2Tag", "type": "field", "idx": 4360, "Desc": "icc profile tag signature : ' b2a2 ' ."}{"node_name": "icSigCalibrationDateTimeTag", "type": "field", "idx": 4361, "Desc": "icc profile tag signature : ' calt ' ."}{"node_name": "icSigCharTargetTag", "type": "field", "idx": 4362, "Desc": "icc profile tag signature : ' targ ' ."}{"node_name": "icSigCopyrightTag", "type": "field", "idx": 4363, "Desc": "icc profile tag signature : ' cprt ' ."}{"node_name": "icSigCrdInfoTag", "type": "field", "idx": 4364, "Desc": "icc profile tag signature : ' crdi ' ."}{"node_name": "icSigDeviceMfgDescTag", "type": "field", "idx": 4365, "Desc": "icc profile tag signature : ' dmnd ' ."}{"node_name": "icSigDeviceModelDescTag", "type": "field", "idx": 4366, "Desc": "icc profile tag signature : ' dmdd ' ."}{"node_name": "icSigDeviceSettingsTag", "type": "field", "idx": 4367, "Desc": "icc profile tag signature : ' devs ' ."}{"node_name": "icSigGamutTag", "type": "field", "idx": 4368, "Desc": "icc profile tag signature : ' gamt ' ."}{"node_name": "icSigGrayTRCTag", "type": "field", "idx": 4369, "Desc": "icc profile tag signature : ' ktrc ' ."}{"node_name": "icSigGreenColorantTag", "type": "field", "idx": 4370, "Desc": "icc profile tag signature : ' gxyz ' ."}{"node_name": "icSigGreenMatrixColumnTag", "type": "field", "idx": 4371, "Desc": "icc profile tag signature : ' gxyz ' ."}{"node_name": "icSigGreenTRCTag", "type": "field", "idx": 4372, "Desc": "icc profile tag signature : ' gtrc ' ."}{"node_name": "icSigLuminanceTag", "type": "field", "idx": 4373, "Desc": "icc profile tag signature : ' lumi ' ."}{"node_name": "icSigMeasurementTag", "type": "field", "idx": 4374, "Desc": "icc profile tag signature : ' meas ' ."}{"node_name": "icSigMediaBlackPointTag", "type": "field", "idx": 4375, "Desc": "icc profile tag signature : ' bkpt ' ."}{"node_name": "icSigMediaWhitePointTag", "type": "field", "idx": 4376, "Desc": "icc profile tag signature : ' wtpt ' ."}{"node_name": "icSigNamedColor2Tag", "type": "field", "idx": 4377, "Desc": "icc profile tag signature : ' ncl2 ' ."}{"node_name": "icSigOutputResponseTag", "type": "field", "idx": 4378, "Desc": "icc profile tag signature : ' resp ' ."}{"node_name": "icSigPreview0Tag", "type": "field", "idx": 4379, "Desc": "icc profile tag signature : ' pre0 ' ."}{"node_name": "icSigPreview1Tag", "type": "field", "idx": 4380, "Desc": "icc profile tag signature : ' pre1 ' ."}{"node_name": "icSigPreview2Tag", "type": "field", "idx": 4381, "Desc": "icc profile tag signature : ' pre2 ' ."}{"node_name": "icSigProfileDescriptionTag", "type": "field", "idx": 4382, "Desc": "icc profile tag signature : ' desc ' ."}{"node_name": "icSigProfileSequenceDescTag", "type": "field", "idx": 4383, "Desc": "icc profile tag signature : ' pseq ' ."}{"node_name": "icSigPs2CRD0Tag", "type": "field", "idx": 4384, "Desc": "icc profile tag signature : ' psd0 ' ."}{"node_name": "icSigPs2CRD1Tag", "type": "field", "idx": 4385, "Desc": "icc profile tag signature : ' psd1 ' ."}{"node_name": "icSigPs2CRD2Tag", "type": "field", "idx": 4386, "Desc": "icc profile tag signature : ' psd2 ' ."}{"node_name": "icSigPs2CRD3Tag", "type": "field", "idx": 4387, "Desc": "icc profile tag signature : ' psd3 ' ."}{"node_name": "icSigPs2CSATag", "type": "field", "idx": 4388, "Desc": "icc profile tag signature : ' ps2s ' ."}{"node_name": "icSigPs2RenderingIntentTag", "type": "field", "idx": 4389, "Desc": "icc profile tag signature : ' ps2i ' ."}{"node_name": "icSigRedColorantTag", "type": "field", "idx": 4390, "Desc": "icc profile tag signature : ' rxyz ' ."}{"node_name": "icSigRedMatrixColumnTag", "type": "field", "idx": 4391, "Desc": "icc profile tag signature : ' rxyz ' ."}{"node_name": "icSigRedTRCTag", "type": "field", "idx": 4392, "Desc": "icc profile tag signature : ' rtrc ' ."}{"node_name": "icSigScreeningDescTag", "type": "field", "idx": 4393, "Desc": "icc profile tag signature : ' scrd ' ."}{"node_name": "icSigScreeningTag", "type": "field", "idx": 4394, "Desc": "icc profile tag signature : ' scrn ' ."}{"node_name": "icSigTechnologyTag", "type": "field", "idx": 4395, "Desc": "icc profile tag signature : ' tech ' ."}{"node_name": "icSigUcrBgTag", "type": "field", "idx": 4396, "Desc": "icc profile tag signature : ' bfd ' ."}{"node_name": "icSigViewingCondDescTag", "type": "field", "idx": 4397, "Desc": "icc profile tag signature : ' vued ' ."}{"node_name": "icSigViewingConditionsTag", "type": "field", "idx": 4398, "Desc": "icc profile tag signature : ' view ' ."}{"node_name": "icSigChromaticityTag", "type": "field", "idx": 4399, "Desc": "icc profile tag signature : ' chrm ' ."}{"node_name": "icSigChromaticAdaptationTag", "type": "field", "idx": 4400, "Desc": "icc profile tag signature : ' chad ' ."}{"node_name": "icSigColorantOrderTag", "type": "field", "idx": 4401, "Desc": "icc profile tag signature : ' clro ' ."}{"node_name": "icSigColorantTableTag", "type": "field", "idx": 4402, "Desc": "icc profile tag signature : ' clrt ' ."}{"node_name": "icHdrSize", "type": "field", "idx": 4403, "Desc": "icc profile header location : profile size in bytes ."}{"node_name": "icHdrCmmId", "type": "field", "idx": 4404, "Desc": "icc profile header location : cmm for this profile ."}{"node_name": "icHdrVersion", "type": "field", "idx": 4405, "Desc": "icc profile header location : format version number ."}{"node_name": "icHdrDeviceClass", "type": "field", "idx": 4406, "Desc": "icc profile header location : type of profile ."}{"node_name": "icHdrColorSpace", "type": "field", "idx": 4407, "Desc": "icc profile header location : color space of data ."}{"node_name": "icHdrPcs", "type": "field", "idx": 4408, "Desc": "icc profile header location : pcs - xyz or lab only ."}{"node_name": "icHdrDate", "type": "field", "idx": 4409, "Desc": "icc profile header location : date profile was created ."}{"node_name": "icHdrMagic", "type": "field", "idx": 4410, "Desc": "icc profile header location : icmagicnumber ."}{"node_name": "icHdrPlatform", "type": "field", "idx": 4411, "Desc": "icc profile header location : primary platform ."}{"node_name": "icHdrFlags", "type": "field", "idx": 4412, "Desc": "icc profile header location : various bit settings ."}{"node_name": "icHdrManufacturer", "type": "field", "idx": 4413, "Desc": "icc profile header location : device manufacturer ."}{"node_name": "icHdrModel", "type": "field", "idx": 4414, "Desc": "icc profile header location : device model number ."}{"node_name": "icHdrAttributes", "type": "field", "idx": 4415, "Desc": "icc profile header location : device attributes ."}{"node_name": "icHdrRenderingIntent", "type": "field", "idx": 4416, "Desc": "icc profile header location : rendering intent ."}{"node_name": "icHdrIlluminant", "type": "field", "idx": 4417, "Desc": "icc profile header location : profile illuminant ."}{"node_name": "icHdrCreator", "type": "field", "idx": 4418, "Desc": "icc profile header location : profile creator ."}{"node_name": "icHdrProfileID", "type": "field", "idx": 4419, "Desc": "icc profile header location : profile's id ."}{"node_name": "icTagType", "type": "field", "idx": 4420, "Desc": "icc profile constant : tag type signature ."}{"node_name": "icTagReserved", "type": "field", "idx": 4421, "Desc": "icc profile constant : reserved ."}{"node_name": "icCurveCount", "type": "field", "idx": 4422, "Desc": "icc profile constant : curvetype count ."}{"node_name": "icCurveData", "type": "field", "idx": 4423, "Desc": "icc profile constant : curvetype data ."}{"node_name": "icXYZNumberX", "type": "field", "idx": 4424, "Desc": "icc profile constant : xyznumber x ."}{"node_name": "REDCOMPONENT", "type": "field", "idx": 4455, "Desc": "used to get a gamma value or trc for the red component ."}{"node_name": "GREENCOMPONENT", "type": "field", "idx": 4456, "Desc": "used to get a gamma value or trc for the green component ."}{"node_name": "BLUECOMPONENT", "type": "field", "idx": 4457, "Desc": "used to get a gamma value or trc for the blue component ."}{"node_name": "white", "type": "field", "idx": 4465, "Desc": "the color white . in the default srgb space ."}{"node_name": "WHITE", "type": "field", "idx": 4466, "Desc": "the color white . in the default srgb space ."}{"node_name": "lightGray", "type": "field", "idx": 4467, "Desc": "the color light gray . in the default srgb space ."}{"node_name": "LIGHT_GRAY", "type": "field", "idx": 4468, "Desc": "the color light gray . in the default srgb space ."}{"node_name": "gray", "type": "field", "idx": 4469, "Desc": "the color gray . in the default srgb space ."}{"node_name": "GRAY", "type": "field", "idx": 4470, "Desc": "the color gray . in the default srgb space ."}{"node_name": "darkGray", "type": "field", "idx": 4471, "Desc": "the color dark gray . in the default srgb space ."}{"node_name": "DARK_GRAY", "type": "field", "idx": 4472, "Desc": "the color dark gray . in the default srgb space ."}{"node_name": "black", "type": "field", "idx": 4473, "Desc": "the color black . in the default srgb space ."}{"node_name": "BLACK", "type": "field", "idx": 4474, "Desc": "the color black . in the default srgb space ."}{"node_name": "red", "type": "field", "idx": 4475, "Desc": "the color red . in the default srgb space ."}{"node_name": "RED", "type": "field", "idx": 4476, "Desc": "the color red . in the default srgb space ."}{"node_name": "pink", "type": "field", "idx": 4477, "Desc": "the color pink . in the default srgb space ."}{"node_name": "PINK", "type": "field", "idx": 4478, "Desc": "the color pink . in the default srgb space ."}{"node_name": "orange", "type": "field", "idx": 4479, "Desc": "the color orange . in the default srgb space ."}{"node_name": "ORANGE", "type": "field", "idx": 4480, "Desc": "the color orange . in the default srgb space ."}{"node_name": "yellow", "type": "field", "idx": 4481, "Desc": "the color yellow . in the default srgb space ."}{"node_name": "YELLOW", "type": "field", "idx": 4482, "Desc": "the color yellow . in the default srgb space ."}{"node_name": "green", "type": "field", "idx": 4483, "Desc": "the color green . in the default srgb space ."}{"node_name": "GREEN", "type": "field", "idx": 4484, "Desc": "the color green . in the default srgb space ."}{"node_name": "magenta", "type": "field", "idx": 4485, "Desc": "the color magenta . in the default srgb space ."}{"node_name": "MAGENTA", "type": "field", "idx": 4486, "Desc": "the color magenta . in the default srgb space ."}{"node_name": "cyan", "type": "field", "idx": 4487, "Desc": "the color cyan . in the default srgb space ."}{"node_name": "CYAN", "type": "field", "idx": 4488, "Desc": "the color cyan . in the default srgb space ."}{"node_name": "blue", "type": "field", "idx": 4489, "Desc": "the color blue . in the default srgb space ."}{"node_name": "BLUE", "type": "field", "idx": 4490, "Desc": "the color blue . in the default srgb space ."}{"node_name": "accessibleAWTComponentHandler", "type": "field", "idx": 4582, "Desc": "a component listener to track show / hide / resize events and convert them to propertychange events ."}{"node_name": "accessibleAWTFocusHandler", "type": "field", "idx": 4583, "Desc": "a listener to track focus events and convert them to propertychange events ."}{"node_name": "caps", "type": "field", "idx": 4646, "Desc": "the buffering capabilities"}{"node_name": "backBuffers", "type": "field", "idx": 4647, "Desc": "the back buffers"}{"node_name": "validatedContents", "type": "field", "idx": 4648, "Desc": "whether or not the drawing buffer has been recently restored from a lost state ."}{"node_name": "width", "type": "field", "idx": 4649, "Desc": "width of the back buffers"}{"node_name": "height", "type": "field", "idx": 4650, "Desc": "height of the back buffers"}{"node_name": "numBuffers", "type": "field", "idx": 4664, "Desc": "the number of buffers"}{"node_name": "caps", "type": "field", "idx": 4665, "Desc": "the buffering capabilities"}{"node_name": "drawBuffer", "type": "field", "idx": 4666, "Desc": "the drawing buffer"}{"node_name": "drawVBuffer", "type": "field", "idx": 4667, "Desc": "the drawing buffer as a volatile image"}{"node_name": "validatedContents", "type": "field", "idx": 4668, "Desc": "whether or not the drawing buffer has been recently restored from a lost state ."}{"node_name": "TOP_ALIGNMENT", "type": "field", "idx": 4687, "Desc": "ease-of-use constant for getalignmenty() . specifies an alignment to the top of the component ."}{"node_name": "CENTER_ALIGNMENT", "type": "field", "idx": 4688, "Desc": "ease-of-use constant for getalignmenty and getalignmentx . specifies an alignment to the center of the component"}{"node_name": "BOTTOM_ALIGNMENT", "type": "field", "idx": 4689, "Desc": "ease-of-use constant for getalignmenty . specifies an alignment to the bottom of the component ."}{"node_name": "LEFT_ALIGNMENT", "type": "field", "idx": 4690, "Desc": "ease-of-use constant for getalignmentx . specifies an alignment to the left side of the component ."}{"node_name": "RIGHT_ALIGNMENT", "type": "field", "idx": 4691, "Desc": "ease-of-use constant for getalignmentx . specifies an alignment to the right side of the component ."}{"node_name": "accessibleContext", "type": "field", "idx": 4692, "Desc": "the accessiblecontext associated with this component ."}{"node_name": "LEFT_TO_RIGHT", "type": "field", "idx": 5056, "Desc": "items run left to right and lines flow top to bottom examples : english , french ."}{"node_name": "RIGHT_TO_LEFT", "type": "field", "idx": 5057, "Desc": "items run right to left and lines flow top to bottom examples : arabic , hebrew ."}{"node_name": "UNKNOWN", "type": "field", "idx": 5058, "Desc": "indicates that a component's orientation has not been set . to preserve the behavior of existing applications , islefttoright will return true for this value ."}{"node_name": "accessibleContainerHandler", "type": "field", "idx": 5077, "Desc": "the handler to fire propertychange when children are added or removed"}{"node_name": "DEFAULT_CURSOR", "type": "field", "idx": 5230, "Desc": "the default cursor type ( gets set if no cursor is defined ) ."}{"node_name": "CROSSHAIR_CURSOR", "type": "field", "idx": 5231, "Desc": "the crosshair cursor type ."}{"node_name": "TEXT_CURSOR", "type": "field", "idx": 5232, "Desc": "the text cursor type ."}{"node_name": "WAIT_CURSOR", "type": "field", "idx": 5233, "Desc": "the wait cursor type ."}{"node_name": "SW_RESIZE_CURSOR", "type": "field", "idx": 5234, "Desc": "the south-west-resize cursor type ."}{"node_name": "SE_RESIZE_CURSOR", "type": "field", "idx": 5235, "Desc": "the south-east-resize cursor type ."}{"node_name": "NW_RESIZE_CURSOR", "type": "field", "idx": 5236, "Desc": "the north-west-resize cursor type ."}{"node_name": "NE_RESIZE_CURSOR", "type": "field", "idx": 5237, "Desc": "the north-east-resize cursor type ."}{"node_name": "N_RESIZE_CURSOR", "type": "field", "idx": 5238, "Desc": "the north-resize cursor type ."}{"node_name": "S_RESIZE_CURSOR", "type": "field", "idx": 5239, "Desc": "the south-resize cursor type ."}{"node_name": "W_RESIZE_CURSOR", "type": "field", "idx": 5240, "Desc": "the west-resize cursor type ."}{"node_name": "E_RESIZE_CURSOR", "type": "field", "idx": 5241, "Desc": "the east-resize cursor type ."}{"node_name": "HAND_CURSOR", "type": "field", "idx": 5242, "Desc": "the hand cursor type ."}{"node_name": "MOVE_CURSOR", "type": "field", "idx": 5243, "Desc": "the move cursor type ."}{"node_name": "CUSTOM_CURSOR", "type": "field", "idx": 5244, "Desc": "the type associated with all custom cursors ."}{"node_name": "name", "type": "field", "idx": 5245, "Desc": "the user-visible name of the cursor ."}{"node_name": "owner", "type": "field", "idx": 5259, "Desc": "the owner of the clipboard ."}{"node_name": "contents", "type": "field", "idx": 5260, "Desc": "contents of the clipboard ."}{"node_name": "stringFlavor", "type": "field", "idx": 5284, "Desc": "the dataflavor representing a java unicode string class , where : representationclass = java.lang.string mimetype = \" application / x-java-serialized-object \""}{"node_name": "imageFlavor", "type": "field", "idx": 5285, "Desc": "the dataflavor representing a java image class , where : representationclass = java.awt.image mimetype = \" image / x-java-image \" will be null if java.awt.image is not visible , the java.desktop module is not loaded , or the java.desktop module is not in the run-time image ."}{"node_name": "javaSerializedObjectMimeType", "type": "field", "idx": 5286, "Desc": "a mime content-type of application / x-java-serialized-object represents a graph of java object ( s ) that have been made persistent . the representation class associated with this dataflavor identifies the java type of an object returned as a reference from an invocation java.awt.datatransfer.gettransferdata ."}{"node_name": "javaFileListFlavor", "type": "field", "idx": 5287, "Desc": "to transfer a list of files to / from java ( and the underlying platform ) a dataflavor of this type / subtype and representation class of java.util.list is used . each element of the list is required / guaranteed to be of type java.io.file ."}{"node_name": "javaJVMLocalObjectMimeType", "type": "field", "idx": 5288, "Desc": "to transfer a reference to an arbitrary java object reference that has no associated mime content-type , across a transferable interface within the same jvm , a dataflavor with this type / subtype is used , with a representationclass equal to the type of the class / interface being passed across the transferable . the object reference returned from transferable.gettransferdata for a dataflavor with this mime content-type is required to be an instance of the representation class of the dataflavor ."}{"node_name": "javaRemoteObjectMimeType", "type": "field", "idx": 5289, "Desc": "in order to pass a live link to a remote object via a drag and drop action_link operation a mime content type of application / x-java-remote-object should be used , where the representation class of the dataflavor represents the type of the remote interface to be transferred ."}{"node_name": "selectionHtmlFlavor", "type": "field", "idx": 5290, "Desc": "represents a piece of an html markup . the markup consists of the part selected on the source side . therefore some tags in the markup may be unpaired . if the flavor is used to represent the data in a transferable instance , no additional changes will be made . this dataflavor instance represents the same html markup as dataflavor instances which content mime type does not contain document parameter and representation class is the string class . representationclass = string mimetype = \" text / html \""}{"node_name": "fragmentHtmlFlavor", "type": "field", "idx": 5291, "Desc": "represents a piece of an html markup . if possible , the markup received from a native system is supplemented with pair tags to be a well-formed html markup . if the flavor is used to represent the data in a transferable instance , no additional changes will be made . representationclass = string mimetype = \" text / html \""}{"node_name": "allHtmlFlavor", "type": "field", "idx": 5292, "Desc": "represents a piece of an html markup . if possible , the markup received from a native system is supplemented with additional tags to make up a well-formed html document . if the flavor is used to represent the data in a transferable instance , no additional changes will be made . representationclass = string mimetype = \" text / html \""}{"node_name": "DEFAULT_MODALITY_TYPE", "type": "field", "idx": 5601, "Desc": "default modality type for modal dialogs . the default modality type is application_modal . calling the oldstyle setmodal ( true ) is equal to setmodalitytype ( default_modality_type ) ."}{"node_name": "width", "type": "field", "idx": 5680, "Desc": "the width dimension ; negative values can be used ."}{"node_name": "height", "type": "field", "idx": 5681, "Desc": "the height dimension ; negative values can be used ."}{"node_name": "BIT_DEPTH_MULTI", "type": "field", "idx": 5704, "Desc": "value of the bit depth if multiple bit depths are supported in this display mode ."}{"node_name": "REFRESH_RATE_UNKNOWN", "type": "field", "idx": 5705, "Desc": "value of the refresh rate if not known ."}{"node_name": "ACTION_NONE", "type": "field", "idx": 5722, "Desc": "an int representing no action ."}{"node_name": "ACTION_COPY", "type": "field", "idx": 5723, "Desc": "an int representing a \" copy \" action ."}{"node_name": "ACTION_MOVE", "type": "field", "idx": 5724, "Desc": "an int representing a \" move \" action ."}{"node_name": "ACTION_COPY_OR_MOVE", "type": "field", "idx": 5725, "Desc": "an int representing a \" copy \" or \" move \" action ."}{"node_name": "ACTION_LINK", "type": "field", "idx": 5726, "Desc": "an int representing a \" link \" action . the link verb is found in many , if not all native dnd platforms , and the actual interpretation of link semantics is both platform and application dependent . broadly speaking , the semantic is \" do not copy , or move the operand , but create a reference to it \" . defining the meaning of \" reference \" is where ambiguity is introduced . the verb is provided for completeness , but its use is not recommended for dnd operations between logically distinct applications where misinterpretation of the operations semantics could lead to confusing results for the user ."}{"node_name": "ACTION_REFERENCE", "type": "field", "idx": 5727, "Desc": "an int representing a \" reference \" action ( synonym for action_link ) ."}{"node_name": "dragSource", "type": "field", "idx": 5761, "Desc": "the dragsource associated with this draggesturerecognizer ."}{"node_name": "component", "type": "field", "idx": 5762, "Desc": "the component associated with this draggesturerecognizer ."}{"node_name": "dragGestureListener", "type": "field", "idx": 5763, "Desc": "the draggesturelistener associated with this draggesturerecognizer ."}{"node_name": "sourceActions", "type": "field", "idx": 5764, "Desc": "an int representing the type ( s ) of action ( s ) used in this drag and drop operation ."}{"node_name": "events", "type": "field", "idx": 5765, "Desc": "the list of events ( in order ) that the draggesturerecognizer \" recognized \" as a \" gesture \" that triggers a drag ."}{"node_name": "DefaultCopyDrop", "type": "field", "idx": 5801, "Desc": "the default cursor to use with a copy operation indicating that a drop is currently allowed . null if graphicsenvironment.isheadless() returns true ."}{"node_name": "DefaultMoveDrop", "type": "field", "idx": 5802, "Desc": "the default cursor to use with a move operation indicating that a drop is currently allowed . null if graphicsenvironment.isheadless() returns true ."}{"node_name": "DefaultLinkDrop", "type": "field", "idx": 5803, "Desc": "the default cursor to use with a link operation indicating that a drop is currently allowed . null if graphicsenvironment.isheadless() returns true ."}{"node_name": "DefaultCopyNoDrop", "type": "field", "idx": 5804, "Desc": "the default cursor to use with a copy operation indicating that a drop is currently not allowed . null if graphicsenvironment.isheadless() returns true ."}{"node_name": "DefaultMoveNoDrop", "type": "field", "idx": 5805, "Desc": "the default cursor to use with a move operation indicating that a drop is currently not allowed . null if graphicsenvironment.isheadless() returns true ."}{"node_name": "DefaultLinkNoDrop", "type": "field", "idx": 5806, "Desc": "the default cursor to use with a link operation indicating that a drop is currently not allowed . null if graphicsenvironment.isheadless() returns true ."}{"node_name": "DEFAULT", "type": "field", "idx": 5881, "Desc": "an int used by updatecurrentcursor() indicating that the cursor should change to the default ( no drop ) cursor ."}{"node_name": "ENTER", "type": "field", "idx": 5882, "Desc": "an int used by updatecurrentcursor() indicating that the cursor has entered a droptarget ."}{"node_name": "OVER", "type": "field", "idx": 5883, "Desc": "an int used by updatecurrentcursor() indicating that the cursor is over a droptarget ."}{"node_name": "CHANGED", "type": "field", "idx": 5884, "Desc": "an int used by updatecurrentcursor() indicating that the user operation has changed ."}{"node_name": "transferable", "type": "field", "idx": 6079, "Desc": "the encapsulated transferable object ."}{"node_name": "isLocal", "type": "field", "idx": 6080, "Desc": "a boolean indicating if the encapsulated transferable object represents the result of local drag-n-drop operation ( within the same jvm ) ."}{"node_name": "context", "type": "field", "idx": 6130, "Desc": "the droptargetcontext associated with this droptargetevent ."}{"node_name": "SHIFT_MASK", "type": "field", "idx": 6181, "Desc": "the shift modifier . an indicator that the shift key was held down during the event ."}{"node_name": "CTRL_MASK", "type": "field", "idx": 6182, "Desc": "the control modifier . an indicator that the control key was held down during the event ."}{"node_name": "META_MASK", "type": "field", "idx": 6183, "Desc": "the meta modifier . an indicator that the meta key was held down during the event ."}{"node_name": "ALT_MASK", "type": "field", "idx": 6184, "Desc": "the alt modifier . an indicator that the alt key was held down during the event ."}{"node_name": "ACTION_FIRST", "type": "field", "idx": 6185, "Desc": "the first number in the range of ids used for action events ."}{"node_name": "ACTION_LAST", "type": "field", "idx": 6186, "Desc": "the last number in the range of ids used for action events ."}{"node_name": "ACTION_PERFORMED", "type": "field", "idx": 6187, "Desc": "this event id indicates that a meaningful action occurred ."}{"node_name": "ADJUSTMENT_FIRST", "type": "field", "idx": 6211, "Desc": "marks the first integer id for the range of adjustment event ids ."}{"node_name": "ADJUSTMENT_LAST", "type": "field", "idx": 6212, "Desc": "marks the last integer id for the range of adjustment event ids ."}{"node_name": "ADJUSTMENT_VALUE_CHANGED", "type": "field", "idx": 6213, "Desc": "the adjustment value changed event ."}{"node_name": "UNIT_INCREMENT", "type": "field", "idx": 6214, "Desc": "the unit increment adjustment type ."}{"node_name": "UNIT_DECREMENT", "type": "field", "idx": 6215, "Desc": "the unit decrement adjustment type ."}{"node_name": "BLOCK_DECREMENT", "type": "field", "idx": 6216, "Desc": "the block decrement adjustment type ."}{"node_name": "BLOCK_INCREMENT", "type": "field", "idx": 6217, "Desc": "the block increment adjustment type ."}{"node_name": "TRACK", "type": "field", "idx": 6218, "Desc": "the absolute tracking adjustment type ."}{"node_name": "COMPONENT_FIRST", "type": "field", "idx": 6258, "Desc": "the first number in the range of ids used for component events ."}{"node_name": "COMPONENT_LAST", "type": "field", "idx": 6259, "Desc": "the last number in the range of ids used for component events ."}{"node_name": "COMPONENT_MOVED", "type": "field", "idx": 6260, "Desc": "this event indicates that the component's position changed ."}{"node_name": "COMPONENT_RESIZED", "type": "field", "idx": 6261, "Desc": "this event indicates that the component's size changed ."}{"node_name": "COMPONENT_SHOWN", "type": "field", "idx": 6262, "Desc": "this event indicates that the component was made visible ."}{"node_name": "COMPONENT_HIDDEN", "type": "field", "idx": 6263, "Desc": "this event indicates that the component was rendered invisible ."}{"node_name": "CONTAINER_FIRST", "type": "field", "idx": 6285, "Desc": "the first number in the range of ids used for container events ."}{"node_name": "CONTAINER_LAST", "type": "field", "idx": 6286, "Desc": "the last number in the range of ids used for container events ."}{"node_name": "COMPONENT_ADDED", "type": "field", "idx": 6287, "Desc": "this event indicates that a component was added to the container ."}{"node_name": "COMPONENT_REMOVED", "type": "field", "idx": 6288, "Desc": "this event indicates that a component was removed from the container ."}{"node_name": "FOCUS_FIRST", "type": "field", "idx": 6312, "Desc": "the first number in the range of ids used for focus events ."}{"node_name": "FOCUS_LAST", "type": "field", "idx": 6313, "Desc": "the last number in the range of ids used for focus events ."}{"node_name": "FOCUS_GAINED", "type": "field", "idx": 6314, "Desc": "this event indicates that the component is now the focus owner ."}{"node_name": "FOCUS_LOST", "type": "field", "idx": 6315, "Desc": "this event indicates that the component is no longer the focus owner ."}{"node_name": "HIERARCHY_FIRST", "type": "field", "idx": 6355, "Desc": "marks the first integer id for the range of hierarchy event ids ."}{"node_name": "HIERARCHY_CHANGED", "type": "field", "idx": 6356, "Desc": "the event id indicating that modification was made to the entire hierarchy tree ."}{"node_name": "ANCESTOR_MOVED", "type": "field", "idx": 6357, "Desc": "the event id indicating an ancestor-container was moved ."}{"node_name": "ANCESTOR_RESIZED", "type": "field", "idx": 6358, "Desc": "the event id indicating an ancestor-container was resized ."}{"node_name": "HIERARCHY_LAST", "type": "field", "idx": 6359, "Desc": "marks the last integer id for the range of ancestor event ids ."}{"node_name": "PARENT_CHANGED", "type": "field", "idx": 6360, "Desc": "a change flag indicates that the hierarchy_changed event was generated by a reparenting operation ."}{"node_name": "DISPLAYABILITY_CHANGED", "type": "field", "idx": 6361, "Desc": "a change flag indicates that the hierarchy_changed event was generated due to the changing of the hierarchy displayability . to discern the current displayability of the hierarchy , call the component.isdisplayable method . displayability changes occur in response to explicit or implicit calls of the component.addnotify and component.removenotify methods ."}{"node_name": "SHOWING_CHANGED", "type": "field", "idx": 6362, "Desc": "a change flag indicates that the hierarchy_changed event was generated due to the changing of the hierarchy showing state . to discern the current showing state of the hierarchy , call the component.isshowing method . showing state changes occur when either the displayability or visibility of the hierarchy occurs . visibility changes occur in response to explicit or implicit calls of the component.show and component.hide methods ."}{"node_name": "SHIFT_DOWN_MASK", "type": "field", "idx": 6383, "Desc": "the shift key extended modifier constant ."}{"node_name": "CTRL_DOWN_MASK", "type": "field", "idx": 6384, "Desc": "the control key extended modifier constant ."}{"node_name": "META_DOWN_MASK", "type": "field", "idx": 6385, "Desc": "the meta key extended modifier constant ."}{"node_name": "ALT_DOWN_MASK", "type": "field", "idx": 6386, "Desc": "the alt key extended modifier constant ."}{"node_name": "BUTTON1_DOWN_MASK", "type": "field", "idx": 6387, "Desc": "the mouse button1 extended modifier constant ."}{"node_name": "BUTTON2_DOWN_MASK", "type": "field", "idx": 6388, "Desc": "the mouse button2 extended modifier constant ."}{"node_name": "BUTTON3_DOWN_MASK", "type": "field", "idx": 6389, "Desc": "the mouse button3 extended modifier constant ."}{"node_name": "ALT_GRAPH_DOWN_MASK", "type": "field", "idx": 6390, "Desc": "the altgraph key extended modifier constant ."}{"node_name": "INPUT_METHOD_FIRST", "type": "field", "idx": 6405, "Desc": "marks the first integer id for the range of input method event ids ."}{"node_name": "INPUT_METHOD_TEXT_CHANGED", "type": "field", "idx": 6406, "Desc": "the event type indicating changed input method text . this event is generated by input methods while processing input ."}{"node_name": "CARET_POSITION_CHANGED", "type": "field", "idx": 6407, "Desc": "the event type indicating a changed insertion point in input method text . this event is generated by input methods while processing input if only the caret changed ."}{"node_name": "INPUT_METHOD_LAST", "type": "field", "idx": 6408, "Desc": "marks the last integer id for the range of input method event ids ."}{"node_name": "INVOCATION_FIRST", "type": "field", "idx": 6443, "Desc": "marks the first integer id for the range of invocation event ids ."}{"node_name": "INVOCATION_DEFAULT", "type": "field", "idx": 6444, "Desc": "the default id for all invocationevents ."}{"node_name": "INVOCATION_LAST", "type": "field", "idx": 6445, "Desc": "marks the last integer id for the range of invocation event ids ."}{"node_name": "runnable", "type": "field", "idx": 6446, "Desc": "the runnable whose run() method will be called ."}{"node_name": "notifier", "type": "field", "idx": 6447, "Desc": "the ( potentially null ) object whose notifyall() method will be called immediately after the runnable.run() method has returned or thrown an exception or after the event was disposed ."}{"node_name": "catchExceptions", "type": "field", "idx": 6448, "Desc": "set to true if dispatch() catches throwable and stores it in the exception instance variable . if false , throwables are propagated up to the eventdispatchthread's dispatch loop ."}{"node_name": "ITEM_FIRST", "type": "field", "idx": 6475, "Desc": "the first number in the range of ids used for item events ."}{"node_name": "ITEM_LAST", "type": "field", "idx": 6476, "Desc": "the last number in the range of ids used for item events ."}{"node_name": "ITEM_STATE_CHANGED", "type": "field", "idx": 6477, "Desc": "this event id indicates that an item's state changed ."}{"node_name": "SELECTED", "type": "field", "idx": 6478, "Desc": "this state-change value indicates that an item was selected ."}{"node_name": "DESELECTED", "type": "field", "idx": 6479, "Desc": "this state-change-value indicates that a selected item was deselected ."}{"node_name": "KEY_FIRST", "type": "field", "idx": 6502, "Desc": "the first number in the range of ids used for key events ."}{"node_name": "KEY_LAST", "type": "field", "idx": 6503, "Desc": "the last number in the range of ids used for key events ."}{"node_name": "KEY_TYPED", "type": "field", "idx": 6504, "Desc": "the \" key typed \" event . this event is generated when a character is entered . in the simplest case , it is produced by a single key press . often , however , characters are produced by series of key presses , and the mapping from key pressed events to key typed events may be many-to-one or many-to-many ."}{"node_name": "KEY_PRESSED", "type": "field", "idx": 6505, "Desc": "the \" key pressed \" event . this event is generated when a key is pushed down ."}{"node_name": "KEY_RELEASED", "type": "field", "idx": 6506, "Desc": "the \" key released \" event . this event is generated when a key is let up ."}{"node_name": "VK_ENTER", "type": "field", "idx": 6507, "Desc": "constant for the enter virtual key ."}{"node_name": "VK_BACK_SPACE", "type": "field", "idx": 6508, "Desc": "constant for the back_space virtual key ."}{"node_name": "VK_TAB", "type": "field", "idx": 6509, "Desc": "constant for the tab virtual key ."}{"node_name": "VK_CANCEL", "type": "field", "idx": 6510, "Desc": "constant for the cancel virtual key ."}{"node_name": "VK_CLEAR", "type": "field", "idx": 6511, "Desc": "constant for the clear virtual key ."}{"node_name": "VK_SHIFT", "type": "field", "idx": 6512, "Desc": "constant for the shift virtual key ."}{"node_name": "VK_CONTROL", "type": "field", "idx": 6513, "Desc": "constant for the control virtual key ."}{"node_name": "VK_ALT", "type": "field", "idx": 6514, "Desc": "constant for the alt virtual key ."}{"node_name": "VK_PAUSE", "type": "field", "idx": 6515, "Desc": "constant for the pause virtual key ."}{"node_name": "VK_CAPS_LOCK", "type": "field", "idx": 6516, "Desc": "constant for the caps_lock virtual key ."}{"node_name": "VK_ESCAPE", "type": "field", "idx": 6517, "Desc": "constant for the escape virtual key ."}{"node_name": "VK_SPACE", "type": "field", "idx": 6518, "Desc": "constant for the space virtual key ."}{"node_name": "VK_PAGE_UP", "type": "field", "idx": 6519, "Desc": "constant for the page_up virtual key ."}{"node_name": "VK_PAGE_DOWN", "type": "field", "idx": 6520, "Desc": "constant for the page_down virtual key ."}{"node_name": "VK_END", "type": "field", "idx": 6521, "Desc": "constant for the end virtual key ."}{"node_name": "VK_HOME", "type": "field", "idx": 6522, "Desc": "constant for the home virtual key ."}{"node_name": "VK_LEFT", "type": "field", "idx": 6523, "Desc": "constant for the non-numpad left arrow key ."}{"node_name": "VK_UP", "type": "field", "idx": 6524, "Desc": "constant for the non-numpad up arrow key ."}{"node_name": "VK_RIGHT", "type": "field", "idx": 6525, "Desc": "constant for the non-numpad right arrow key ."}{"node_name": "VK_DOWN", "type": "field", "idx": 6526, "Desc": "constant for the non-numpad down arrow key ."}{"node_name": "VK_COMMA", "type": "field", "idx": 6527, "Desc": "constant for the comma key , \" , \""}{"node_name": "VK_MINUS", "type": "field", "idx": 6528, "Desc": "constant for the minus key , \" - \""}{"node_name": "VK_PERIOD", "type": "field", "idx": 6529, "Desc": "constant for the period key , \" . \""}{"node_name": "VK_SLASH", "type": "field", "idx": 6530, "Desc": "constant for the forward slash key , \" / \""}{"node_name": "VK_0", "type": "field", "idx": 6531, "Desc": "constant for the \" 0 \" key ."}{"node_name": "VK_1", "type": "field", "idx": 6532, "Desc": "constant for the \" 1 \" key ."}{"node_name": "VK_2", "type": "field", "idx": 6533, "Desc": "constant for the \" 2 \" key ."}{"node_name": "VK_3", "type": "field", "idx": 6534, "Desc": "constant for the \" 3 \" key ."}{"node_name": "VK_4", "type": "field", "idx": 6535, "Desc": "constant for the \" 4 \" key ."}{"node_name": "VK_5", "type": "field", "idx": 6536, "Desc": "constant for the \" 5 \" key ."}{"node_name": "VK_6", "type": "field", "idx": 6537, "Desc": "constant for the \" 6 \" key ."}{"node_name": "VK_7", "type": "field", "idx": 6538, "Desc": "constant for the \" 7 \" key ."}{"node_name": "VK_8", "type": "field", "idx": 6539, "Desc": "constant for the \" 8 \" key ."}{"node_name": "VK_9", "type": "field", "idx": 6540, "Desc": "constant for the \" 9 \" key ."}{"node_name": "VK_SEMICOLON", "type": "field", "idx": 6541, "Desc": "constant for the semicolon key , \" ; \""}{"node_name": "VK_EQUALS", "type": "field", "idx": 6542, "Desc": "constant for the equals key , \" = \""}{"node_name": "VK_A", "type": "field", "idx": 6543, "Desc": "constant for the \" a \" key ."}{"node_name": "VK_B", "type": "field", "idx": 6544, "Desc": "constant for the \" b \" key ."}{"node_name": "VK_C", "type": "field", "idx": 6545, "Desc": "constant for the \" c \" key ."}{"node_name": "VK_D", "type": "field", "idx": 6546, "Desc": "constant for the \" d \" key ."}{"node_name": "VK_E", "type": "field", "idx": 6547, "Desc": "constant for the \" e \" key ."}{"node_name": "VK_F", "type": "field", "idx": 6548, "Desc": "constant for the \" f \" key ."}{"node_name": "VK_G", "type": "field", "idx": 6549, "Desc": "constant for the \" g \" key ."}{"node_name": "VK_H", "type": "field", "idx": 6550, "Desc": "constant for the \" h \" key ."}{"node_name": "VK_I", "type": "field", "idx": 6551, "Desc": "constant for the \" i \" key ."}{"node_name": "VK_J", "type": "field", "idx": 6552, "Desc": "constant for the \" j \" key ."}{"node_name": "VK_K", "type": "field", "idx": 6553, "Desc": "constant for the \" k \" key ."}{"node_name": "VK_L", "type": "field", "idx": 6554, "Desc": "constant for the \" l \" key ."}{"node_name": "VK_M", "type": "field", "idx": 6555, "Desc": "constant for the \" m \" key ."}{"node_name": "VK_N", "type": "field", "idx": 6556, "Desc": "constant for the \" n \" key ."}{"node_name": "VK_O", "type": "field", "idx": 6557, "Desc": "constant for the \" o \" key ."}{"node_name": "VK_P", "type": "field", "idx": 6558, "Desc": "constant for the \" p \" key ."}{"node_name": "VK_Q", "type": "field", "idx": 6559, "Desc": "constant for the \" q \" key ."}{"node_name": "VK_R", "type": "field", "idx": 6560, "Desc": "constant for the \" r \" key ."}{"node_name": "VK_S", "type": "field", "idx": 6561, "Desc": "constant for the \" s \" key ."}{"node_name": "VK_T", "type": "field", "idx": 6562, "Desc": "constant for the \" t \" key ."}{"node_name": "VK_U", "type": "field", "idx": 6563, "Desc": "constant for the \" u \" key ."}{"node_name": "VK_V", "type": "field", "idx": 6564, "Desc": "constant for the \" v \" key ."}{"node_name": "VK_W", "type": "field", "idx": 6565, "Desc": "constant for the \" w \" key ."}{"node_name": "VK_X", "type": "field", "idx": 6566, "Desc": "constant for the \" x \" key ."}{"node_name": "VK_Y", "type": "field", "idx": 6567, "Desc": "constant for the \" y \" key ."}{"node_name": "VK_Z", "type": "field", "idx": 6568, "Desc": "constant for the \" z \" key ."}{"node_name": "VK_OPEN_BRACKET", "type": "field", "idx": 6569, "Desc": "constant for the open bracket key , \" [ \""}{"node_name": "VK_BACK_SLASH", "type": "field", "idx": 6570, "Desc": "constant for the back slash key , \" \\ \""}{"node_name": "VK_CLOSE_BRACKET", "type": "field", "idx": 6571, "Desc": "constant for the close bracket key , \"]\""}{"node_name": "VK_NUMPAD0", "type": "field", "idx": 6572, "Desc": "constant for the number pad \" 0 \" key ."}{"node_name": "VK_NUMPAD1", "type": "field", "idx": 6573, "Desc": "constant for the number pad \" 1 \" key ."}{"node_name": "VK_NUMPAD2", "type": "field", "idx": 6574, "Desc": "constant for the number pad \" 2 \" key ."}{"node_name": "VK_NUMPAD3", "type": "field", "idx": 6575, "Desc": "constant for the number pad \" 3 \" key ."}{"node_name": "VK_NUMPAD4", "type": "field", "idx": 6576, "Desc": "constant for the number pad \" 4 \" key ."}{"node_name": "VK_NUMPAD5", "type": "field", "idx": 6577, "Desc": "constant for the number pad \" 5 \" key ."}{"node_name": "VK_NUMPAD6", "type": "field", "idx": 6578, "Desc": "constant for the number pad \" 6 \" key ."}{"node_name": "VK_NUMPAD7", "type": "field", "idx": 6579, "Desc": "constant for the number pad \" 7 \" key ."}{"node_name": "VK_NUMPAD8", "type": "field", "idx": 6580, "Desc": "constant for the number pad \" 8 \" key ."}{"node_name": "VK_NUMPAD9", "type": "field", "idx": 6581, "Desc": "constant for the number pad \" 9 \" key ."}{"node_name": "VK_MULTIPLY", "type": "field", "idx": 6582, "Desc": "constant for the number pad multiply key ."}{"node_name": "VK_ADD", "type": "field", "idx": 6583, "Desc": "constant for the number pad add key ."}{"node_name": "VK_SEPARATER", "type": "field", "idx": 6584, "Desc": "this constant is obsolete , and is included only for backwards compatibility ."}{"node_name": "VK_SEPARATOR", "type": "field", "idx": 6585, "Desc": "constant for the numpad separator key ."}{"node_name": "VK_SUBTRACT", "type": "field", "idx": 6586, "Desc": "constant for the number pad subtract key ."}{"node_name": "VK_DECIMAL", "type": "field", "idx": 6587, "Desc": "constant for the number pad decimal point key ."}{"node_name": "VK_DIVIDE", "type": "field", "idx": 6588, "Desc": "constant for the number pad divide key ."}{"node_name": "VK_DELETE", "type": "field", "idx": 6589, "Desc": "constant for the delete key ."}{"node_name": "VK_NUM_LOCK", "type": "field", "idx": 6590, "Desc": "constant for the num_lock key ."}{"node_name": "VK_SCROLL_LOCK", "type": "field", "idx": 6591, "Desc": "constant for the scroll_lock key ."}{"node_name": "VK_F1", "type": "field", "idx": 6592, "Desc": "constant for the f1 function key ."}{"node_name": "VK_F2", "type": "field", "idx": 6593, "Desc": "constant for the f2 function key ."}{"node_name": "VK_F3", "type": "field", "idx": 6594, "Desc": "constant for the f3 function key ."}{"node_name": "VK_F4", "type": "field", "idx": 6595, "Desc": "constant for the f4 function key ."}{"node_name": "VK_F5", "type": "field", "idx": 6596, "Desc": "constant for the f5 function key ."}{"node_name": "VK_F6", "type": "field", "idx": 6597, "Desc": "constant for the f6 function key ."}{"node_name": "VK_F7", "type": "field", "idx": 6598, "Desc": "constant for the f7 function key ."}{"node_name": "VK_F8", "type": "field", "idx": 6599, "Desc": "constant for the f8 function key ."}{"node_name": "VK_F9", "type": "field", "idx": 6600, "Desc": "constant for the f9 function key ."}{"node_name": "VK_F10", "type": "field", "idx": 6601, "Desc": "constant for the f10 function key ."}{"node_name": "VK_F11", "type": "field", "idx": 6602, "Desc": "constant for the f11 function key ."}{"node_name": "VK_F12", "type": "field", "idx": 6603, "Desc": "constant for the f12 function key ."}{"node_name": "VK_F13", "type": "field", "idx": 6604, "Desc": "constant for the f13 function key ."}{"node_name": "VK_F14", "type": "field", "idx": 6605, "Desc": "constant for the f14 function key ."}{"node_name": "VK_F15", "type": "field", "idx": 6606, "Desc": "constant for the f15 function key ."}{"node_name": "VK_F16", "type": "field", "idx": 6607, "Desc": "constant for the f16 function key ."}{"node_name": "VK_F17", "type": "field", "idx": 6608, "Desc": "constant for the f17 function key ."}{"node_name": "VK_F18", "type": "field", "idx": 6609, "Desc": "constant for the f18 function key ."}{"node_name": "VK_F19", "type": "field", "idx": 6610, "Desc": "constant for the f19 function key ."}{"node_name": "VK_F20", "type": "field", "idx": 6611, "Desc": "constant for the f20 function key ."}{"node_name": "VK_F21", "type": "field", "idx": 6612, "Desc": "constant for the f21 function key ."}{"node_name": "VK_F22", "type": "field", "idx": 6613, "Desc": "constant for the f22 function key ."}{"node_name": "VK_F23", "type": "field", "idx": 6614, "Desc": "constant for the f23 function key ."}{"node_name": "VK_F24", "type": "field", "idx": 6615, "Desc": "constant for the f24 function key ."}{"node_name": "VK_PRINTSCREEN", "type": "field", "idx": 6616, "Desc": "constant for the printscreen key ."}{"node_name": "VK_INSERT", "type": "field", "idx": 6617, "Desc": "constant for the insert key ."}{"node_name": "VK_HELP", "type": "field", "idx": 6618, "Desc": "constant for the help key ."}{"node_name": "VK_META", "type": "field", "idx": 6619, "Desc": "constant for the meta key ."}{"node_name": "VK_BACK_QUOTE", "type": "field", "idx": 6620, "Desc": "constant for the back_quote key ."}{"node_name": "VK_QUOTE", "type": "field", "idx": 6621, "Desc": "constant for the quote key ."}{"node_name": "VK_KP_UP", "type": "field", "idx": 6622, "Desc": "constant for the numeric keypad up arrow key ."}{"node_name": "VK_KP_DOWN", "type": "field", "idx": 6623, "Desc": "constant for the numeric keypad down arrow key ."}{"node_name": "VK_KP_LEFT", "type": "field", "idx": 6624, "Desc": "constant for the numeric keypad left arrow key ."}{"node_name": "VK_KP_RIGHT", "type": "field", "idx": 6625, "Desc": "constant for the numeric keypad right arrow key ."}{"node_name": "VK_DEAD_GRAVE", "type": "field", "idx": 6626, "Desc": ""}{"node_name": "VK_DEAD_ACUTE", "type": "field", "idx": 6627, "Desc": ""}{"node_name": "VK_DEAD_CIRCUMFLEX", "type": "field", "idx": 6628, "Desc": ""}{"node_name": "VK_DEAD_TILDE", "type": "field", "idx": 6629, "Desc": ""}{"node_name": "VK_DEAD_MACRON", "type": "field", "idx": 6630, "Desc": ""}{"node_name": "VK_DEAD_BREVE", "type": "field", "idx": 6631, "Desc": ""}{"node_name": "VK_DEAD_ABOVEDOT", "type": "field", "idx": 6632, "Desc": ""}{"node_name": "VK_DEAD_DIAERESIS", "type": "field", "idx": 6633, "Desc": ""}{"node_name": "VK_DEAD_ABOVERING", "type": "field", "idx": 6634, "Desc": ""}{"node_name": "VK_DEAD_DOUBLEACUTE", "type": "field", "idx": 6635, "Desc": ""}{"node_name": "VK_DEAD_CARON", "type": "field", "idx": 6636, "Desc": ""}{"node_name": "VK_DEAD_CEDILLA", "type": "field", "idx": 6637, "Desc": ""}{"node_name": "VK_DEAD_OGONEK", "type": "field", "idx": 6638, "Desc": ""}{"node_name": "VK_DEAD_IOTA", "type": "field", "idx": 6639, "Desc": ""}{"node_name": "VK_DEAD_VOICED_SOUND", "type": "field", "idx": 6640, "Desc": ""}{"node_name": "VK_DEAD_SEMIVOICED_SOUND", "type": "field", "idx": 6641, "Desc": ""}{"node_name": "VK_AMPERSAND", "type": "field", "idx": 6642, "Desc": ""}{"node_name": "VK_ASTERISK", "type": "field", "idx": 6643, "Desc": ""}{"node_name": "VK_QUOTEDBL", "type": "field", "idx": 6644, "Desc": ""}{"node_name": "VK_LESS", "type": "field", "idx": 6645, "Desc": ""}{"node_name": "VK_GREATER", "type": "field", "idx": 6646, "Desc": ""}{"node_name": "VK_BRACELEFT", "type": "field", "idx": 6647, "Desc": ""}{"node_name": "VK_BRACERIGHT", "type": "field", "idx": 6648, "Desc": ""}{"node_name": "VK_AT", "type": "field", "idx": 6649, "Desc": "constant for the \" @ \" key ."}{"node_name": "VK_COLON", "type": "field", "idx": 6650, "Desc": "constant for the \" : \" key ."}{"node_name": "VK_CIRCUMFLEX", "type": "field", "idx": 6651, "Desc": "constant for the \" ^ \" key ."}{"node_name": "VK_DOLLAR", "type": "field", "idx": 6652, "Desc": "constant for the \" $ \" key ."}{"node_name": "VK_EURO_SIGN", "type": "field", "idx": 6653, "Desc": "constant for the euro currency sign key ."}{"node_name": "VK_EXCLAMATION_MARK", "type": "field", "idx": 6654, "Desc": "constant for the \" ! \" key ."}{"node_name": "VK_INVERTED_EXCLAMATION_MARK", "type": "field", "idx": 6655, "Desc": "constant for the inverted exclamation mark key ."}{"node_name": "VK_LEFT_PARENTHESIS", "type": "field", "idx": 6656, "Desc": "constant for the \" ( \" key ."}{"node_name": "VK_NUMBER_SIGN", "type": "field", "idx": 6657, "Desc": "constant for the \" # \" key ."}{"node_name": "VK_PLUS", "type": "field", "idx": 6658, "Desc": "constant for the \" + \" key ."}{"node_name": "VK_RIGHT_PARENTHESIS", "type": "field", "idx": 6659, "Desc": "constant for the \")\" key ."}{"node_name": "VK_UNDERSCORE", "type": "field", "idx": 6660, "Desc": "constant for the \" _ \" key ."}{"node_name": "VK_WINDOWS", "type": "field", "idx": 6661, "Desc": "constant for the microsoft windows \" windows \" key . it is used for both the left and right version of the key ."}{"node_name": "VK_CONTEXT_MENU", "type": "field", "idx": 6662, "Desc": "constant for the microsoft windows context menu key ."}{"node_name": "VK_FINAL", "type": "field", "idx": 6663, "Desc": "constant for the final key ."}{"node_name": "VK_CONVERT", "type": "field", "idx": 6664, "Desc": "constant for the convert function key ."}{"node_name": "VK_NONCONVERT", "type": "field", "idx": 6665, "Desc": "constant for the don't convert function key ."}{"node_name": "VK_ACCEPT", "type": "field", "idx": 6666, "Desc": "constant for the accept or commit function key ."}{"node_name": "VK_MODECHANGE", "type": "field", "idx": 6667, "Desc": "constant for the modechange key ."}{"node_name": "VK_KANA", "type": "field", "idx": 6668, "Desc": "constant for the kana lock key ."}{"node_name": "VK_KANJI", "type": "field", "idx": 6669, "Desc": "constant for kanji ."}{"node_name": "VK_ALPHANUMERIC", "type": "field", "idx": 6670, "Desc": "constant for the alphanumeric function key ."}{"node_name": "VK_KATAKANA", "type": "field", "idx": 6671, "Desc": "constant for the katakana function key ."}{"node_name": "VK_HIRAGANA", "type": "field", "idx": 6672, "Desc": "constant for the hiragana function key ."}{"node_name": "VK_FULL_WIDTH", "type": "field", "idx": 6673, "Desc": "constant for the full-width characters function key ."}{"node_name": "VK_HALF_WIDTH", "type": "field", "idx": 6674, "Desc": "constant for the half-width characters function key ."}{"node_name": "VK_ROMAN_CHARACTERS", "type": "field", "idx": 6675, "Desc": "constant for the roman characters function key ."}{"node_name": "VK_ALL_CANDIDATES", "type": "field", "idx": 6676, "Desc": "constant for the all candidates function key ."}{"node_name": "VK_PREVIOUS_CANDIDATE", "type": "field", "idx": 6677, "Desc": "constant for the previous candidate function key ."}{"node_name": "VK_CODE_INPUT", "type": "field", "idx": 6678, "Desc": "constant for the code input function key ."}{"node_name": "VK_JAPANESE_KATAKANA", "type": "field", "idx": 6679, "Desc": "constant for the japanese-katakana function key . this key switches to a japanese input method and selects its katakana input mode ."}{"node_name": "VK_JAPANESE_HIRAGANA", "type": "field", "idx": 6680, "Desc": "constant for the japanese-hiragana function key . this key switches to a japanese input method and selects its hiragana input mode ."}{"node_name": "VK_JAPANESE_ROMAN", "type": "field", "idx": 6681, "Desc": "constant for the japanese-roman function key . this key switches to a japanese input method and selects its roman-direct input mode ."}{"node_name": "VK_KANA_LOCK", "type": "field", "idx": 6682, "Desc": "constant for the locking kana function key . this key locks the keyboard into a kana layout ."}{"node_name": "VK_INPUT_METHOD_ON_OFF", "type": "field", "idx": 6683, "Desc": "constant for the input method on / off key ."}{"node_name": "VK_CUT", "type": "field", "idx": 6684, "Desc": ""}{"node_name": "VK_COPY", "type": "field", "idx": 6685, "Desc": ""}{"node_name": "VK_PASTE", "type": "field", "idx": 6686, "Desc": ""}{"node_name": "VK_UNDO", "type": "field", "idx": 6687, "Desc": ""}{"node_name": "VK_AGAIN", "type": "field", "idx": 6688, "Desc": ""}{"node_name": "VK_FIND", "type": "field", "idx": 6689, "Desc": ""}{"node_name": "VK_PROPS", "type": "field", "idx": 6690, "Desc": ""}{"node_name": "VK_STOP", "type": "field", "idx": 6691, "Desc": ""}{"node_name": "VK_COMPOSE", "type": "field", "idx": 6692, "Desc": "constant for the compose function key ."}{"node_name": "VK_ALT_GRAPH", "type": "field", "idx": 6693, "Desc": "constant for the altgraph function key ."}{"node_name": "VK_BEGIN", "type": "field", "idx": 6694, "Desc": "constant for the begin key ."}{"node_name": "VK_UNDEFINED", "type": "field", "idx": 6695, "Desc": "this value is used to indicate that the keycode is unknown . key_typed events do not have a keycode value ; this value is used instead ."}{"node_name": "CHAR_UNDEFINED", "type": "field", "idx": 6696, "Desc": "key_pressed and key_released events which do not map to a valid unicode character use this for the keychar value ."}{"node_name": "KEY_LOCATION_UNKNOWN", "type": "field", "idx": 6697, "Desc": "a constant indicating that the keylocation is indeterminate or not relevant . key_typed events do not have a keylocation ; this value is used instead ."}{"node_name": "KEY_LOCATION_STANDARD", "type": "field", "idx": 6698, "Desc": "a constant indicating that the key pressed or released is not distinguished as the left or right version of a key , and did not originate on the numeric keypad ( or did not originate with a virtual key corresponding to the numeric keypad ) ."}{"node_name": "KEY_LOCATION_LEFT", "type": "field", "idx": 6699, "Desc": "a constant indicating that the key pressed or released is in the left key location ( there is more than one possible location for this key ) . example : the left shift key ."}{"node_name": "KEY_LOCATION_RIGHT", "type": "field", "idx": 6700, "Desc": "a constant indicating that the key pressed or released is in the right key location ( there is more than one possible location for this key ) . example : the right shift key ."}{"node_name": "KEY_LOCATION_NUMPAD", "type": "field", "idx": 6701, "Desc": "a constant indicating that the key event originated on the numeric keypad or with a virtual key corresponding to the numeric keypad ."}{"node_name": "MOUSE_FIRST", "type": "field", "idx": 6747, "Desc": "the first number in the range of ids used for mouse events ."}{"node_name": "MOUSE_LAST", "type": "field", "idx": 6748, "Desc": "the last number in the range of ids used for mouse events ."}{"node_name": "MOUSE_CLICKED", "type": "field", "idx": 6749, "Desc": "the \" mouse clicked \" event . this mouseevent occurs when a mouse button is pressed and released ."}{"node_name": "MOUSE_PRESSED", "type": "field", "idx": 6750, "Desc": "the \" mouse pressed \" event . this mouseevent occurs when a mouse button is pushed down ."}{"node_name": "MOUSE_RELEASED", "type": "field", "idx": 6751, "Desc": "the \" mouse released \" event . this mouseevent occurs when a mouse button is let up ."}{"node_name": "MOUSE_MOVED", "type": "field", "idx": 6752, "Desc": "the \" mouse moved \" event . this mouseevent occurs when the mouse position changes ."}{"node_name": "MOUSE_ENTERED", "type": "field", "idx": 6753, "Desc": "the \" mouse entered \" event . this mouseevent occurs when the mouse cursor enters the unobscured part of component's geometry ."}{"node_name": "MOUSE_EXITED", "type": "field", "idx": 6754, "Desc": "the \" mouse exited \" event . this mouseevent occurs when the mouse cursor exits the unobscured part of component's geometry ."}{"node_name": "MOUSE_DRAGGED", "type": "field", "idx": 6755, "Desc": "the \" mouse dragged \" event . this mouseevent occurs when the mouse position changes while a mouse button is pressed ."}{"node_name": "MOUSE_WHEEL", "type": "field", "idx": 6756, "Desc": "the \" mouse wheel \" event . this is the only mousewheelevent . it occurs when a mouse equipped with a wheel has its wheel rotated ."}{"node_name": "NOBUTTON", "type": "field", "idx": 6757, "Desc": "indicates no mouse buttons ; used by getbutton() ."}{"node_name": "BUTTON1", "type": "field", "idx": 6758, "Desc": "indicates mouse button #1 ; used by getbutton() ."}{"node_name": "BUTTON2", "type": "field", "idx": 6759, "Desc": "indicates mouse button #2 ; used by getbutton() ."}{"node_name": "BUTTON3", "type": "field", "idx": 6760, "Desc": "indicates mouse button #3 ; used by getbutton() ."}{"node_name": "WHEEL_UNIT_SCROLL", "type": "field", "idx": 6830, "Desc": "constant representing scrolling by \" units \" ( like scrolling with the arrow keys )"}{"node_name": "WHEEL_BLOCK_SCROLL", "type": "field", "idx": 6831, "Desc": "constant representing scrolling by a \" block \" ( like scrolling with page-up , page-down keys )"}{"node_name": "PAINT_FIRST", "type": "field", "idx": 6883, "Desc": "marks the first integer id for the range of paint event ids ."}{"node_name": "PAINT_LAST", "type": "field", "idx": 6884, "Desc": "marks the last integer id for the range of paint event ids ."}{"node_name": "PAINT", "type": "field", "idx": 6885, "Desc": "the paint event type ."}{"node_name": "UPDATE", "type": "field", "idx": 6886, "Desc": "the update event type ."}{"node_name": "TEXT_FIRST", "type": "field", "idx": 6895, "Desc": "the first number in the range of ids used for text events ."}{"node_name": "TEXT_LAST", "type": "field", "idx": 6896, "Desc": "the last number in the range of ids used for text events ."}{"node_name": "TEXT_VALUE_CHANGED", "type": "field", "idx": 6897, "Desc": "this event id indicates that object's text changed ."}{"node_name": "WINDOW_FIRST", "type": "field", "idx": 6928, "Desc": "the first number in the range of ids used for window events ."}{"node_name": "WINDOW_OPENED", "type": "field", "idx": 6929, "Desc": "the window opened event . this event is delivered only the first time a window is made visible ."}{"node_name": "WINDOW_CLOSING", "type": "field", "idx": 6930, "Desc": "the \" window is closing \" event . this event is delivered when the user attempts to close the window from the window's system menu . if the program does not explicitly hide or dispose the window while processing this event , the window close operation will be cancelled ."}{"node_name": "WINDOW_CLOSED", "type": "field", "idx": 6931, "Desc": "the window closed event . this event is delivered after the displayable window has been closed as the result of a call to dispose ."}{"node_name": "WINDOW_ICONIFIED", "type": "field", "idx": 6932, "Desc": "the window iconified event . this event is delivered when the window has been changed from a normal to a minimized state . for many platforms , a minimized window is displayed as the icon specified in the window's iconimage property ."}{"node_name": "WINDOW_DEICONIFIED", "type": "field", "idx": 6933, "Desc": "the window deiconified event type . this event is delivered when the window has been changed from a minimized to a normal state ."}{"node_name": "WINDOW_ACTIVATED", "type": "field", "idx": 6934, "Desc": "the window-activated event type . this event is delivered when the window becomes the active window . only a frame or a dialog can be the active window . the native windowing system may denote the active window or its children with special decorations , such as a highlighted title bar . the active window is always either the focused window , or the first frame or dialog that is an owner of the focused window ."}{"node_name": "WINDOW_DEACTIVATED", "type": "field", "idx": 6935, "Desc": "the window-deactivated event type . this event is delivered when the window is no longer the active window . only a frame or a dialog can be the active window . the native windowing system may denote the active window or its children with special decorations , such as a highlighted title bar . the active window is always either the focused window , or the first frame or dialog that is an owner of the focused window ."}{"node_name": "WINDOW_GAINED_FOCUS", "type": "field", "idx": 6936, "Desc": "the window-gained-focus event type . this event is delivered when the window becomes the focused window , which means that the window , or one of its subcomponents , will receive keyboard events ."}{"node_name": "WINDOW_LOST_FOCUS", "type": "field", "idx": 6937, "Desc": "the window-lost-focus event type . this event is delivered when a window is no longer the focused window , which means keyboard events will no longer be delivered to the window or any of its subcomponents ."}{"node_name": "WINDOW_STATE_CHANGED", "type": "field", "idx": 6938, "Desc": "the window-state-changed event type . this event is delivered when a window's state is changed by virtue of it being iconified , maximized etc ."}{"node_name": "WINDOW_LAST", "type": "field", "idx": 6939, "Desc": "the last number in the range of ids used for window events ."}{"node_name": "LOAD", "type": "field", "idx": 7008, "Desc": "this constant value indicates that the purpose of the file dialog window is to locate a file from which to read ."}{"node_name": "SAVE", "type": "field", "idx": 7009, "Desc": "this constant value indicates that the purpose of the file dialog window is to locate a file to which to write ."}{"node_name": "LEFT", "type": "field", "idx": 7049, "Desc": "this value indicates that each row of components should be left-justified ."}{"node_name": "CENTER", "type": "field", "idx": 7050, "Desc": "this value indicates that each row of components should be centered ."}{"node_name": "RIGHT", "type": "field", "idx": 7051, "Desc": "this value indicates that each row of components should be right-justified ."}{"node_name": "LEADING", "type": "field", "idx": 7052, "Desc": "this value indicates that each row of components should be justified to the leading edge of the container's orientation , for example , to the left in left-to-right orientations ."}{"node_name": "TRAILING", "type": "field", "idx": 7053, "Desc": "this value indicates that each row of components should be justified to the trailing edge of the container's orientation , for example , to the right in left-to-right orientations ."}{"node_name": "PRIORITY_KASHIDA", "type": "field", "idx": 7124, "Desc": "the highest justification priority ."}{"node_name": "PRIORITY_WHITESPACE", "type": "field", "idx": 7125, "Desc": "the second highest justification priority ."}{"node_name": "PRIORITY_INTERCHAR", "type": "field", "idx": 7126, "Desc": "the second lowest justification priority ."}{"node_name": "PRIORITY_NONE", "type": "field", "idx": 7127, "Desc": "the lowest justification priority ."}{"node_name": "weight", "type": "field", "idx": 7128, "Desc": "the weight of this glyph ."}{"node_name": "growPriority", "type": "field", "idx": 7129, "Desc": "the priority level of this glyph as it is growing ."}{"node_name": "growAbsorb", "type": "field", "idx": 7130, "Desc": "if true , this glyph absorbs all extra space at this and lower priority levels when it grows ."}{"node_name": "growLeftLimit", "type": "field", "idx": 7131, "Desc": "the maximum amount by which the left side of this glyph can grow ."}{"node_name": "growRightLimit", "type": "field", "idx": 7132, "Desc": "the maximum amount by which the right side of this glyph can grow ."}{"node_name": "shrinkPriority", "type": "field", "idx": 7133, "Desc": "the priority level of this glyph as it is shrinking ."}{"node_name": "shrinkAbsorb", "type": "field", "idx": 7134, "Desc": "if true , this glyph absorbs all remaining shrinkage at this and lower priority levels as it shrinks ."}{"node_name": "shrinkLeftLimit", "type": "field", "idx": 7135, "Desc": "the maximum amount by which the left side of this glyph can shrink ( a positive number ) ."}{"node_name": "shrinkRightLimit", "type": "field", "idx": 7136, "Desc": "the maximum amount by which the right side of this glyph can shrink ( a positive number ) ."}{"node_name": "STANDARD", "type": "field", "idx": 7148, "Desc": "indicates a glyph that represents a single standard character ."}{"node_name": "LIGATURE", "type": "field", "idx": 7149, "Desc": "indicates a glyph that represents multiple characters as a ligature , for example ' fi ' or ' ffi ' . it is followed by filler glyphs for the remaining characters . filler and combining glyphs can be intermixed to control positioning of accent marks on the logically preceding ligature ."}{"node_name": "COMBINING", "type": "field", "idx": 7150, "Desc": "indicates a glyph that represents a combining character , such as an umlaut . there is no caret position between this glyph and the preceding glyph ."}{"node_name": "COMPONENT", "type": "field", "idx": 7151, "Desc": "indicates a glyph with no corresponding character in the backing store . the glyph is associated with the character represented by the logically preceding non-component glyph . this is used for kashida justification or other visual modifications to existing glyphs . there is no caret position between this glyph and the preceding glyph ."}{"node_name": "WHITESPACE", "type": "field", "idx": 7152, "Desc": "indicates a glyph with no visual representation . it can be added to the other code values to indicate an invisible glyph ."}{"node_name": "FLAG_HAS_TRANSFORMS", "type": "field", "idx": 7176, "Desc": "a flag used with getlayoutflags that indicates that this glyphvector has per-glyph transforms ."}{"node_name": "FLAG_HAS_POSITION_ADJUSTMENTS", "type": "field", "idx": 7177, "Desc": "a flag used with getlayoutflags that indicates that this glyphvector has position adjustments . when this is true , the glyph positions don't match the accumulated default advances of the glyphs ( for example , if kerning has been done ) ."}{"node_name": "FLAG_RUN_RTL", "type": "field", "idx": 7178, "Desc": "a flag used with getlayoutflags that indicates that this glyphvector has a right-to-left run direction . this refers to the glyph-to-char mapping and does not imply that the visual locations of the glyphs are necessarily in this order , although generally they will be ."}{"node_name": "FLAG_COMPLEX_GLYPHS", "type": "field", "idx": 7179, "Desc": "a flag used with getlayoutflags that indicates that this glyphvector has a complex glyph-to-char mapping ( one that does not map glyphs to chars one-to-one in strictly ascending or descending order matching the run direction ) ."}{"node_name": "FLAG_MASK", "type": "field", "idx": 7180, "Desc": "a mask for supported flags from getlayoutflags . only bits covered by the mask should be tested ."}{"node_name": "TOP_ALIGNMENT", "type": "field", "idx": 7245, "Desc": "aligns top of graphic to top of line ."}{"node_name": "BOTTOM_ALIGNMENT", "type": "field", "idx": 7246, "Desc": "aligns bottom of graphic to bottom of line ."}{"node_name": "ROMAN_BASELINE", "type": "field", "idx": 7247, "Desc": "aligns origin of graphic to roman baseline of line ."}{"node_name": "CENTER_BASELINE", "type": "field", "idx": 7248, "Desc": "aligns origin of graphic to center baseline of line ."}{"node_name": "HANGING_BASELINE", "type": "field", "idx": 7249, "Desc": "aligns origin of graphic to hanging baseline of line ."}{"node_name": "DIALOG", "type": "field", "idx": 7283, "Desc": "a string constant for the canonical family name of the logical font \" dialog \" . it is useful in font construction to provide compile-time verification of the name ."}{"node_name": "DIALOG_INPUT", "type": "field", "idx": 7284, "Desc": "a string constant for the canonical family name of the logical font \" dialoginput \" . it is useful in font construction to provide compile-time verification of the name ."}{"node_name": "SANS_SERIF", "type": "field", "idx": 7285, "Desc": "a string constant for the canonical family name of the logical font \" sansserif \" . it is useful in font construction to provide compile-time verification of the name ."}{"node_name": "SERIF", "type": "field", "idx": 7286, "Desc": "a string constant for the canonical family name of the logical font \" serif \" . it is useful in font construction to provide compile-time verification of the name ."}{"node_name": "MONOSPACED", "type": "field", "idx": 7287, "Desc": "a string constant for the canonical family name of the logical font \" monospaced \" . it is useful in font construction to provide compile-time verification of the name ."}{"node_name": "PLAIN", "type": "field", "idx": 7288, "Desc": "the plain style constant ."}{"node_name": "BOLD", "type": "field", "idx": 7289, "Desc": "the bold style constant . this can be combined with the other style constants ( except plain ) for mixed styles ."}{"node_name": "ITALIC", "type": "field", "idx": 7290, "Desc": "the italicized style constant . this can be combined with the other style constants ( except plain ) for mixed styles ."}{"node_name": "ROMAN_BASELINE", "type": "field", "idx": 7291, "Desc": "the baseline used in most roman scripts when laying out text ."}{"node_name": "CENTER_BASELINE", "type": "field", "idx": 7292, "Desc": "the baseline used in ideographic scripts like chinese , japanese , and korean when laying out text ."}{"node_name": "HANGING_BASELINE", "type": "field", "idx": 7293, "Desc": "the baseline used in devanagari and similar scripts when laying out text ."}{"node_name": "TRUETYPE_FONT", "type": "field", "idx": 7294, "Desc": "identify a font resource of type truetype . used to specify a truetype font resource to the createfont ( int , java.io.inputstream ) method . the truetype format was extended to become the opentype format , which adds support for fonts with postscript outlines , this tag therefore references these fonts , as well as those with truetype outlines ."}{"node_name": "TYPE1_FONT", "type": "field", "idx": 7295, "Desc": "identify a font resource of type type1 . used to specify a type1 font resource to the createfont ( int , java.io.inputstream ) method ."}{"node_name": "name", "type": "field", "idx": 7296, "Desc": "the logical name of this font , as passed to the constructor ."}{"node_name": "style", "type": "field", "idx": 7297, "Desc": "the style of this font , as passed to the constructor . this style can be plain , bold , italic , or bold+italic ."}{"node_name": "size", "type": "field", "idx": 7298, "Desc": "the point size of this font , rounded to integer ."}{"node_name": "pointSize", "type": "field", "idx": 7299, "Desc": "the point size of this font in float ."}{"node_name": "LAYOUT_LEFT_TO_RIGHT", "type": "field", "idx": 7300, "Desc": "a flag to layoutglyphvector indicating that text is left-to-right as determined by bidi analysis ."}{"node_name": "LAYOUT_RIGHT_TO_LEFT", "type": "field", "idx": 7301, "Desc": "a flag to layoutglyphvector indicating that text is right-to-left as determined by bidi analysis ."}{"node_name": "LAYOUT_NO_START_CONTEXT", "type": "field", "idx": 7302, "Desc": "a flag to layoutglyphvector indicating that text in the char array before the indicated start should not be examined ."}{"node_name": "LAYOUT_NO_LIMIT_CONTEXT", "type": "field", "idx": 7303, "Desc": "a flag to layoutglyphvector indicating that text in the char array after the indicated limit should not be examined ."}{"node_name": "EUROPEAN", "type": "field", "idx": 7513, "Desc": "identifies the latin-1 ( european ) and extended range , and latin-1 ( european ) decimal base ."}{"node_name": "ARABIC", "type": "field", "idx": 7514, "Desc": "identifies the arabic range and decimal base ."}{"node_name": "EASTERN_ARABIC", "type": "field", "idx": 7515, "Desc": "identifies the arabic range and arabic_extended decimal base ."}{"node_name": "DEVANAGARI", "type": "field", "idx": 7516, "Desc": "identifies the devanagari range and decimal base ."}{"node_name": "BENGALI", "type": "field", "idx": 7517, "Desc": "identifies the bengali range and decimal base ."}{"node_name": "GURMUKHI", "type": "field", "idx": 7518, "Desc": "identifies the gurmukhi range and decimal base ."}{"node_name": "GUJARATI", "type": "field", "idx": 7519, "Desc": "identifies the gujarati range and decimal base ."}{"node_name": "ORIYA", "type": "field", "idx": 7520, "Desc": "identifies the oriya range and decimal base ."}{"node_name": "TAMIL", "type": "field", "idx": 7521, "Desc": "identifies the tamil range and decimal base ."}{"node_name": "TELUGU", "type": "field", "idx": 7522, "Desc": "identifies the telugu range and decimal base ."}{"node_name": "KANNADA", "type": "field", "idx": 7523, "Desc": "identifies the kannada range and decimal base ."}{"node_name": "MALAYALAM", "type": "field", "idx": 7524, "Desc": "identifies the malayalam range and decimal base ."}{"node_name": "THAI", "type": "field", "idx": 7525, "Desc": "identifies the thai range and decimal base ."}{"node_name": "LAO", "type": "field", "idx": 7526, "Desc": "identifies the lao range and decimal base ."}{"node_name": "TIBETAN", "type": "field", "idx": 7527, "Desc": "identifies the tibetan range and decimal base ."}{"node_name": "MYANMAR", "type": "field", "idx": 7528, "Desc": "identifies the myanmar range and decimal base ."}{"node_name": "ETHIOPIC", "type": "field", "idx": 7529, "Desc": "identifies the ethiopic range and decimal base ."}{"node_name": "KHMER", "type": "field", "idx": 7530, "Desc": "identifies the khmer range and decimal base ."}{"node_name": "MONGOLIAN", "type": "field", "idx": 7531, "Desc": "identifies the mongolian range and decimal base ."}{"node_name": "ALL_RANGES", "type": "field", "idx": 7532, "Desc": "identifies all ranges , for full contextual shaping . this constant specifies all of the bit mask-based ranges . use enumset.allof ( numericshaper.range.class ) to specify all of the enum-based ranges ."}{"node_name": "TAG_CMAP", "type": "field", "idx": 7573, "Desc": "character to glyph mapping . table tag \" cmap \" in the open type specification ."}{"node_name": "TAG_HEAD", "type": "field", "idx": 7574, "Desc": "font header . table tag \" head \" in the open type specification ."}{"node_name": "TAG_NAME", "type": "field", "idx": 7575, "Desc": "naming table . table tag \" name \" in the open type specification ."}{"node_name": "TAG_GLYF", "type": "field", "idx": 7576, "Desc": "glyph data . table tag \" glyf \" in the open type specification ."}{"node_name": "TAG_MAXP", "type": "field", "idx": 7577, "Desc": "maximum profile . table tag \" maxp \" in the open type specification ."}{"node_name": "TAG_PREP", "type": "field", "idx": 7578, "Desc": "cvt preprogram . table tag \" prep \" in the open type specification ."}{"node_name": "TAG_HMTX", "type": "field", "idx": 7579, "Desc": "horizontal metrics . table tag \" hmtx \" in the open type specification ."}{"node_name": "TAG_KERN", "type": "field", "idx": 7580, "Desc": "kerning . table tag \" kern \" in the open type specification ."}{"node_name": "TAG_HDMX", "type": "field", "idx": 7581, "Desc": "horizontal device metrics . table tag \" hdmx \" in the open type specification ."}{"node_name": "TAG_LOCA", "type": "field", "idx": 7582, "Desc": "index to location . table tag \" loca \" in the open type specification ."}{"node_name": "TAG_POST", "type": "field", "idx": 7583, "Desc": "postscript information . table tag \" post \" in the open type specification ."}{"node_name": "TAG_OS2", "type": "field", "idx": 7584, "Desc": "os / 2 and windows specific metrics . table tag \" os / 2 \" in the open type specification ."}{"node_name": "TAG_CVT", "type": "field", "idx": 7585, "Desc": "control value table . table tag \" cvt \" in the open type specification ."}{"node_name": "TAG_GASP", "type": "field", "idx": 7586, "Desc": "grid-fitting and scan conversion procedure . table tag \" gasp \" in the open type specification ."}{"node_name": "TAG_VDMX", "type": "field", "idx": 7587, "Desc": "vertical device metrics . table tag \" vdmx \" in the open type specification ."}{"node_name": "TAG_VMTX", "type": "field", "idx": 7588, "Desc": "vertical metrics . table tag \" vmtx \" in the open type specification ."}{"node_name": "TAG_VHEA", "type": "field", "idx": 7589, "Desc": "vertical metrics header . table tag \" vhea \" in the open type specification ."}{"node_name": "TAG_HHEA", "type": "field", "idx": 7590, "Desc": "horizontal metrics header . table tag \" hhea \" in the open type specification ."}{"node_name": "TAG_TYP1", "type": "field", "idx": 7591, "Desc": "adobe type 1 font data . table tag \" typ1 \" in the open type specification ."}{"node_name": "TAG_BSLN", "type": "field", "idx": 7592, "Desc": "baseline table . table tag \" bsln \" in the open type specification ."}{"node_name": "TAG_GSUB", "type": "field", "idx": 7593, "Desc": "glyph substitution . table tag \" gsub \" in the open type specification ."}{"node_name": "TAG_DSIG", "type": "field", "idx": 7594, "Desc": "digital signature . table tag \" dsig \" in the open type specification ."}{"node_name": "TAG_FPGM", "type": "field", "idx": 7595, "Desc": "font program . table tag \" fpgm \" in the open type specification ."}{"node_name": "TAG_FVAR", "type": "field", "idx": 7596, "Desc": "font variation . table tag \" fvar \" in the open type specification ."}{"node_name": "TAG_GVAR", "type": "field", "idx": 7597, "Desc": "glyph variation . table tag \" gvar \" in the open type specification ."}{"node_name": "TAG_CFF", "type": "field", "idx": 7598, "Desc": "compact font format ( type1 font ) . table tag \" cff \" in the open type specification ."}{"node_name": "TAG_MMSD", "type": "field", "idx": 7599, "Desc": "multiple master supplementary data . table tag \" mmsd \" in the open type specification ."}{"node_name": "TAG_MMFX", "type": "field", "idx": 7600, "Desc": "multiple master font metrics . table tag \" mmfx \" in the open type specification ."}{"node_name": "TAG_BASE", "type": "field", "idx": 7601, "Desc": "baseline data . table tag \" base \" in the open type specification ."}{"node_name": "TAG_GDEF", "type": "field", "idx": 7602, "Desc": "glyph definition . table tag \" gdef \" in the open type specification ."}{"node_name": "TAG_GPOS", "type": "field", "idx": 7603, "Desc": "glyph positioning . table tag \" gpos \" in the open type specification ."}{"node_name": "TAG_JSTF", "type": "field", "idx": 7604, "Desc": "justification . table tag \" jstf \" in the open type specification ."}{"node_name": "TAG_EBDT", "type": "field", "idx": 7605, "Desc": "embedded bitmap data . table tag \" ebdt \" in the open type specification ."}{"node_name": "TAG_EBLC", "type": "field", "idx": 7606, "Desc": "embedded bitmap location . table tag \" eblc \" in the open type specification ."}{"node_name": "TAG_EBSC", "type": "field", "idx": 7607, "Desc": "embedded bitmap scaling . table tag \" ebsc \" in the open type specification ."}{"node_name": "TAG_LTSH", "type": "field", "idx": 7608, "Desc": "linear threshold . table tag \" ltsh \" in the open type specification ."}{"node_name": "TAG_PCLT", "type": "field", "idx": 7609, "Desc": "pcl 5 data . table tag \" pclt \" in the open type specification ."}{"node_name": "TAG_ACNT", "type": "field", "idx": 7610, "Desc": "accent attachment . table tag \" acnt \" in the open type specification ."}{"node_name": "TAG_AVAR", "type": "field", "idx": 7611, "Desc": "axis variation . table tag \" avar \" in the open type specification ."}{"node_name": "TAG_BDAT", "type": "field", "idx": 7612, "Desc": "bitmap data . table tag \" bdat \" in the open type specification ."}{"node_name": "TAG_BLOC", "type": "field", "idx": 7613, "Desc": "bitmap location . table tag \" bloc \" in the open type specification ."}{"node_name": "TAG_CVAR", "type": "field", "idx": 7614, "Desc": "cvt variation . table tag \" cvar \" in the open type specification ."}{"node_name": "TAG_FEAT", "type": "field", "idx": 7615, "Desc": "feature name . table tag \" feat \" in the open type specification ."}{"node_name": "TAG_FDSC", "type": "field", "idx": 7616, "Desc": "font descriptors . table tag \" fdsc \" in the open type specification ."}{"node_name": "TAG_FMTX", "type": "field", "idx": 7617, "Desc": "font metrics . table tag \" fmtx \" in the open type specification ."}{"node_name": "TAG_JUST", "type": "field", "idx": 7618, "Desc": "justification . table tag \" just \" in the open type specification ."}{"node_name": "TAG_LCAR", "type": "field", "idx": 7619, "Desc": "ligature caret . table tag \" lcar \" in the open type specification ."}{"node_name": "TAG_MORT", "type": "field", "idx": 7620, "Desc": "glyph metamorphosis . table tag \" mort \" in the open type specification ."}{"node_name": "TAG_OPBD", "type": "field", "idx": 7621, "Desc": "optical bounds . table tag \" opbd \" in the open type specification ."}{"node_name": "TAG_PROP", "type": "field", "idx": 7622, "Desc": "glyph properties . table tag \" prop \" in the open type specification ."}{"node_name": "TAG_TRAK", "type": "field", "idx": 7623, "Desc": "tracking . table tag \" trak \" in the open type specification ."}{"node_name": "STROKE", "type": "field", "idx": 7642, "Desc": "a key indicating the shape should be stroked with a 1-pixel wide stroke ."}{"node_name": "FILL", "type": "field", "idx": 7643, "Desc": "a key indicating the shape should be filled ."}{"node_name": "FAMILY", "type": "field", "idx": 7660, "Desc": "attribute key for the font name . values are instances of string . the default value is \" default \" , which causes the platform default font family to be used . the font class defines constants for the logical font names dialog , dialog_input , sans_serif , serif , and monospaced . this defines the value passed as name to the font constructor . both logical and physical font names are allowed . if a font with the requested name is not found , the default font is used . note : this attribute is unfortunately misnamed , as it specifies the face name and not just the family . thus values such as \" lucida sans bold \" will select that face if it exists . note , though , that if the requested face does not exist , the default will be used with regular weight . the \" bold \" in the name is part of the face name , not a separate request that the font's weight be bold ."}{"node_name": "WEIGHT", "type": "field", "idx": 7661, "Desc": "attribute key for the weight of a font . values are instances of number . the default value is weight_regular . several constant values are provided , see weight_extra_light , weight_light , weight_demilight , weight_regular , weight_semibold , weight_medium , weight_demibold , weight_bold , weight_heavy , weight_extrabold , and weight_ultrabold . the value weight_bold corresponds to the style value font.bold as passed to the font constructor . the value is roughly the ratio of the stem width to that of the regular weight . the system can interpolate the provided value ."}{"node_name": "WEIGHT_EXTRA_LIGHT", "type": "field", "idx": 7662, "Desc": "the lightest predefined weight ."}{"node_name": "WEIGHT_LIGHT", "type": "field", "idx": 7663, "Desc": "the standard light weight ."}{"node_name": "WEIGHT_DEMILIGHT", "type": "field", "idx": 7664, "Desc": "an intermediate weight between weight_light and weight_standard ."}{"node_name": "WEIGHT_REGULAR", "type": "field", "idx": 7665, "Desc": "the standard weight . this is the default value for weight ."}{"node_name": "WEIGHT_SEMIBOLD", "type": "field", "idx": 7666, "Desc": "a moderately heavier weight than weight_regular ."}{"node_name": "WEIGHT_MEDIUM", "type": "field", "idx": 7667, "Desc": "an intermediate weight between weight_regular and weight_bold ."}{"node_name": "WEIGHT_DEMIBOLD", "type": "field", "idx": 7668, "Desc": "a moderately lighter weight than weight_bold ."}{"node_name": "WEIGHT_BOLD", "type": "field", "idx": 7669, "Desc": "the standard bold weight ."}{"node_name": "WEIGHT_HEAVY", "type": "field", "idx": 7670, "Desc": "a moderately heavier weight than weight_bold ."}{"node_name": "WEIGHT_EXTRABOLD", "type": "field", "idx": 7671, "Desc": "an extra heavy weight ."}{"node_name": "WEIGHT_ULTRABOLD", "type": "field", "idx": 7672, "Desc": "the heaviest predefined weight ."}{"node_name": "WIDTH", "type": "field", "idx": 7673, "Desc": "attribute key for the width of a font . values are instances of number . the default value is width_regular . several constant values are provided , see width_condensed , width_semi_condensed , width_regular , width_semi_extended , width_extended . the value is roughly the ratio of the advance width to that of the regular width . the system can interpolate the provided value ."}{"node_name": "WIDTH_CONDENSED", "type": "field", "idx": 7674, "Desc": "the most condensed predefined width ."}{"node_name": "WIDTH_SEMI_CONDENSED", "type": "field", "idx": 7675, "Desc": "a moderately condensed width ."}{"node_name": "WIDTH_REGULAR", "type": "field", "idx": 7676, "Desc": "the standard width . this is the default value for width ."}{"node_name": "WIDTH_SEMI_EXTENDED", "type": "field", "idx": 7677, "Desc": "a moderately extended width ."}{"node_name": "WIDTH_EXTENDED", "type": "field", "idx": 7678, "Desc": "the most extended predefined width ."}{"node_name": "POSTURE", "type": "field", "idx": 7679, "Desc": "attribute key for the posture of a font . values are instances of number . the default value is posture_regular . two constant values are provided , posture_regular and posture_oblique . the value posture_oblique corresponds to the style value font.italic as passed to the font constructor . the value is roughly the slope of the stems of the font , expressed as the run over the rise . positive values lean right . the system can interpolate the provided value . this will affect the font's italic angle as returned by font.getitalicangle ."}{"node_name": "POSTURE_REGULAR", "type": "field", "idx": 7680, "Desc": "the standard posture , upright . this is the default value for posture ."}{"node_name": "POSTURE_OBLIQUE", "type": "field", "idx": 7681, "Desc": "the standard italic posture ."}{"node_name": "SIZE", "type": "field", "idx": 7682, "Desc": "attribute key for the font size . values are instances of number . the default value is 12pt . this corresponds to the size parameter to the font constructor . very large or small sizes will impact rendering performance , and the rendering system might not render text at these sizes . negative sizes are illegal and result in the default size . note that the appearance and metrics of a 12pt font with a 2x transform might be different than that of a 24 point font with no transform ."}{"node_name": "TRANSFORM", "type": "field", "idx": 7683, "Desc": "attribute key for the transform of a font . values are instances of transformattribute . the default value is transformattribute.identity . the transformattribute class defines the constant identity . this corresponds to the transform passed to font.derivefont ( affinetransform ) . since that transform is mutable and textattribute values must not be , the transformattribute wrapper class is used . the primary intent is to support scaling and skewing , though other effects are possible . some transforms will cause the baseline to be rotated and / or shifted . the text and the baseline are transformed together so that the text follows the new baseline . for example , with text on a horizontal baseline , the new baseline follows the direction of the unit x vector passed through the transform . text metrics are measured against this new baseline . so , for example , with other things being equal , text rendered with a rotated transform and an unrotated transform will measure as having the same ascent , descent , and advance . in styled text , the baselines for each such run are aligned one after the other to potentially create a non-linear baseline for the entire run of text . for more information , see textlayout.getlayoutpath() ."}{"node_name": "SUPERSCRIPT", "type": "field", "idx": 7684, "Desc": "attribute key for superscripting and subscripting . values are instances of integer . the default value is 0 , which means that no superscript or subscript is used . two constant values are provided , see superscript_super and superscript_sub . these have the values 1 and -1 respectively . values of greater magnitude define greater levels of superscript or subscripting , for example , 2 corresponds to super-superscript , 3 to super-super-superscript , and similarly for negative values and subscript , up to a level of 7 ( or -7 ) . values beyond this range are reserved ; behavior is platform-dependent . superscript can impact the ascent and descent of a font . the ascent and descent can never become negative , however ."}{"node_name": "SUPERSCRIPT_SUPER", "type": "field", "idx": 7685, "Desc": "standard superscript ."}{"node_name": "SUPERSCRIPT_SUB", "type": "field", "idx": 7686, "Desc": "standard subscript ."}{"node_name": "FONT", "type": "field", "idx": 7687, "Desc": "attribute key used to provide the font to use to render text . values are instances of font . the default value is null , indicating that normal resolution of a font from attributes should be performed . textlayout and attributedcharacteriterator work in terms of maps of textattributes . normally , all the attributes are examined and used to select and configure a font instance . if a font attribute is present , though , its associated font will be used . this provides a way for users to override the resolution of font attributes into a font , or force use of a particular font instance . this also allows users to specify subclasses of font in cases where a font can be subclassed . font is used for special situations where clients already have a font instance but still need to use map-based apis . typically , there will be no other attributes in the map except the font attribute . with map-based apis the common case is to specify all attributes individually , so font is not needed or desirable . however , if both font and other attributes are present in the map , the rendering system will merge the attributes defined in the font with the additional attributes . this merging process classifies textattributes into two groups . one group , the ' primary ' group , is considered fundamental to the selection and metric behavior of a font . these attributes are family , weight , width , posture , size , transform , superscript , and tracking . the other group , the ' secondary ' group , consists of all other defined attributes , with the exception of font itself . to generate the new map , first the font is obtained from the font attribute , and all of its attributes extracted into a new map . then only the secondary attributes from the original map are added to those in the new map . thus the values of primary attributes come solely from the font , and the values of secondary attributes originate with the font but can be overridden by other values in the map . note : font's map-based constructor and derivefont methods do not process the font attribute , as these are used to create new font objects . instead , font.getfont ( map ) should be used to handle the font attribute ."}{"node_name": "CHAR_REPLACEMENT", "type": "field", "idx": 7688, "Desc": "attribute key for a user-defined glyph to display in lieu of the font's standard glyph for a character . values are instances of graphicattribute . the default value is null , indicating that the standard glyphs provided by the font should be used . this attribute is used to reserve space for a graphic or other component embedded in a line of text . it is required for correct positioning of ' inline ' components within a line when bidirectional reordering ( see bidi ) is performed . each character ( unicode code point ) will be rendered using the provided graphicattribute . typically , the characters to which this attribute is applied should be \\ufffc . the graphicattribute determines the logical and visual bounds of the text ; the actual font values are ignored ."}{"node_name": "FOREGROUND", "type": "field", "idx": 7689, "Desc": "attribute key for the paint used to render the text . values are instances of paint . the default value is null , indicating that the paint set on the graphics2d at the time of rendering is used . glyphs will be rendered using this paint regardless of the paint value set on the graphics ( but see swap_colors ) ."}{"node_name": "BACKGROUND", "type": "field", "idx": 7690, "Desc": "attribute key for the paint used to render the background of the text . values are instances of paint . the default value is null , indicating that the background should not be rendered . the logical bounds of the text will be filled using this paint , and then the text will be rendered on top of it ( but see swap_colors ) . the visual bounds of the text is extended to include the logical bounds , if necessary . the outline is not affected ."}{"node_name": "UNDERLINE", "type": "field", "idx": 7691, "Desc": "attribute key for underline . values are instances of integer . the default value is -1 , which means no underline . the constant value underline_on is provided . the underline affects both the visual bounds and the outline of the text ."}{"node_name": "UNDERLINE_ON", "type": "field", "idx": 7692, "Desc": "standard underline ."}{"node_name": "STRIKETHROUGH", "type": "field", "idx": 7693, "Desc": "attribute key for strikethrough . values are instances of boolean . the default value is false , which means no strikethrough . the constant value strikethrough_on is provided . the strikethrough affects both the visual bounds and the outline of the text ."}{"node_name": "STRIKETHROUGH_ON", "type": "field", "idx": 7694, "Desc": "a single strikethrough ."}{"node_name": "RUN_DIRECTION", "type": "field", "idx": 7695, "Desc": "attribute key for the run direction of the line . values are instances of boolean . the default value is null , which indicates that the standard bidi algorithm for determining run direction should be used with the value bidi.direction_default_left_to_right . the constants run_direction_rtl and run_direction_ltr are provided . this determines the value passed to the bidi constructor to select the primary direction of the text in the paragraph . note : this attribute should have the same value for all the text in a paragraph , otherwise the behavior is undetermined ."}{"node_name": "RUN_DIRECTION_LTR", "type": "field", "idx": 7696, "Desc": "left-to-right run direction ."}{"node_name": "RUN_DIRECTION_RTL", "type": "field", "idx": 7697, "Desc": "right-to-left run direction ."}{"node_name": "BIDI_EMBEDDING", "type": "field", "idx": 7698, "Desc": "attribute key for the embedding level of the text . values are instances of integer . the default value is null , indicating that the bidirectional algorithm should run without explicit embeddings . positive values 1 through 61 are embedding levels , negative values -1 through -61 are override levels . the value 0 means that the base line direction is used . these levels are passed in the embedding levels array to the bidi constructor . note : when this attribute is present anywhere in a paragraph , then any unicode bidi control characters ( rlo , lro , rle , lre , and pdf ) in the paragraph are disregarded , and runs of text where this attribute is not present are treated as though it were present and had the value 0 ."}{"node_name": "JUSTIFICATION", "type": "field", "idx": 7699, "Desc": "attribute key for the justification of a paragraph . values are instances of number . the default value is 1 , indicating that justification should use the full width provided . values are pinned to the range [ 0 .. 1 ] . the constants justification_full and justification_none are provided . specifies the fraction of the extra space to use when justification is requested on a textlayout . for example , if the line is 50 points wide and it is requested to justify to 70 points , a value of 0.75 will pad to use three-quarters of the remaining space , or 15 points , so that the resulting line will be 65 points in length . note : this should have the same value for all the text in a paragraph , otherwise the behavior is undetermined ."}{"node_name": "JUSTIFICATION_FULL", "type": "field", "idx": 7700, "Desc": "justify the line to the full requested width . this is the default value for justification ."}{"node_name": "JUSTIFICATION_NONE", "type": "field", "idx": 7701, "Desc": "do not allow the line to be justified ."}{"node_name": "INPUT_METHOD_HIGHLIGHT", "type": "field", "idx": 7702, "Desc": "attribute key for input method highlight styles . values are instances of inputmethodhighlight or annotation . the default value is null , which means that input method styles should not be applied before rendering . if adjacent runs of text with the same inputmethodhighlight need to be rendered separately , the inputmethodhighlights should be wrapped in annotation instances . input method highlights are used while text is being composed by an input method . text editing components should retain them even if they generally only deal with unstyled text , and make them available to the drawing routines ."}{"node_name": "INPUT_METHOD_UNDERLINE", "type": "field", "idx": 7703, "Desc": "attribute key for input method underlines . values are instances of integer . the default value is -1 , which means no underline . several constant values are provided , see underline_low_one_pixel , underline_low_two_pixel , underline_low_dotted , underline_low_gray , and underline_low_dashed . this may be used in conjunction with underline if desired . the primary purpose is for use by input methods . other use of these underlines for simple ornamentation might confuse users . the input method underline affects both the visual bounds and the outline of the text ."}{"node_name": "UNDERLINE_LOW_ONE_PIXEL", "type": "field", "idx": 7704, "Desc": "single pixel solid low underline ."}{"node_name": "UNDERLINE_LOW_TWO_PIXEL", "type": "field", "idx": 7705, "Desc": "double pixel solid low underline ."}{"node_name": "UNDERLINE_LOW_DOTTED", "type": "field", "idx": 7706, "Desc": "single pixel dotted low underline ."}{"node_name": "UNDERLINE_LOW_GRAY", "type": "field", "idx": 7707, "Desc": "double pixel gray low underline ."}{"node_name": "UNDERLINE_LOW_DASHED", "type": "field", "idx": 7708, "Desc": "single pixel dashed low underline ."}{"node_name": "SWAP_COLORS", "type": "field", "idx": 7709, "Desc": "attribute key for swapping foreground and background paints . values are instances of boolean . the default value is false , which means do not swap colors . the constant value swap_colors_on is defined . if the foreground attribute is set , its paint will be used as the background , otherwise the paint currently on the graphics will be used . if the background attribute is set , its paint will be used as the foreground , otherwise the system will find a contrasting color to the ( resolved ) background so that the text will be visible ."}{"node_name": "SWAP_COLORS_ON", "type": "field", "idx": 7710, "Desc": "swap foreground and background ."}{"node_name": "NUMERIC_SHAPING", "type": "field", "idx": 7711, "Desc": "attribute key for converting ascii decimal digits to other decimal ranges . values are instances of numericshaper . the default is null , which means do not perform numeric shaping . when a numeric shaper is defined , the text is first processed by the shaper before any other analysis of the text is performed . note : this should have the same value for all the text in the paragraph , otherwise the behavior is undetermined ."}{"node_name": "KERNING", "type": "field", "idx": 7712, "Desc": "attribute key to request kerning . values are instances of integer . the default value is 0 , which does not request kerning . the constant value kerning_on is provided . the default advances of single characters are not appropriate for some character sequences , for example \" to \" or \" away \" . without kerning the adjacent characters appear to be separated by too much space . kerning causes selected sequences of characters to be spaced differently for a more pleasing visual appearance ."}{"node_name": "KERNING_ON", "type": "field", "idx": 7713, "Desc": "request standard kerning ."}{"node_name": "LIGATURES", "type": "field", "idx": 7714, "Desc": "attribute key for enabling optional ligatures . values are instances of integer . the default value is 0 , which means do not use optional ligatures . the constant value ligatures_on is defined . ligatures required by the writing system are always enabled ."}{"node_name": "LIGATURES_ON", "type": "field", "idx": 7715, "Desc": "request standard optional ligatures ."}{"node_name": "TRACKING", "type": "field", "idx": 7716, "Desc": "attribute key to control tracking . values are instances of number . the default value is 0 , which means no additional tracking . the constant values tracking_tight and tracking_loose are provided . the tracking value is multiplied by the font point size and passed through the font transform to determine an additional amount to add to the advance of each glyph cluster . positive tracking values will inhibit formation of optional ligatures . tracking values are typically between - 0.1 and 0.3 ; values outside this range are generally not desirable ."}{"node_name": "TRACKING_TIGHT", "type": "field", "idx": 7717, "Desc": "perform tight tracking ."}{"node_name": "TRACKING_LOOSE", "type": "field", "idx": 7718, "Desc": "perform loose tracking ."}{"node_name": "DEFAULT_CARET_POLICY", "type": "field", "idx": 7750, "Desc": "this caretpolicy is used when a policy is not specified by the client . with this policy , a hit on a character whose direction is the same as the line direction is stronger than a hit on a counterdirectional character . if the characters ' directions are the same , a hit on the leading edge of a character is stronger than a hit on the trailing edge of a character ."}{"node_name": "IDENTITY", "type": "field", "idx": 7879, "Desc": "a transformattribute representing the identity transform ."}{"node_name": "font", "type": "field", "idx": 7891, "Desc": "the actual font from which the font metrics are created . this cannot be null ."}{"node_name": "NORMAL", "type": "field", "idx": 7963, "Desc": "frame is in the \" normal \" state . this symbolic constant names a frame state with all state bits cleared ."}{"node_name": "ICONIFIED", "type": "field", "idx": 7964, "Desc": "this state bit indicates that frame is iconified ."}{"node_name": "MAXIMIZED_HORIZ", "type": "field", "idx": 7965, "Desc": "this state bit indicates that frame is maximized in the horizontal direction ."}{"node_name": "MAXIMIZED_VERT", "type": "field", "idx": 7966, "Desc": "this state bit indicates that frame is maximized in the vertical direction ."}{"node_name": "MAXIMIZED_BOTH", "type": "field", "idx": 7967, "Desc": "this state bit mask indicates that frame is fully maximized ( that is both horizontally and vertically ) . it is just a convenience alias for maximized_vert | maximized_horiz . note that the correct test for frame being fully maximized is ( state & frame.maximized_both ) == frame.maximized_both to test is frame is maximized in some direction use ( state & frame.maximized_both ) ! = 0"}{"node_name": "TYPE_IDENTITY", "type": "field", "idx": 8006, "Desc": "this constant indicates that the transform defined by this object is an identity transform . an identity transform is one in which the output coordinates are always the same as the input coordinates . if this transform is anything other than the identity transform , the type will either be the constant general_transform or a combination of the appropriate flag bits for the various coordinate conversions that this transform performs ."}{"node_name": "TYPE_TRANSLATION", "type": "field", "idx": 8007, "Desc": "this flag bit indicates that the transform defined by this object performs a translation in addition to the conversions indicated by other flag bits . a translation moves the coordinates by a constant amount in x and y without changing the length or angle of vectors ."}{"node_name": "TYPE_UNIFORM_SCALE", "type": "field", "idx": 8008, "Desc": "this flag bit indicates that the transform defined by this object performs a uniform scale in addition to the conversions indicated by other flag bits . a uniform scale multiplies the length of vectors by the same amount in both the x and y directions without changing the angle between vectors . this flag bit is mutually exclusive with the type_general_scale flag ."}{"node_name": "TYPE_GENERAL_SCALE", "type": "field", "idx": 8009, "Desc": "this flag bit indicates that the transform defined by this object performs a general scale in addition to the conversions indicated by other flag bits . a general scale multiplies the length of vectors by different amounts in the x and y directions without changing the angle between perpendicular vectors . this flag bit is mutually exclusive with the type_uniform_scale flag ."}{"node_name": "TYPE_MASK_SCALE", "type": "field", "idx": 8010, "Desc": "this constant is a bit mask for any of the scale flag bits ."}{"node_name": "TYPE_FLIP", "type": "field", "idx": 8011, "Desc": "this flag bit indicates that the transform defined by this object performs a mirror image flip about some axis which changes the normally right handed coordinate system into a left handed system in addition to the conversions indicated by other flag bits . a right handed coordinate system is one where the positive x axis rotates counterclockwise to overlay the positive y axis similar to the direction that the fingers on your right hand curl when you stare end on at your thumb . a left handed coordinate system is one where the positive x axis rotates clockwise to overlay the positive y axis similar to the direction that the fingers on your left hand curl . there is no mathematical way to determine the angle of the original flipping or mirroring transformation since all angles of flip are identical given an appropriate adjusting rotation ."}{"node_name": "TYPE_QUADRANT_ROTATION", "type": "field", "idx": 8012, "Desc": "this flag bit indicates that the transform defined by this object performs a quadrant rotation by some multiple of 90 degrees in addition to the conversions indicated by other flag bits . a rotation changes the angles of vectors by the same amount regardless of the original direction of the vector and without changing the length of the vector . this flag bit is mutually exclusive with the type_general_rotation flag ."}{"node_name": "TYPE_GENERAL_ROTATION", "type": "field", "idx": 8013, "Desc": "this flag bit indicates that the transform defined by this object performs a rotation by an arbitrary angle in addition to the conversions indicated by other flag bits . a rotation changes the angles of vectors by the same amount regardless of the original direction of the vector and without changing the length of the vector . this flag bit is mutually exclusive with the type_quadrant_rotation flag ."}{"node_name": "TYPE_MASK_ROTATION", "type": "field", "idx": 8014, "Desc": "this constant is a bit mask for any of the rotation flag bits ."}{"node_name": "TYPE_GENERAL_TRANSFORM", "type": "field", "idx": 8015, "Desc": "this constant indicates that the transform defined by this object performs an arbitrary conversion of the input coordinates . if this transform can be classified by any of the above constants , the type will either be the constant type_identity or a combination of the appropriate flag bits for the various coordinate conversions that this transform performs ."}{"node_name": "x", "type": "field", "idx": 8210, "Desc": "the x coordinate of the upper-left corner of the framing rectangle of the arc ."}{"node_name": "y", "type": "field", "idx": 8211, "Desc": "the y coordinate of the upper-left corner of the framing rectangle of the arc ."}{"node_name": "width", "type": "field", "idx": 8212, "Desc": "the overall width of the full ellipse of which this arc is a partial section ( not considering the angular extents ) ."}{"node_name": "height", "type": "field", "idx": 8213, "Desc": "the overall height of the full ellipse of which this arc is a partial section ( not considering the angular extents ) ."}{"node_name": "start", "type": "field", "idx": 8214, "Desc": "the starting angle of the arc in degrees ."}{"node_name": "extent", "type": "field", "idx": 8215, "Desc": "the angular extent of the arc in degrees ."}{"node_name": "x", "type": "field", "idx": 8257, "Desc": "the x coordinate of the upper-left corner of the framing rectangle of the arc ."}{"node_name": "y", "type": "field", "idx": 8258, "Desc": "the y coordinate of the upper-left corner of the framing rectangle of the arc ."}{"node_name": "width", "type": "field", "idx": 8259, "Desc": "the overall width of the full ellipse of which this arc is a partial section ( not considering the angular extents ) ."}{"node_name": "height", "type": "field", "idx": 8260, "Desc": "the overall height of the full ellipse of which this arc is a partial section ( not considering the angular extents ) ."}{"node_name": "start", "type": "field", "idx": 8261, "Desc": "the starting angle of the arc in degrees ."}{"node_name": "extent", "type": "field", "idx": 8262, "Desc": "the angular extent of the arc in degrees ."}{"node_name": "OPEN", "type": "field", "idx": 8304, "Desc": "the closure type for an open arc with no path segments connecting the two ends of the arc segment ."}{"node_name": "CHORD", "type": "field", "idx": 8305, "Desc": "the closure type for an arc closed by drawing a straight line segment from the start of the arc segment to the end of the arc segment ."}{"node_name": "PIE", "type": "field", "idx": 8306, "Desc": "the closure type for an arc closed by drawing straight line segments from the start of the arc segment to the center of the full ellipse and from that point to the end of the arc segment ."}{"node_name": "x1", "type": "field", "idx": 8448, "Desc": "the x coordinate of the start point of the cubic curve segment ."}{"node_name": "y1", "type": "field", "idx": 8449, "Desc": "the y coordinate of the start point of the cubic curve segment ."}{"node_name": "ctrlx1", "type": "field", "idx": 8450, "Desc": "the x coordinate of the first control point of the cubic curve segment ."}{"node_name": "ctrly1", "type": "field", "idx": 8451, "Desc": "the y coordinate of the first control point of the cubic curve segment ."}{"node_name": "ctrlx2", "type": "field", "idx": 8452, "Desc": "the x coordinate of the second control point of the cubic curve segment ."}{"node_name": "ctrly2", "type": "field", "idx": 8453, "Desc": "the y coordinate of the second control point of the cubic curve segment ."}{"node_name": "x2", "type": "field", "idx": 8454, "Desc": "the x coordinate of the end point of the cubic curve segment ."}{"node_name": "y2", "type": "field", "idx": 8455, "Desc": "the y coordinate of the end point of the cubic curve segment ."}{"node_name": "x1", "type": "field", "idx": 8489, "Desc": "the x coordinate of the start point of the cubic curve segment ."}{"node_name": "y1", "type": "field", "idx": 8490, "Desc": "the y coordinate of the start point of the cubic curve segment ."}{"node_name": "ctrlx1", "type": "field", "idx": 8491, "Desc": "the x coordinate of the first control point of the cubic curve segment ."}{"node_name": "ctrly1", "type": "field", "idx": 8492, "Desc": "the y coordinate of the first control point of the cubic curve segment ."}{"node_name": "ctrlx2", "type": "field", "idx": 8493, "Desc": "the x coordinate of the second control point of the cubic curve segment ."}{"node_name": "ctrly2", "type": "field", "idx": 8494, "Desc": "the y coordinate of the second control point of the cubic curve segment ."}{"node_name": "x2", "type": "field", "idx": 8495, "Desc": "the x coordinate of the end point of the cubic curve segment ."}{"node_name": "y2", "type": "field", "idx": 8496, "Desc": "the y coordinate of the end point of the cubic curve segment ."}{"node_name": "x", "type": "field", "idx": 8656, "Desc": "the x coordinate of the upper-left corner of the framing rectangle of this ellipse2d ."}{"node_name": "y", "type": "field", "idx": 8657, "Desc": "the y coordinate of the upper-left corner of the framing rectangle of this ellipse2d ."}{"node_name": "width", "type": "field", "idx": 8658, "Desc": "the overall width of this ellipse2d ."}{"node_name": "height", "type": "field", "idx": 8659, "Desc": "the overall height of the ellipse2d ."}{"node_name": "x", "type": "field", "idx": 8678, "Desc": "the x coordinate of the upper-left corner of the framing rectangle of this ellipse2d ."}{"node_name": "y", "type": "field", "idx": 8679, "Desc": "the y coordinate of the upper-left corner of the framing rectangle of this ellipse2d ."}{"node_name": "width", "type": "field", "idx": 8680, "Desc": "the overall width of this ellipse2d ."}{"node_name": "height", "type": "field", "idx": 8681, "Desc": "the overall height of this ellipse2d ."}{"node_name": "x1", "type": "field", "idx": 8755, "Desc": "the x coordinate of the start point of the line segment ."}{"node_name": "y1", "type": "field", "idx": 8756, "Desc": "the y coordinate of the start point of the line segment ."}{"node_name": "x2", "type": "field", "idx": 8757, "Desc": "the x coordinate of the end point of the line segment ."}{"node_name": "y2", "type": "field", "idx": 8758, "Desc": "the y coordinate of the end point of the line segment ."}{"node_name": "x1", "type": "field", "idx": 8781, "Desc": "the x coordinate of the start point of the line segment ."}{"node_name": "y1", "type": "field", "idx": 8782, "Desc": "the y coordinate of the start point of the line segment ."}{"node_name": "x2", "type": "field", "idx": 8783, "Desc": "the x coordinate of the end point of the line segment ."}{"node_name": "y2", "type": "field", "idx": 8784, "Desc": "the y coordinate of the end point of the line segment ."}{"node_name": "WIND_EVEN_ODD", "type": "field", "idx": 9031, "Desc": "an even-odd winding rule for determining the interior of a path ."}{"node_name": "WIND_NON_ZERO", "type": "field", "idx": 9032, "Desc": "a non-zero winding rule for determining the interior of a path ."}{"node_name": "WIND_EVEN_ODD", "type": "field", "idx": 9118, "Desc": "the winding rule constant for specifying an even-odd rule for determining the interior of a path . the even-odd rule specifies that a point lies inside the path if a ray drawn in any direction from that point to infinity is crossed by path segments an odd number of times ."}{"node_name": "WIND_NON_ZERO", "type": "field", "idx": 9119, "Desc": "the winding rule constant for specifying a non-zero rule for determining the interior of a path . the non-zero rule specifies that a point lies inside the path if a ray drawn in any direction from that point to infinity is crossed by path segments a different number of times in the counter-clockwise direction than the clockwise direction ."}{"node_name": "SEG_MOVETO", "type": "field", "idx": 9120, "Desc": "the segment type constant for a point that specifies the starting location for a new subpath ."}{"node_name": "SEG_LINETO", "type": "field", "idx": 9121, "Desc": "the segment type constant for a point that specifies the end point of a line to be drawn from the most recently specified point ."}{"node_name": "SEG_QUADTO", "type": "field", "idx": 9122, "Desc": "the segment type constant for the pair of points that specify a quadratic parametric curve to be drawn from the most recently specified point . the curve is interpolated by solving the parametric control equation in the range ( t =[ 0 .. 1 ]) using the most recently specified ( current ) point ( cp ) , the first control point ( p1 ) , and the final interpolated control point ( p2 ) . the parametric control equation for this curve is : p ( t ) = b ( 2 , 0 ) *cp + b ( 2 , 1 ) *p1 + b ( 2 , 2 ) *p2 0 <= t <= 1 b ( n , m ) = mth coefficient of nth degree bernstein polynomial = c ( n , m ) * t^ ( m ) * ( 1 - t ) ^ ( n-m ) c ( n , m ) = combinations of n things , taken m at a time = n ! / ( m ! * ( n-m ) ! )"}{"node_name": "SEG_CUBICTO", "type": "field", "idx": 9123, "Desc": "the segment type constant for the set of 3 points that specify a cubic parametric curve to be drawn from the most recently specified point . the curve is interpolated by solving the parametric control equation in the range ( t =[ 0 .. 1 ]) using the most recently specified ( current ) point ( cp ) , the first control point ( p1 ) , the second control point ( p2 ) , and the final interpolated control point ( p3 ) . the parametric control equation for this curve is : p ( t ) = b ( 3 , 0 ) *cp + b ( 3 , 1 ) *p1 + b ( 3 , 2 ) *p2 + b ( 3 , 3 ) *p3 0 <= t <= 1 b ( n , m ) = mth coefficient of nth degree bernstein polynomial = c ( n , m ) * t^ ( m ) * ( 1 - t ) ^ ( n-m ) c ( n , m ) = combinations of n things , taken m at a time = n ! / ( m ! * ( n-m ) ! ) this form of curve is commonly known as a b\u00e9zier curve ."}{"node_name": "SEG_CLOSE", "type": "field", "idx": 9124, "Desc": "the segment type constant that specifies that the preceding subpath should be closed by appending a line segment back to the point corresponding to the most recent seg_moveto ."}{"node_name": "x", "type": "field", "idx": 9133, "Desc": "the x coordinate of this point2d ."}{"node_name": "y", "type": "field", "idx": 9134, "Desc": "the y coordinate of this point2d ."}{"node_name": "x", "type": "field", "idx": 9146, "Desc": "the x coordinate of this point2d ."}{"node_name": "y", "type": "field", "idx": 9147, "Desc": "the y coordinate of this point2d ."}{"node_name": "x1", "type": "field", "idx": 9195, "Desc": "the x coordinate of the start point of the quadratic curve segment ."}{"node_name": "y1", "type": "field", "idx": 9196, "Desc": "the y coordinate of the start point of the quadratic curve segment ."}{"node_name": "ctrlx", "type": "field", "idx": 9197, "Desc": "the x coordinate of the control point of the quadratic curve segment ."}{"node_name": "ctrly", "type": "field", "idx": 9198, "Desc": "the y coordinate of the control point of the quadratic curve segment ."}{"node_name": "x2", "type": "field", "idx": 9199, "Desc": "the x coordinate of the end point of the quadratic curve segment ."}{"node_name": "y2", "type": "field", "idx": 9200, "Desc": "the y coordinate of the end point of the quadratic curve segment ."}{"node_name": "x1", "type": "field", "idx": 9227, "Desc": "the x coordinate of the start point of the quadratic curve segment ."}{"node_name": "y1", "type": "field", "idx": 9228, "Desc": "the y coordinate of the start point of the quadratic curve segment ."}{"node_name": "ctrlx", "type": "field", "idx": 9229, "Desc": "the x coordinate of the control point of the quadratic curve segment ."}{"node_name": "ctrly", "type": "field", "idx": 9230, "Desc": "the y coordinate of the control point of the quadratic curve segment ."}{"node_name": "x2", "type": "field", "idx": 9231, "Desc": "the x coordinate of the end point of the quadratic curve segment ."}{"node_name": "y2", "type": "field", "idx": 9232, "Desc": "the y coordinate of the end point of the quadratic curve segment ."}{"node_name": "x", "type": "field", "idx": 9363, "Desc": "the x coordinate of this rectangle2d ."}{"node_name": "y", "type": "field", "idx": 9364, "Desc": "the y coordinate of this rectangle2d ."}{"node_name": "width", "type": "field", "idx": 9365, "Desc": "the width of this rectangle2d ."}{"node_name": "height", "type": "field", "idx": 9366, "Desc": "the height of this rectangle2d ."}{"node_name": "x", "type": "field", "idx": 9395, "Desc": "the x coordinate of this rectangle2d ."}{"node_name": "y", "type": "field", "idx": 9396, "Desc": "the y coordinate of this rectangle2d ."}{"node_name": "width", "type": "field", "idx": 9397, "Desc": "the width of this rectangle2d ."}{"node_name": "height", "type": "field", "idx": 9398, "Desc": "the height of this rectangle2d ."}{"node_name": "OUT_LEFT", "type": "field", "idx": 9432, "Desc": "the bitmask that indicates that a point lies to the left of this rectangle2d ."}{"node_name": "OUT_TOP", "type": "field", "idx": 9433, "Desc": "the bitmask that indicates that a point lies above this rectangle2d ."}{"node_name": "OUT_RIGHT", "type": "field", "idx": 9434, "Desc": "the bitmask that indicates that a point lies to the right of this rectangle2d ."}{"node_name": "OUT_BOTTOM", "type": "field", "idx": 9435, "Desc": "the bitmask that indicates that a point lies below this rectangle2d ."}{"node_name": "x", "type": "field", "idx": 9554, "Desc": "the x coordinate of this roundrectangle2d ."}{"node_name": "y", "type": "field", "idx": 9555, "Desc": "the y coordinate of this roundrectangle2d ."}{"node_name": "width", "type": "field", "idx": 9556, "Desc": "the width of this roundrectangle2d ."}{"node_name": "height", "type": "field", "idx": 9557, "Desc": "the height of this roundrectangle2d ."}{"node_name": "arcwidth", "type": "field", "idx": 9558, "Desc": "the width of the arc that rounds off the corners ."}{"node_name": "archeight", "type": "field", "idx": 9559, "Desc": "the height of the arc that rounds off the corners ."}{"node_name": "x", "type": "field", "idx": 9586, "Desc": "the x coordinate of this roundrectangle2d ."}{"node_name": "y", "type": "field", "idx": 9587, "Desc": "the y coordinate of this roundrectangle2d ."}{"node_name": "width", "type": "field", "idx": 9588, "Desc": "the width of this roundrectangle2d ."}{"node_name": "height", "type": "field", "idx": 9589, "Desc": "the height of this roundrectangle2d ."}{"node_name": "arcwidth", "type": "field", "idx": 9590, "Desc": "the width of the arc that rounds off the corners ."}{"node_name": "archeight", "type": "field", "idx": 9591, "Desc": "the height of the arc that rounds off the corners ."}{"node_name": "REQUIRED", "type": "field", "idx": 10014, "Desc": "value used for \" enum \" ( integer ) type . states that this feature is required for the graphicsconfiguration object . if this feature is not available , do not select the graphicsconfiguration object ."}{"node_name": "PREFERRED", "type": "field", "idx": 10015, "Desc": "value used for \" enum \" ( integer ) type . states that this feature is desired for the graphicsconfiguration object . a selection with this feature is preferred over a selection that does not include this feature , although both selections can be considered valid matches ."}{"node_name": "UNNECESSARY", "type": "field", "idx": 10016, "Desc": "value used for \" enum \" ( integer ) type . states that this feature is not necessary for the selection of the graphicsconfiguration object . a selection without this feature is preferred over a selection that includes this feature since it is not used ."}{"node_name": "TYPE_RASTER_SCREEN", "type": "field", "idx": 10058, "Desc": "device is a raster screen ."}{"node_name": "TYPE_PRINTER", "type": "field", "idx": 10059, "Desc": "device is a printer ."}{"node_name": "TYPE_IMAGE_BUFFER", "type": "field", "idx": 10060, "Desc": "device is an image buffer . this buffer can reside in device or system memory but it is not physically viewable by the user ."}{"node_name": "RELATIVE", "type": "field", "idx": 10104, "Desc": "specifies that this component is the next-to-last component in its column or row ( gridwidth , gridheight ) , or that this component be placed next to the previously added component ( gridx , gridy ) ."}{"node_name": "REMAINDER", "type": "field", "idx": 10105, "Desc": "specifies that this component is the last component in its column or row ."}{"node_name": "NONE", "type": "field", "idx": 10106, "Desc": "do not resize the component ."}{"node_name": "BOTH", "type": "field", "idx": 10107, "Desc": "resize the component both horizontally and vertically ."}{"node_name": "HORIZONTAL", "type": "field", "idx": 10108, "Desc": "resize the component horizontally but not vertically ."}{"node_name": "VERTICAL", "type": "field", "idx": 10109, "Desc": "resize the component vertically but not horizontally ."}{"node_name": "CENTER", "type": "field", "idx": 10110, "Desc": "put the component in the center of its display area ."}{"node_name": "NORTH", "type": "field", "idx": 10111, "Desc": "put the component at the top of its display area , centered horizontally ."}{"node_name": "NORTHEAST", "type": "field", "idx": 10112, "Desc": "put the component at the top-right corner of its display area ."}{"node_name": "EAST", "type": "field", "idx": 10113, "Desc": "put the component on the right side of its display area , centered vertically ."}{"node_name": "SOUTHEAST", "type": "field", "idx": 10114, "Desc": "put the component at the bottom-right corner of its display area ."}{"node_name": "SOUTH", "type": "field", "idx": 10115, "Desc": "put the component at the bottom of its display area , centered horizontally ."}{"node_name": "SOUTHWEST", "type": "field", "idx": 10116, "Desc": "put the component at the bottom-left corner of its display area ."}{"node_name": "WEST", "type": "field", "idx": 10117, "Desc": "put the component on the left side of its display area , centered vertically ."}{"node_name": "NORTHWEST", "type": "field", "idx": 10118, "Desc": "put the component at the top-left corner of its display area ."}{"node_name": "PAGE_START", "type": "field", "idx": 10119, "Desc": "place the component centered along the edge of its display area associated with the start of a page for the current componentorientation . equal to north for horizontal orientations ."}{"node_name": "PAGE_END", "type": "field", "idx": 10120, "Desc": "place the component centered along the edge of its display area associated with the end of a page for the current componentorientation . equal to south for horizontal orientations ."}{"node_name": "LINE_START", "type": "field", "idx": 10121, "Desc": "place the component centered along the edge of its display area where lines of text would normally begin for the current componentorientation . equal to west for horizontal , left-to-right orientations and east for horizontal , right-to-left orientations ."}{"node_name": "LINE_END", "type": "field", "idx": 10122, "Desc": "place the component centered along the edge of its display area where lines of text would normally end for the current componentorientation . equal to east for horizontal , left-to-right orientations and west for horizontal , right-to-left orientations ."}{"node_name": "FIRST_LINE_START", "type": "field", "idx": 10123, "Desc": "place the component in the corner of its display area where the first line of text on a page would normally begin for the current componentorientation . equal to northwest for horizontal , left-to-right orientations and northeast for horizontal , right-to-left orientations ."}{"node_name": "FIRST_LINE_END", "type": "field", "idx": 10124, "Desc": "place the component in the corner of its display area where the first line of text on a page would normally end for the current componentorientation . equal to northeast for horizontal , left-to-right orientations and northwest for horizontal , right-to-left orientations ."}{"node_name": "LAST_LINE_START", "type": "field", "idx": 10125, "Desc": "place the component in the corner of its display area where the last line of text on a page would normally start for the current componentorientation . equal to southwest for horizontal , left-to-right orientations and southeast for horizontal , right-to-left orientations ."}{"node_name": "LAST_LINE_END", "type": "field", "idx": 10126, "Desc": "place the component in the corner of its display area where the last line of text on a page would normally end for the current componentorientation . equal to southeast for horizontal , left-to-right orientations and southwest for horizontal , right-to-left orientations ."}{"node_name": "BASELINE", "type": "field", "idx": 10127, "Desc": "possible value for the anchor field . specifies that the component should be horizontally centered and vertically aligned along the baseline of the prevailing row . if the component does not have a baseline it will be vertically centered ."}{"node_name": "BASELINE_LEADING", "type": "field", "idx": 10128, "Desc": "possible value for the anchor field . specifies that the component should be horizontally placed along the leading edge . for components with a left-to-right orientation , the leading edge is the left edge . vertically the component is aligned along the baseline of the prevailing row . if the component does not have a baseline it will be vertically centered ."}{"node_name": "BASELINE_TRAILING", "type": "field", "idx": 10129, "Desc": "possible value for the anchor field . specifies that the component should be horizontally placed along the trailing edge . for components with a left-to-right orientation , the trailing edge is the right edge . vertically the component is aligned along the baseline of the prevailing row . if the component does not have a baseline it will be vertically centered ."}{"node_name": "ABOVE_BASELINE", "type": "field", "idx": 10130, "Desc": "possible value for the anchor field . specifies that the component should be horizontally centered . vertically the component is positioned so that its bottom edge touches the baseline of the starting row . if the starting row does not have a baseline it will be vertically centered ."}{"node_name": "ABOVE_BASELINE_LEADING", "type": "field", "idx": 10131, "Desc": "possible value for the anchor field . specifies that the component should be horizontally placed along the leading edge . for components with a left-to-right orientation , the leading edge is the left edge . vertically the component is positioned so that its bottom edge touches the baseline of the starting row . if the starting row does not have a baseline it will be vertically centered ."}{"node_name": "ABOVE_BASELINE_TRAILING", "type": "field", "idx": 10132, "Desc": "possible value for the anchor field . specifies that the component should be horizontally placed along the trailing edge . for components with a left-to-right orientation , the trailing edge is the right edge . vertically the component is positioned so that its bottom edge touches the baseline of the starting row . if the starting row does not have a baseline it will be vertically centered ."}{"node_name": "BELOW_BASELINE", "type": "field", "idx": 10133, "Desc": "possible value for the anchor field . specifies that the component should be horizontally centered . vertically the component is positioned so that its top edge touches the baseline of the starting row . if the starting row does not have a baseline it will be vertically centered ."}{"node_name": "BELOW_BASELINE_LEADING", "type": "field", "idx": 10134, "Desc": "possible value for the anchor field . specifies that the component should be horizontally placed along the leading edge . for components with a left-to-right orientation , the leading edge is the left edge . vertically the component is positioned so that its top edge touches the baseline of the starting row . if the starting row does not have a baseline it will be vertically centered ."}{"node_name": "BELOW_BASELINE_TRAILING", "type": "field", "idx": 10135, "Desc": "possible value for the anchor field . specifies that the component should be horizontally placed along the trailing edge . for components with a left-to-right orientation , the trailing edge is the right edge . vertically the component is positioned so that its top edge touches the baseline of the starting row . if the starting row does not have a baseline it will be vertically centered ."}{"node_name": "gridx", "type": "field", "idx": 10136, "Desc": "specifies the cell containing the leading edge of the component's display area , where the first cell in a row has gridx=0 . the leading edge of a component's display area is its left edge for a horizontal , left-to-right container and its right edge for a horizontal , right-to-left container . the value relative specifies that the component be placed immediately following the component that was added to the container just before this component was added . the default value is relative . gridx should be a non-negative value ."}{"node_name": "gridy", "type": "field", "idx": 10137, "Desc": "specifies the cell at the top of the component's display area , where the topmost cell has gridy=0 . the value relative specifies that the component be placed just below the component that was added to the container just before this component was added . the default value is relative . gridy should be a non-negative value ."}{"node_name": "gridwidth", "type": "field", "idx": 10138, "Desc": "specifies the number of cells in a row for the component's display area . use remainder to specify that the component's display area will be from gridx to the last cell in the row . use relative to specify that the component's display area will be from gridx to the next to the last one in its row . gridwidth should be non-negative and the default value is 1 ."}{"node_name": "gridheight", "type": "field", "idx": 10139, "Desc": "specifies the number of cells in a column for the component's display area . use remainder to specify that the component's display area will be from gridy to the last cell in the column . use relative to specify that the component's display area will be from gridy to the next to the last one in its column . gridheight should be a non-negative value and the default value is 1 ."}{"node_name": "weightx", "type": "field", "idx": 10140, "Desc": "specifies how to distribute extra horizontal space . the grid bag layout manager calculates the weight of a column to be the maximum weightx of all the components in a column . if the resulting layout is smaller horizontally than the area it needs to fill , the extra space is distributed to each column in proportion to its weight . a column that has a weight of zero receives no extra space . if all the weights are zero , all the extra space appears between the grids of the cell and the left and right edges . the default value of weightx is 0 . weightx should be a non-negative value ."}{"node_name": "weighty", "type": "field", "idx": 10141, "Desc": "specifies how to distribute extra vertical space . the grid bag layout manager calculates the weight of a row to be the maximum weighty of all the components in a row . if the resulting layout is smaller vertically than the area it needs to fill , the extra space is distributed to each row in proportion to its weight . a row that has a weight of zero receives no extra space . if all the weights are zero , all the extra space appears between the grids of the cell and the top and bottom edges . the default value of weighty is 0 . weighty should be a non-negative value ."}{"node_name": "anchor", "type": "field", "idx": 10142, "Desc": "anchor is used when the component is smaller than its display area . it determines where , within the display area , to place the component . there are three kinds of possible values : orientation relative , baseline relative and absolute . orientation relative values are interpreted relative to the container's component orientation property , baseline relative values are interpreted relative to the baseline and absolute values are not . the absolute values are : center , north , northeast , east , southeast , south , southwest , west , and northwest . the orientation relative values are : page_start , page_end , line_start , line_end , first_line_start , first_line_end , last_line_start and last_line_end . the baseline relative values are : baseline , baseline_leading , baseline_trailing , above_baseline , above_baseline_leading , above_baseline_trailing , below_baseline , below_baseline_leading , and below_baseline_trailing . the default value is center ."}{"node_name": "fill", "type": "field", "idx": 10143, "Desc": "fill is used when the component's display area is larger than the component's requested size . it determines whether to resize the component , and if so , how . the following values are valid for fill : none : do not resize the component . horizontal : make the component wide enough to fill its display area horizontally , but do not change its height . vertical : make the component tall enough to fill its display area vertically , but do not change its width . both : make the component fill its display area entirely . the default value is none ."}{"node_name": "insets", "type": "field", "idx": 10144, "Desc": "insets specifies the external padding of the component , the minimum amount of space between the component and the edges of its display area . the default value is new insets ( 0 , 0 , 0 , 0 ) ."}{"node_name": "ipadx", "type": "field", "idx": 10145, "Desc": "ipadx specifies the internal padding of the component , how much space to add to the minimum width of the component . the width of the component is at least its minimum width plus ipadx pixels . the default value is 0 ."}{"node_name": "ipady", "type": "field", "idx": 10146, "Desc": "ipady specifies the internal padding , that is , how much space to add to the minimum height of the component . the height of the component is at least its minimum height plus ipady pixels . the default value is 0 ."}{"node_name": "MAXGRIDSIZE", "type": "field", "idx": 10162, "Desc": "MAXGRIDSIZE is no longer used to reserve arrays and kept for backward compatibility . previously , this was the maximum number of grid positions ( both horizontal and vertical ) that could be laid out by the grid bag layout . current implementation doesn't impose any limits on the size of a grid ."}{"node_name": "MINSIZE", "type": "field", "idx": 10163, "Desc": "the smallest grid that can be laid out by the grid bag layout ."}{"node_name": "PREFERREDSIZE", "type": "field", "idx": 10164, "Desc": "the preferred grid size that can be laid out by the grid bag layout ."}{"node_name": "comptable", "type": "field", "idx": 10165, "Desc": "this hashtable maintains the association between a component and its gridbag constraints . the keys in comptable are the components and the values are the instances of gridbagconstraints ."}{"node_name": "defaultConstraints", "type": "field", "idx": 10166, "Desc": "defaultConstraints holds a gridbag constraints instance containing the default values , so if a component does not have gridbag constraints associated with it , then the component will be assigned a copy of the defaultconstraints ."}{"node_name": "layoutInfo", "type": "field", "idx": 10167, "Desc": "layoutInfo holds the layout information for the gridbag . the information in layoutInfo is based on the most recent validation of the gridbag . if layoutinfo is null this indicates that there are no components in the gridbag or if there are components , they have not yet been validated ."}{"node_name": "columnWidths", "type": "field", "idx": 10168, "Desc": "columnWidths holds the overrides to the column minimum width . if columnWidths is non-null the values are applied to the gridbag after all of the minimum columns widths have been calculated . if columnwidths has more elements than the number of columns , columns are added to the gridbag to match the number of elements in columnwidth ."}{"node_name": "rowHeights", "type": "field", "idx": 10169, "Desc": "rowHeights holds the overrides to the row minimum heights . if rowHeights is non-null the values are applied to the gridbag after all of the minimum row heights have been calculated . if rowheights has more elements than the number of rows , rows are added to the gridbag to match the number of elements in rowheights ."}{"node_name": "columnWeights", "type": "field", "idx": 10170, "Desc": "columnWeights holds the overrides to the column weights . if columnWeights is non-null the values are applied to the gridbag after all of the columns weights have been calculated . if columnweights [ i ] > weight for column i , then column i is assigned the weight in columnweights [ i ] . if columnweights has more elements than the number of columns , the excess elements are ignored - they do not cause more columns to be created ."}{"node_name": "rowWeights", "type": "field", "idx": 10171, "Desc": "rowWeights holds the overrides to the row weights . if rowWeights is non-null the values are applied to the gridbag after all of the rows weights have been calculated . if rowweights [ i ] > weight for row i , then row i is assigned the weight in rowweights [ i ] . if rowweights has more elements than the number of rows , the excess elements are ignored - they do not cause more rows to be created ."}{"node_name": "RAW_TEXT", "type": "field", "idx": 10295, "Desc": "constant for the raw text state ."}{"node_name": "CONVERTED_TEXT", "type": "field", "idx": 10296, "Desc": "constant for the converted text state ."}{"node_name": "UNSELECTED_RAW_TEXT_HIGHLIGHT", "type": "field", "idx": 10297, "Desc": "constant for the default highlight for unselected raw text ."}{"node_name": "SELECTED_RAW_TEXT_HIGHLIGHT", "type": "field", "idx": 10298, "Desc": "constant for the default highlight for selected raw text ."}{"node_name": "UNSELECTED_CONVERTED_TEXT_HIGHLIGHT", "type": "field", "idx": 10299, "Desc": "constant for the default highlight for unselected converted text ."}{"node_name": "SELECTED_CONVERTED_TEXT_HIGHLIGHT", "type": "field", "idx": 10300, "Desc": "constant for the default highlight for selected converted text ."}{"node_name": "LATIN", "type": "field", "idx": 10334, "Desc": "constant for all latin characters , including the characters in the basic_latin , latin_1_supplement , latin_extended_a , latin_extended_b unicode character blocks ."}{"node_name": "LATIN_DIGITS", "type": "field", "idx": 10335, "Desc": "constant for the digits included in the basic_latin unicode character block ."}{"node_name": "TRADITIONAL_HANZI", "type": "field", "idx": 10336, "Desc": "constant for all han characters used in writing traditional chinese , including a subset of the cjk unified ideographs as well as traditional chinese han characters that may be defined as surrogate characters ."}{"node_name": "SIMPLIFIED_HANZI", "type": "field", "idx": 10337, "Desc": "constant for all han characters used in writing simplified chinese , including a subset of the cjk unified ideographs as well as simplified chinese han characters that may be defined as surrogate characters ."}{"node_name": "KANJI", "type": "field", "idx": 10338, "Desc": "constant for all han characters used in writing japanese , including a subset of the cjk unified ideographs as well as japanese han characters that may be defined as surrogate characters ."}{"node_name": "HANJA", "type": "field", "idx": 10339, "Desc": "constant for all han characters used in writing korean , including a subset of the cjk unified ideographs as well as korean han characters that may be defined as surrogate characters ."}{"node_name": "HALFWIDTH_KATAKANA", "type": "field", "idx": 10340, "Desc": "constant for the halfwidth katakana subset of the unicode halfwidth and fullwidth forms character block ."}{"node_name": "FULLWIDTH_LATIN", "type": "field", "idx": 10341, "Desc": "constant for the fullwidth ascii variants subset of the unicode halfwidth and fullwidth forms character block ."}{"node_name": "FULLWIDTH_DIGITS", "type": "field", "idx": 10342, "Desc": "constant for the fullwidth digits included in the unicode halfwidth and fullwidth forms character block ."}{"node_name": "TYPE_NEAREST_NEIGHBOR", "type": "field", "idx": 10405, "Desc": "nearest-neighbor interpolation type ."}{"node_name": "TYPE_BILINEAR", "type": "field", "idx": 10406, "Desc": "bilinear interpolation type ."}{"node_name": "TYPE_BICUBIC", "type": "field", "idx": 10407, "Desc": "bicubic interpolation type ."}{"node_name": "TYPE_CUSTOM", "type": "field", "idx": 10584, "Desc": "image type is not recognized so it must be a customized image . this type is only used as a return value for the gettype() method ."}{"node_name": "TYPE_INT_RGB", "type": "field", "idx": 10585, "Desc": "represents an image with 8-b it rgb color components packed into integer pixels . the image has a directcolormodel without alpha . when data with non-opaque alpha is stored in an image of this type , the color data must be adjusted to a non-premultiplied form and the alpha discarded , as described in the alphacomposite documentation ."}{"node_name": "TYPE_INT_ARGB", "type": "field", "idx": 10586, "Desc": "represents an image with 8-b it rgba color components packed into integer pixels . the image has a directcolormodel with alpha . the color data in this image is considered not to be premultiplied with alpha . when this type is used as the imagetype argument to a bufferedimage constructor , the created image is consistent with images created in the jdk1.1 and earlier releases ."}{"node_name": "TYPE_INT_ARGB_PRE", "type": "field", "idx": 10587, "Desc": "represents an image with 8-b it rgba color components packed into integer pixels . the image has a directcolormodel with alpha . the color data in this image is considered to be premultiplied with alpha ."}{"node_name": "TYPE_INT_BGR", "type": "field", "idx": 10588, "Desc": "represents an image with 8-b it rgb color components , corresponding to a windows- or solaris- style bgr color model , with the colors blue , green , and red packed into integer pixels . there is no alpha . the image has a directcolormodel . when data with non-opaque alpha is stored in an image of this type , the color data must be adjusted to a non-premultiplied form and the alpha discarded , as described in the alphacomposite documentation ."}{"node_name": "TYPE_3BYTE_BGR", "type": "field", "idx": 10589, "Desc": "represents an image with 8-b it rgb color components , corresponding to a windows-style bgr color model ) with the colors blue , green , and red stored in 3 bytes . there is no alpha . the image has a componentcolormodel . when data with non-opaque alpha is stored in an image of this type , the color data must be adjusted to a non-premultiplied form and the alpha discarded , as described in the alphacomposite documentation ."}{"node_name": "TYPE_4BYTE_ABGR", "type": "field", "idx": 10590, "Desc": "represents an image with 8-b it rgba color components with the colors blue , green , and red stored in 3 bytes and 1 byte of alpha . the image has a componentcolormodel with alpha . the color data in this image is considered not to be premultiplied with alpha . the byte data is interleaved in a single byte array in the order a , b , g , r from lower to higher byte addresses within each pixel ."}{"node_name": "TYPE_4BYTE_ABGR_PRE", "type": "field", "idx": 10591, "Desc": "represents an image with 8-b it rgba color components with the colors blue , green , and red stored in 3 bytes and 1 byte of alpha . the image has a componentcolormodel with alpha . the color data in this image is considered to be premultiplied with alpha . the byte data is interleaved in a single byte array in the order a , b , g , r from lower to higher byte addresses within each pixel ."}{"node_name": "TYPE_USHORT_565_RGB", "type": "field", "idx": 10592, "Desc": "represents an image with 5-6-5 rgb color components ( 5-bits red , 6-bits green , 5-bits blue ) with no alpha . this image has a directcolormodel . when data with non-opaque alpha is stored in an image of this type , the color data must be adjusted to a non-premultiplied form and the alpha discarded , as described in the alphacomposite documentation ."}{"node_name": "TYPE_USHORT_555_RGB", "type": "field", "idx": 10593, "Desc": "represents an image with 5-5-5 rgb color components ( 5-bits red , 5-bits green , 5-bits blue ) with no alpha . this image has a directcolormodel . when data with non-opaque alpha is stored in an image of this type , the color data must be adjusted to a non-premultiplied form and the alpha discarded , as described in the alphacomposite documentation ."}{"node_name": "TYPE_BYTE_GRAY", "type": "field", "idx": 10594, "Desc": "represents a unsigned byte grayscale image , non-indexed . this image has a componentcolormodel with a cs_gray colorspace . when data with non-opaque alpha is stored in an image of this type , the color data must be adjusted to a non-premultiplied form and the alpha discarded , as described in the alphacomposite documentation ."}{"node_name": "TYPE_USHORT_GRAY", "type": "field", "idx": 10595, "Desc": "represents an unsigned short grayscale image , non-indexed ) . this image has a componentcolormodel with a cs_gray colorspace . when data with non-opaque alpha is stored in an image of this type , the color data must be adjusted to a non-premultiplied form and the alpha discarded , as described in the alphacomposite documentation ."}{"node_name": "TYPE_BYTE_BINARY", "type": "field", "idx": 10596, "Desc": "represents an opaque byte-packed 1 , 2 , or 4 bit image . the image has an indexcolormodel without alpha . when this type is used as the imagetype argument to the bufferedimage constructor that takes an imagetype argument but no colormodel argument , a 1-bit image is created with an indexcolormodel with two colors in the default srgb colorspace : { 0 , 0 , 0 } and { 255 , 255 , 255} . images with 2 or 4 bits per pixel may be constructed via the bufferedimage constructor that takes a colormodel argument by supplying a colormodel with an appropriate map size . images with 8 bits per pixel should use the image types type_byte_indexed or type_byte_gray depending on their colormodel . when color data is stored in an image of this type , the closest color in the colormap is determined by the indexcolormodel and the resulting index is stored . approximation and loss of alpha or color components can result , depending on the colors in the indexcolormodel colormap ."}{"node_name": "TYPE_BYTE_INDEXED", "type": "field", "idx": 10597, "Desc": "represents an indexed byte image . when this type is used as the imagetype argument to the bufferedimage constructor that takes an imagetype argument but no colormodel argument , an indexcolormodel is created with a 256-color 6 / 6 / 6 color cube palette with the rest of the colors from 216-255 populated by grayscale values in the default srgb colorspace . when color data is stored in an image of this type , the closest color in the colormap is determined by the indexcolormodel and the resulting index is stored . approximation and loss of alpha or color components can result , depending on the colors in the indexcolormodel colormap ."}{"node_name": "pixel_bits", "type": "field", "idx": 10799, "Desc": "the total number of bits in the pixel ."}{"node_name": "transferType", "type": "field", "idx": 10800, "Desc": "data type of the array used to represent pixel values ."}{"node_name": "bandOffsets", "type": "field", "idx": 10993, "Desc": "offsets for all bands in data array elements ."}{"node_name": "bankIndices", "type": "field", "idx": 10994, "Desc": "index for each bank storing a band of image data ."}{"node_name": "numBands", "type": "field", "idx": 10995, "Desc": "the number of bands in this componentsamplemodel ."}{"node_name": "numBanks", "type": "field", "idx": 10996, "Desc": "the number of banks in this componentsamplemodel ."}{"node_name": "scanlineStride", "type": "field", "idx": 10997, "Desc": "line stride ( in data array elements ) of the region of image data described by this componentsamplemodel ."}{"node_name": "pixelStride", "type": "field", "idx": 10998, "Desc": "pixel stride ( in data array elements ) of the region of image data described by this componentsamplemodel ."}{"node_name": "EDGE_ZERO_FILL", "type": "field", "idx": 11119, "Desc": "pixels at the edge of the destination image are set to zero . this is the default ."}{"node_name": "EDGE_NO_OP", "type": "field", "idx": 11120, "Desc": "pixels at the edge of the source image are copied to the corresponding pixels in the destination without modification ."}{"node_name": "TYPE_BYTE", "type": "field", "idx": 11178, "Desc": "tag for unsigned byte data ."}{"node_name": "TYPE_USHORT", "type": "field", "idx": 11179, "Desc": "tag for unsigned short data ."}{"node_name": "TYPE_SHORT", "type": "field", "idx": 11180, "Desc": "tag for signed short data . placeholder for future use ."}{"node_name": "TYPE_INT", "type": "field", "idx": 11181, "Desc": "tag for int data ."}{"node_name": "TYPE_FLOAT", "type": "field", "idx": 11182, "Desc": "tag for float data . placeholder for future use ."}{"node_name": "TYPE_DOUBLE", "type": "field", "idx": 11183, "Desc": "tag for double data . placeholder for future use ."}{"node_name": "TYPE_UNDEFINED", "type": "field", "idx": 11184, "Desc": "tag for undefined data ."}{"node_name": "dataType", "type": "field", "idx": 11185, "Desc": "the data type of this databuffer ."}{"node_name": "banks", "type": "field", "idx": 11186, "Desc": "the number of banks in this databuffer ."}{"node_name": "offset", "type": "field", "idx": 11187, "Desc": "offset into default ( first ) bank from which to get the first element ."}{"node_name": "size", "type": "field", "idx": 11188, "Desc": "usable size of all banks ."}{"node_name": "offsets", "type": "field", "idx": 11189, "Desc": "offsets into all banks ."}{"node_name": "RANDOMPIXELORDER", "type": "field", "idx": 11601, "Desc": "the pixels will be delivered in a random order . this tells the imageconsumer not to use any optimizations that depend on the order of pixel delivery , which should be the default assumption in the absence of any call to the sethints method ."}{"node_name": "TOPDOWNLEFTRIGHT", "type": "field", "idx": 11602, "Desc": "the pixels will be delivered in top-down , left-to-right order ."}{"node_name": "COMPLETESCANLINES", "type": "field", "idx": 11603, "Desc": "the pixels will be delivered in ( multiples of ) complete scanlines at a time ."}{"node_name": "SINGLEPASS", "type": "field", "idx": 11604, "Desc": "the pixels will be delivered in a single pass . each pixel will appear in only one call to any of the setpixels methods . an example of an image format which does not meet this criterion is a progressive jpeg image which defines pixels in multiple passes , each more refined than the previous ."}{"node_name": "SINGLEFRAME", "type": "field", "idx": 11605, "Desc": "the image contain a single static image . the pixels will be defined in calls to the setpixels methods and then the imagecomplete method will be called with the staticimagedone flag after which no more image data will be delivered . an example of an image type which would not meet these criteria would be the output of a video feed , or the representation of a 3d rendering being manipulated by the user . the end of each frame in those types of images will be indicated by calling imagecomplete with the singleframedone flag ."}{"node_name": "IMAGEERROR", "type": "field", "idx": 11606, "Desc": "an error was encountered while producing the image ."}{"node_name": "SINGLEFRAMEDONE", "type": "field", "idx": 11607, "Desc": "one frame of the image is complete but there are more frames to be delivered ."}{"node_name": "STATICIMAGEDONE", "type": "field", "idx": 11608, "Desc": "the image is complete and there are no more pixels or frames to be delivered ."}{"node_name": "IMAGEABORTED", "type": "field", "idx": 11609, "Desc": "the image creation process was deliberately aborted ."}{"node_name": "consumer", "type": "field", "idx": 11640, "Desc": "the consumer of the particular image data stream for which this instance of the imagefilter is filtering data . it is not initialized during the constructor , but rather during the getfilterinstance() method call when the filteredimagesource is creating a unique instance of this object for a particular image data stream ."}{"node_name": "WIDTH", "type": "field", "idx": 11677, "Desc": "this flag in the infoflags argument to imageupdate indicates that the width of the base image is now available and can be taken from the width argument to the imageupdate callback method ."}{"node_name": "HEIGHT", "type": "field", "idx": 11678, "Desc": "this flag in the infoflags argument to imageupdate indicates that the height of the base image is now available and can be taken from the height argument to the imageupdate callback method ."}{"node_name": "PROPERTIES", "type": "field", "idx": 11679, "Desc": "this flag in the infoflags argument to imageupdate indicates that the properties of the image are now available ."}{"node_name": "SOMEBITS", "type": "field", "idx": 11680, "Desc": "this flag in the infoflags argument to imageupdate indicates that more pixels needed for drawing a scaled variation of the image are available . the bounding box of the new pixels can be taken from the x , y , width , and height arguments to the imageupdate callback method ."}{"node_name": "FRAMEBITS", "type": "field", "idx": 11681, "Desc": "this flag in the infoflags argument to imageupdate indicates that another complete frame of a multi-frame image which was previously drawn is now available to be drawn again . the x , y , width , and height arguments to the imageupdate callback method should be ignored ."}{"node_name": "ALLBITS", "type": "field", "idx": 11682, "Desc": "this flag in the infoflags argument to imageupdate indicates that a static image which was previously drawn is now complete and can be drawn again in its final form . the x , y , width , and height arguments to the imageupdate callback method should be ignored ."}{"node_name": "ERROR", "type": "field", "idx": 11683, "Desc": "this flag in the infoflags argument to imageupdate indicates that an image which was being tracked asynchronously has encountered an error . no further information will become available and drawing the image will fail . as a convenience , the abort flag will be indicated at the same time to indicate that the image production was aborted ."}{"node_name": "ABORT", "type": "field", "idx": 11684, "Desc": "this flag in the infoflags argument to imageupdate indicates that an image which was being tracked asynchronously was aborted before production was complete . no more information will become available without further action to trigger another image production sequence . if the error flag was not also set in this image update , then accessing any of the data in the image will restart the production again , probably from the beginning ."}{"node_name": "accelerationPriority", "type": "field", "idx": 11819, "Desc": "priority for accelerating this image . subclasses are free to set different default priorities and applications are free to set the priority for specific images via the setaccelerationpriority ( float ) method ."}{"node_name": "UndefinedProperty", "type": "field", "idx": 11820, "Desc": "the undefinedproperty object should be returned whenever a property which was not defined for a particular image is fetched ."}{"node_name": "SCALE_DEFAULT", "type": "field", "idx": 11821, "Desc": "use the default image-scaling algorithm ."}{"node_name": "SCALE_FAST", "type": "field", "idx": 11822, "Desc": "choose an image-scaling algorithm that gives higher priority to scaling speed than smoothness of the scaled image ."}{"node_name": "SCALE_SMOOTH", "type": "field", "idx": 11823, "Desc": "choose an image-scaling algorithm that gives higher priority to image smoothness than scaling speed ."}{"node_name": "SCALE_REPLICATE", "type": "field", "idx": 11824, "Desc": "use the image scaling algorithm embodied in the replicatescalefilter class . the image object is free to substitute a different filter that performs the same algorithm yet integrates more efficiently into the imaging infrastructure supplied by the toolkit ."}{"node_name": "SCALE_AREA_AVERAGING", "type": "field", "idx": 11825, "Desc": "use the area averaging image scaling algorithm . the image object is free to substitute a different filter that performs the same algorithm yet integrates more efficiently into the image infrastructure supplied by the toolkit ."}{"node_name": "sampleModel", "type": "field", "idx": 12151, "Desc": "the samplemodel that describes how pixels from this raster are stored in the databuffer ."}{"node_name": "dataBuffer", "type": "field", "idx": 12152, "Desc": "the databuffer that stores the image data ."}{"node_name": "minX", "type": "field", "idx": 12153, "Desc": "the x coordinate of the upper-left pixel of this raster ."}{"node_name": "minY", "type": "field", "idx": 12154, "Desc": "the y coordinate of the upper-left pixel of this raster ."}{"node_name": "width", "type": "field", "idx": 12155, "Desc": "the width of this raster ."}{"node_name": "height", "type": "field", "idx": 12156, "Desc": "the height of this raster ."}{"node_name": "sampleModelTranslateX", "type": "field", "idx": 12157, "Desc": "the x translation from the coordinate space of the raster's samplemodel to that of the raster ."}{"node_name": "sampleModelTranslateY", "type": "field", "idx": 12158, "Desc": "the y translation from the coordinate space of the raster's samplemodel to that of the raster ."}{"node_name": "numBands", "type": "field", "idx": 12159, "Desc": "the number of bands in the raster ."}{"node_name": "numDataElements", "type": "field", "idx": 12160, "Desc": "the number of databuffer data elements per pixel ."}{"node_name": "parent", "type": "field", "idx": 12161, "Desc": "the parent of this raster , or null ."}{"node_name": "sources", "type": "field", "idx": 12396, "Desc": "a vector of sources , stored as arbitrary objects ."}{"node_name": "parameters", "type": "field", "idx": 12397, "Desc": "a vector of non-source parameters , stored as arbitrary objects ."}{"node_name": "HINTS_OBSERVED", "type": "field", "idx": 12485, "Desc": "string constant that can be used to identify a property on a renderedimage obtained via the createrendering or createscaledrendering methods . if such a property exists , the value of the property will be a renderinghints object specifying which hints were observed in creating the rendering ."}{"node_name": "srcWidth", "type": "field", "idx": 12601, "Desc": "the width of the source image ."}{"node_name": "srcHeight", "type": "field", "idx": 12602, "Desc": "the height of the source image ."}{"node_name": "destWidth", "type": "field", "idx": 12603, "Desc": "the target width to scale the image ."}{"node_name": "destHeight", "type": "field", "idx": 12604, "Desc": "the target height to scale the image ."}{"node_name": "srcrows", "type": "field", "idx": 12605, "Desc": "an int array containing information about a row of pixels ."}{"node_name": "srccols", "type": "field", "idx": 12606, "Desc": "an int array containing information about a column of pixels ."}{"node_name": "outpixbuf", "type": "field", "idx": 12607, "Desc": "a byte array initialized with a size of destwidth and used to deliver a row of pixel data to the imageconsumer ."}{"node_name": "origmodel", "type": "field", "idx": 12668, "Desc": "the colormodel to be replaced by newmodel when the user calls substitutecolormodel ."}{"node_name": "newmodel", "type": "field", "idx": 12669, "Desc": "the colormodel with which to replace origmodel when the user calls substitutecolormodel ."}{"node_name": "canFilterIndexColorModel", "type": "field", "idx": 12670, "Desc": "this boolean indicates whether or not it is acceptable to apply the color filtering of the filterrgb method to the color table entries of an indexcolormodel object in lieu of pixel by pixel filtering . subclasses should set this variable to true in their constructor if their filterrgb method does not depend on the coordinate of the pixel being filtered ."}{"node_name": "width", "type": "field", "idx": 12710, "Desc": "width in pixels of the region of image data that this samplemodel describes ."}{"node_name": "height", "type": "field", "idx": 12711, "Desc": "height in pixels of the region of image data that this samplemodel describes ."}{"node_name": "numBands", "type": "field", "idx": 12712, "Desc": "number of bands of the image data that this samplemodel describes ."}{"node_name": "dataType", "type": "field", "idx": 12713, "Desc": "data type of the databuffer storing the pixel data ."}{"node_name": "IMAGE_OK", "type": "field", "idx": 13021, "Desc": "validated image is ready to use as-is ."}{"node_name": "IMAGE_RESTORED", "type": "field", "idx": 13022, "Desc": "validated image has been restored and is now ready to use . note that restoration causes contents of the image to be lost ."}{"node_name": "IMAGE_INCOMPATIBLE", "type": "field", "idx": 13023, "Desc": "validated image is incompatible with supplied graphicsconfiguration object and should be re-created as appropriate . usage of the image as-is after receiving this return code from validate is undefined ."}{"node_name": "transparency", "type": "field", "idx": 13024, "Desc": "the transparency value with which this image was created ."}{"node_name": "top", "type": "field", "idx": 13174, "Desc": "the inset from the top . this value is added to the top of the rectangle to yield a new location for the top ."}{"node_name": "left", "type": "field", "idx": 13175, "Desc": "the inset from the left . this value is added to the left of the rectangle to yield a new location for the left edge ."}{"node_name": "bottom", "type": "field", "idx": 13176, "Desc": "the inset from the bottom . this value is subtracted from the bottom of the rectangle to yield a new location for the bottom ."}{"node_name": "right", "type": "field", "idx": 13177, "Desc": "the inset from the right . this value is subtracted from the right of the rectangle to yield a new location for the right edge ."}{"node_name": "ALL", "type": "field", "idx": 13200, "Desc": "the defaultselectiontype instance to use for specifying that all pages of the job should be printed ."}{"node_name": "RANGE", "type": "field", "idx": 13201, "Desc": "the defaultselectiontype instance to use for specifying that a range of pages of the job should be printed ."}{"node_name": "SELECTION", "type": "field", "idx": 13202, "Desc": "the defaultselectiontype instance to use for specifying that the current selection should be printed ."}{"node_name": "FILE", "type": "field", "idx": 13206, "Desc": "the destinationtype instance to use for specifying print to file ."}{"node_name": "PRINTER", "type": "field", "idx": 13207, "Desc": "the destinationtype instance to use for specifying print to printer ."}{"node_name": "COMMON", "type": "field", "idx": 13211, "Desc": "the dialogtype instance to use for specifying the cross-platform , pure java print dialog ."}{"node_name": "NATIVE", "type": "field", "idx": 13212, "Desc": "the dialogtype instance to use for specifying the platform's native print dialog ."}{"node_name": "NONE", "type": "field", "idx": 13213, "Desc": "the dialogtype instance to use for specifying no print dialog ."}{"node_name": "SEPARATE_DOCUMENTS_COLLATED_COPIES", "type": "field", "idx": 13282, "Desc": "the multipledocumenthandlingtype instance to use for specifying that the job should be divided into separate , collated copies ."}{"node_name": "SEPARATE_DOCUMENTS_UNCOLLATED_COPIES", "type": "field", "idx": 13283, "Desc": "the multipledocumenthandlingtype instance to use for specifying that the job should be divided into separate , uncollated copies ."}{"node_name": "ONE_SIDED", "type": "field", "idx": 13287, "Desc": "the sidestype instance to use for specifying that consecutive job pages should be printed upon the same side of consecutive media sheets ."}{"node_name": "TWO_SIDED_LONG_EDGE", "type": "field", "idx": 13288, "Desc": "the sidestype instance to use for specifying that consecutive job pages should be printed upon front and back sides of consecutive media sheets , such that the orientation of each pair of pages on the medium would be correct for the reader as if for binding on the long edge ."}{"node_name": "TWO_SIDED_SHORT_EDGE", "type": "field", "idx": 13289, "Desc": "the sidestype instance to use for specifying that consecutive job pages should be printed upon front and back sides of consecutive media sheets , such that the orientation of each pair of pages on the medium would be correct for the reader as if for binding on the short edge ."}{"node_name": "FORWARD_TRAVERSAL_KEYS", "type": "field", "idx": 13293, "Desc": "the identifier for the forward focus traversal keys ."}{"node_name": "BACKWARD_TRAVERSAL_KEYS", "type": "field", "idx": 13294, "Desc": "the identifier for the backward focus traversal keys ."}{"node_name": "UP_CYCLE_TRAVERSAL_KEYS", "type": "field", "idx": 13295, "Desc": "the identifier for the up cycle focus traversal keys ."}{"node_name": "DOWN_CYCLE_TRAVERSAL_KEYS", "type": "field", "idx": 13296, "Desc": "the identifier for the down cycle focus traversal keys ."}{"node_name": "LEFT", "type": "field", "idx": 13418, "Desc": "indicates that the label should be left justified ."}{"node_name": "CENTER", "type": "field", "idx": 13419, "Desc": "indicates that the label should be centered ."}{"node_name": "RIGHT", "type": "field", "idx": 13420, "Desc": "indicates that the label should be right justified ."}{"node_name": "LOADING", "type": "field", "idx": 13648, "Desc": "flag indicating that media is currently being loaded ."}{"node_name": "ABORTED", "type": "field", "idx": 13649, "Desc": "flag indicating that the downloading of media was aborted ."}{"node_name": "ERRORED", "type": "field", "idx": 13650, "Desc": "flag indicating that the downloading of media encountered an error ."}{"node_name": "COMPLETE", "type": "field", "idx": 13651, "Desc": "flag indicating that the downloading of media was completed successfully ."}{"node_name": "COLOR", "type": "field", "idx": 13936, "Desc": "the colortype instance to use for specifying color printing ."}{"node_name": "MONOCHROME", "type": "field", "idx": 13937, "Desc": "the colortype instance to use for specifying monochrome printing ."}{"node_name": "ISO_4A0", "type": "field", "idx": 13987, "Desc": "the mediatype instance for iso / din and jis 4a0 , 1682 x 2378 mm ."}{"node_name": "ISO_2A0", "type": "field", "idx": 13988, "Desc": "the mediatype instance for iso / din and jis 2a0 , 1189 x 1682 mm ."}{"node_name": "ISO_A0", "type": "field", "idx": 13989, "Desc": "the mediatype instance for iso / din and jis a0 , 841 x 1189 mm ."}{"node_name": "ISO_A1", "type": "field", "idx": 13990, "Desc": "the mediatype instance for iso / din and jis a1 , 594 x 841 mm ."}{"node_name": "ISO_A2", "type": "field", "idx": 13991, "Desc": "the mediatype instance for iso / din and jis a2 , 420 x 594 mm ."}{"node_name": "ISO_A3", "type": "field", "idx": 13992, "Desc": "the mediatype instance for iso / din and jis a3 , 297 x 420 mm ."}{"node_name": "ISO_A4", "type": "field", "idx": 13993, "Desc": "the mediatype instance for iso / din and jis a4 , 210 x 297 mm ."}{"node_name": "ISO_A5", "type": "field", "idx": 13994, "Desc": "the mediatype instance for iso / din and jis a5 , 148 x 210 mm ."}{"node_name": "ISO_A6", "type": "field", "idx": 13995, "Desc": "the mediatype instance for iso / din and jis a6 , 105 x 148 mm ."}{"node_name": "ISO_A7", "type": "field", "idx": 13996, "Desc": "the mediatype instance for iso / din and jis a7 , 74 x 105 mm ."}{"node_name": "ISO_A8", "type": "field", "idx": 13997, "Desc": "the mediatype instance for iso / din and jis a8 , 52 x 74 mm ."}{"node_name": "ISO_A9", "type": "field", "idx": 13998, "Desc": "the mediatype instance for iso / din and jis a9 , 37 x 52 mm ."}{"node_name": "ISO_A10", "type": "field", "idx": 13999, "Desc": "the mediatype instance for iso / din and jis a10 , 26 x 37 mm ."}{"node_name": "ISO_B0", "type": "field", "idx": 14000, "Desc": "the mediatype instance for iso / din b0 , 1000 x 1414 mm ."}{"node_name": "ISO_B1", "type": "field", "idx": 14001, "Desc": "the mediatype instance for iso / din b1 , 707 x 1000 mm ."}{"node_name": "ISO_B2", "type": "field", "idx": 14002, "Desc": "the mediatype instance for iso / din b2 , 500 x 707 mm ."}{"node_name": "ISO_B3", "type": "field", "idx": 14003, "Desc": "the mediatype instance for iso / din b3 , 353 x 500 mm ."}{"node_name": "ISO_B4", "type": "field", "idx": 14004, "Desc": "the mediatype instance for iso / din b4 , 250 x 353 mm ."}{"node_name": "ISO_B5", "type": "field", "idx": 14005, "Desc": "the mediatype instance for iso / din b5 , 176 x 250 mm ."}{"node_name": "ISO_B6", "type": "field", "idx": 14006, "Desc": "the mediatype instance for iso / din b6 , 125 x 176 mm ."}{"node_name": "ISO_B7", "type": "field", "idx": 14007, "Desc": "the mediatype instance for iso / din b7 , 88 x 125 mm ."}{"node_name": "ISO_B8", "type": "field", "idx": 14008, "Desc": "the mediatype instance for iso / din b8 , 62 x 88 mm ."}{"node_name": "ISO_B9", "type": "field", "idx": 14009, "Desc": "the mediatype instance for iso / din b9 , 44 x 62 mm ."}{"node_name": "ISO_B10", "type": "field", "idx": 14010, "Desc": "the mediatype instance for iso / din b10 , 31 x 44 mm ."}{"node_name": "JIS_B0", "type": "field", "idx": 14011, "Desc": "the mediatype instance for jis b0 , 1030 x 1456 mm ."}{"node_name": "JIS_B1", "type": "field", "idx": 14012, "Desc": "the mediatype instance for jis b1 , 728 x 1030 mm ."}{"node_name": "JIS_B2", "type": "field", "idx": 14013, "Desc": "the mediatype instance for jis b2 , 515 x 728 mm ."}{"node_name": "JIS_B3", "type": "field", "idx": 14014, "Desc": "the mediatype instance for jis b3 , 364 x 515 mm ."}{"node_name": "JIS_B4", "type": "field", "idx": 14015, "Desc": "the mediatype instance for jis b4 , 257 x 364 mm ."}{"node_name": "JIS_B5", "type": "field", "idx": 14016, "Desc": "the mediatype instance for jis b5 , 182 x 257 mm ."}{"node_name": "JIS_B6", "type": "field", "idx": 14017, "Desc": "the mediatype instance for jis b6 , 128 x 182 mm ."}{"node_name": "JIS_B7", "type": "field", "idx": 14018, "Desc": "the mediatype instance for jis b7 , 91 x 128 mm ."}{"node_name": "JIS_B8", "type": "field", "idx": 14019, "Desc": "the mediatype instance for jis b8 , 64 x 91 mm ."}{"node_name": "JIS_B9", "type": "field", "idx": 14020, "Desc": "the mediatype instance for jis b9 , 45 x 64 mm ."}{"node_name": "JIS_B10", "type": "field", "idx": 14021, "Desc": "the mediatype instance for jis b10 , 32 x 45 mm ."}{"node_name": "ISO_C0", "type": "field", "idx": 14022, "Desc": "the mediatype instance for iso / din c0 , 917 x 1297 mm ."}{"node_name": "ISO_C1", "type": "field", "idx": 14023, "Desc": "the mediatype instance for iso / din c1 , 648 x 917 mm ."}{"node_name": "ISO_C2", "type": "field", "idx": 14024, "Desc": "the mediatype instance for iso / din c2 , 458 x 648 mm ."}{"node_name": "ISO_C3", "type": "field", "idx": 14025, "Desc": "the mediatype instance for iso / din c3 , 324 x 458 mm ."}{"node_name": "ISO_C4", "type": "field", "idx": 14026, "Desc": "the mediatype instance for iso / din c4 , 229 x 324 mm ."}{"node_name": "ISO_C5", "type": "field", "idx": 14027, "Desc": "the mediatype instance for iso / din c5 , 162 x 229 mm ."}{"node_name": "ISO_C6", "type": "field", "idx": 14028, "Desc": "the mediatype instance for iso / din c6 , 114 x 162 mm ."}{"node_name": "ISO_C7", "type": "field", "idx": 14029, "Desc": "the mediatype instance for iso / din c7 , 81 x 114 mm ."}{"node_name": "ISO_C8", "type": "field", "idx": 14030, "Desc": "the mediatype instance for iso / din c8 , 57 x 81 mm ."}{"node_name": "ISO_C9", "type": "field", "idx": 14031, "Desc": "the mediatype instance for iso / din c9 , 40 x 57 mm ."}{"node_name": "ISO_C10", "type": "field", "idx": 14032, "Desc": "the mediatype instance for iso / din c10 , 28 x 40 mm ."}{"node_name": "ISO_DESIGNATED_LONG", "type": "field", "idx": 14033, "Desc": "the mediatype instance for iso designated long , 110 x 220 mm ."}{"node_name": "EXECUTIVE", "type": "field", "idx": 14034, "Desc": "the mediatype instance for executive , 7 1 / 4 x 10 1 / 2 in ."}{"node_name": "FOLIO", "type": "field", "idx": 14035, "Desc": "the mediatype instance for folio , 8 1 / 2 x 13 in ."}{"node_name": "INVOICE", "type": "field", "idx": 14036, "Desc": "the mediatype instance for invoice , 5 1 / 2 x 8 1 / 2 in ."}{"node_name": "LEDGER", "type": "field", "idx": 14037, "Desc": "the mediatype instance for ledger , 11 x 17 in ."}{"node_name": "NA_LETTER", "type": "field", "idx": 14038, "Desc": "the mediatype instance for north american letter , 8 1 / 2 x 11 in ."}{"node_name": "NA_LEGAL", "type": "field", "idx": 14039, "Desc": "the mediatype instance for north american legal , 8 1 / 2 x 14 in ."}{"node_name": "QUARTO", "type": "field", "idx": 14040, "Desc": "the mediatype instance for quarto , 215 x 275 mm ."}{"node_name": "A", "type": "field", "idx": 14041, "Desc": "the mediatype instance for engineering a , 8 1 / 2 x 11 in ."}{"node_name": "B", "type": "field", "idx": 14042, "Desc": "the mediatype instance for engineering b , 11 x 17 in ."}{"node_name": "C", "type": "field", "idx": 14043, "Desc": "the mediatype instance for engineering c , 17 x 22 in ."}{"node_name": "D", "type": "field", "idx": 14044, "Desc": "the mediatype instance for engineering d , 22 x 34 in ."}{"node_name": "E", "type": "field", "idx": 14045, "Desc": "the mediatype instance for engineering e , 34 x 44 in ."}{"node_name": "NA_10X15_ENVELOPE", "type": "field", "idx": 14046, "Desc": "the mediatype instance for north american 10 x 15 in ."}{"node_name": "NA_10X14_ENVELOPE", "type": "field", "idx": 14047, "Desc": "the mediatype instance for north american 10 x 14 in ."}{"node_name": "NA_10X13_ENVELOPE", "type": "field", "idx": 14048, "Desc": "the mediatype instance for north american 10 x 13 in ."}{"node_name": "NA_9X12_ENVELOPE", "type": "field", "idx": 14049, "Desc": "the mediatype instance for north american 9 x 12 in ."}{"node_name": "NA_9X11_ENVELOPE", "type": "field", "idx": 14050, "Desc": "the mediatype instance for north american 9 x 11 in ."}{"node_name": "NA_7X9_ENVELOPE", "type": "field", "idx": 14051, "Desc": "the mediatype instance for north american 7 x 9 in ."}{"node_name": "NA_6X9_ENVELOPE", "type": "field", "idx": 14052, "Desc": "the mediatype instance for north american 6 x 9 in ."}{"node_name": "NA_NUMBER_9_ENVELOPE", "type": "field", "idx": 14053, "Desc": "the mediatype instance for north american #9 business envelope , 3 7 / 8 x 8 7 / 8 in ."}{"node_name": "NA_NUMBER_10_ENVELOPE", "type": "field", "idx": 14054, "Desc": "the mediatype instance for north american #10 business envelope , 4 1 / 8 x 9 1 / 2 in ."}{"node_name": "NA_NUMBER_11_ENVELOPE", "type": "field", "idx": 14055, "Desc": "the mediatype instance for north american #11 business envelope , 4 1 / 2 x 10 3 / 8 in ."}{"node_name": "NA_NUMBER_12_ENVELOPE", "type": "field", "idx": 14056, "Desc": "the mediatype instance for north american #12 business envelope , 4 3 / 4 x 11 in ."}{"node_name": "NA_NUMBER_14_ENVELOPE", "type": "field", "idx": 14057, "Desc": "the mediatype instance for north american #14 business envelope , 5 x 11 1 / 2 in ."}{"node_name": "INVITE_ENVELOPE", "type": "field", "idx": 14058, "Desc": "the mediatype instance for invitation envelope , 220 x 220 mm ."}{"node_name": "ITALY_ENVELOPE", "type": "field", "idx": 14059, "Desc": "the mediatype instance for italy envelope , 110 x 230 mm ."}{"node_name": "MONARCH_ENVELOPE", "type": "field", "idx": 14060, "Desc": "the mediatype instance for monarch envelope , 3 7 / 8 x 7 1 / 2 in ."}{"node_name": "PERSONAL_ENVELOPE", "type": "field", "idx": 14061, "Desc": "the mediatype instance for 6 3 / 4 envelope , 3 5 / 8 x 6 1 / 2 in ."}{"node_name": "A0", "type": "field", "idx": 14062, "Desc": "an alias for iso_a0 ."}{"node_name": "A1", "type": "field", "idx": 14063, "Desc": "an alias for iso_a1 ."}{"node_name": "A2", "type": "field", "idx": 14064, "Desc": "an alias for iso_a2 ."}{"node_name": "A3", "type": "field", "idx": 14065, "Desc": "an alias for iso_a3 ."}{"node_name": "A4", "type": "field", "idx": 14066, "Desc": "an alias for iso_a4 ."}{"node_name": "A5", "type": "field", "idx": 14067, "Desc": "an alias for iso_a5 ."}{"node_name": "A6", "type": "field", "idx": 14068, "Desc": "an alias for iso_a6 ."}{"node_name": "A7", "type": "field", "idx": 14069, "Desc": "an alias for iso_a7 ."}{"node_name": "A8", "type": "field", "idx": 14070, "Desc": "an alias for iso_a8 ."}{"node_name": "A9", "type": "field", "idx": 14071, "Desc": "an alias for iso_a9 ."}{"node_name": "A10", "type": "field", "idx": 14072, "Desc": "an alias for iso_a10 ."}{"node_name": "B0", "type": "field", "idx": 14073, "Desc": "an alias for iso_b0 ."}{"node_name": "B1", "type": "field", "idx": 14074, "Desc": "an alias for iso_b1 ."}{"node_name": "B2", "type": "field", "idx": 14075, "Desc": "an alias for iso_b2 ."}{"node_name": "B3", "type": "field", "idx": 14076, "Desc": "an alias for iso_b3 ."}{"node_name": "B4", "type": "field", "idx": 14077, "Desc": "an alias for iso_b4 ."}{"node_name": "ISO_B4_ENVELOPE", "type": "field", "idx": 14078, "Desc": "an alias for iso_b4 ."}{"node_name": "B5", "type": "field", "idx": 14079, "Desc": "an alias for iso_b5 ."}{"node_name": "ISO_B5_ENVELOPE", "type": "field", "idx": 14080, "Desc": "an alias for iso_b5 ."}{"node_name": "B6", "type": "field", "idx": 14081, "Desc": "an alias for iso_b6 ."}{"node_name": "B7", "type": "field", "idx": 14082, "Desc": "an alias for iso_b7 ."}{"node_name": "B8", "type": "field", "idx": 14083, "Desc": "an alias for iso_b8 ."}{"node_name": "B9", "type": "field", "idx": 14084, "Desc": "an alias for iso_b9 ."}{"node_name": "B10", "type": "field", "idx": 14085, "Desc": "an alias for iso_b10 ."}{"node_name": "C0", "type": "field", "idx": 14086, "Desc": "an alias for iso_c0 ."}{"node_name": "ISO_C0_ENVELOPE", "type": "field", "idx": 14087, "Desc": "an alias for iso_c0 ."}{"node_name": "C1", "type": "field", "idx": 14088, "Desc": "an alias for iso_c1 ."}{"node_name": "ISO_C1_ENVELOPE", "type": "field", "idx": 14089, "Desc": "an alias for iso_c1 ."}{"node_name": "C2", "type": "field", "idx": 14090, "Desc": "an alias for iso_c2 ."}{"node_name": "ISO_C2_ENVELOPE", "type": "field", "idx": 14091, "Desc": "an alias for iso_c2 ."}{"node_name": "C3", "type": "field", "idx": 14092, "Desc": "an alias for iso_c3 ."}{"node_name": "ISO_C3_ENVELOPE", "type": "field", "idx": 14093, "Desc": "an alias for iso_c3 ."}{"node_name": "C4", "type": "field", "idx": 14094, "Desc": "an alias for iso_c4 ."}{"node_name": "ISO_C4_ENVELOPE", "type": "field", "idx": 14095, "Desc": "an alias for iso_c4 ."}{"node_name": "C5", "type": "field", "idx": 14096, "Desc": "an alias for iso_c5 ."}{"node_name": "ISO_C5_ENVELOPE", "type": "field", "idx": 14097, "Desc": "an alias for iso_c5 ."}{"node_name": "C6", "type": "field", "idx": 14098, "Desc": "an alias for iso_c6 ."}{"node_name": "ISO_C6_ENVELOPE", "type": "field", "idx": 14099, "Desc": "an alias for iso_c6 ."}{"node_name": "C7", "type": "field", "idx": 14100, "Desc": "an alias for iso_c7 ."}{"node_name": "ISO_C7_ENVELOPE", "type": "field", "idx": 14101, "Desc": "an alias for iso_c7 ."}{"node_name": "C8", "type": "field", "idx": 14102, "Desc": "an alias for iso_c8 ."}{"node_name": "ISO_C8_ENVELOPE", "type": "field", "idx": 14103, "Desc": "an alias for iso_c8 ."}{"node_name": "C9", "type": "field", "idx": 14104, "Desc": "an alias for iso_c9 ."}{"node_name": "ISO_C9_ENVELOPE", "type": "field", "idx": 14105, "Desc": "an alias for iso_c9 ."}{"node_name": "C10", "type": "field", "idx": 14106, "Desc": "an alias for iso_c10 ."}{"node_name": "ISO_C10_ENVELOPE", "type": "field", "idx": 14107, "Desc": "an alias for iso_c10 ."}{"node_name": "ISO_DESIGNATED_LONG_ENVELOPE", "type": "field", "idx": 14108, "Desc": "an alias for iso_designated_long ."}{"node_name": "STATEMENT", "type": "field", "idx": 14109, "Desc": "an alias for invoice ."}{"node_name": "TABLOID", "type": "field", "idx": 14110, "Desc": "an alias for ledger ."}{"node_name": "LETTER", "type": "field", "idx": 14111, "Desc": "an alias for na_letter ."}{"node_name": "NOTE", "type": "field", "idx": 14112, "Desc": "an alias for na_letter ."}{"node_name": "LEGAL", "type": "field", "idx": 14113, "Desc": "an alias for na_legal ."}{"node_name": "ENV_10X15", "type": "field", "idx": 14114, "Desc": "an alias for na_10x15_envelope ."}{"node_name": "ENV_10X14", "type": "field", "idx": 14115, "Desc": "an alias for na_10x14_envelope ."}{"node_name": "ENV_10X13", "type": "field", "idx": 14116, "Desc": "an alias for na_10x13_envelope ."}{"node_name": "ENV_9X12", "type": "field", "idx": 14117, "Desc": "an alias for na_9x12_envelope ."}{"node_name": "ENV_9X11", "type": "field", "idx": 14118, "Desc": "an alias for na_9x11_envelope ."}{"node_name": "ENV_7X9", "type": "field", "idx": 14119, "Desc": "an alias for na_7x9_envelope ."}{"node_name": "ENV_6X9", "type": "field", "idx": 14120, "Desc": "an alias for na_6x9_envelope ."}{"node_name": "ENV_9", "type": "field", "idx": 14121, "Desc": "an alias for na_number_9_envelope ."}{"node_name": "ENV_10", "type": "field", "idx": 14122, "Desc": "an alias for na_number_10_envelope ."}{"node_name": "ENV_11", "type": "field", "idx": 14123, "Desc": "an alias for na_number_11_envelope ."}{"node_name": "ENV_12", "type": "field", "idx": 14124, "Desc": "an alias for na_number_12_envelope ."}{"node_name": "ENV_14", "type": "field", "idx": 14125, "Desc": "an alias for na_number_14_envelope ."}{"node_name": "ENV_INVITE", "type": "field", "idx": 14126, "Desc": "an alias for invite_envelope ."}{"node_name": "ENV_ITALY", "type": "field", "idx": 14127, "Desc": "an alias for italy_envelope ."}{"node_name": "ENV_MONARCH", "type": "field", "idx": 14128, "Desc": "an alias for monarch_envelope ."}{"node_name": "ENV_PERSONAL", "type": "field", "idx": 14129, "Desc": "an alias for personal_envelope ."}{"node_name": "INVITE", "type": "field", "idx": 14130, "Desc": "an alias for invite_envelope ."}{"node_name": "ITALY", "type": "field", "idx": 14131, "Desc": "an alias for italy_envelope ."}{"node_name": "MONARCH", "type": "field", "idx": 14132, "Desc": "an alias for monarch_envelope ."}{"node_name": "PERSONAL", "type": "field", "idx": 14133, "Desc": "an alias for personal_envelope ."}{"node_name": "PORTRAIT", "type": "field", "idx": 14137, "Desc": "the orientationrequestedtype instance to use for specifying a portrait orientation ."}{"node_name": "LANDSCAPE", "type": "field", "idx": 14138, "Desc": "the orientationrequestedtype instance to use for specifying a landscape orientation ."}{"node_name": "PHYSICAL", "type": "field", "idx": 14142, "Desc": "the origintype instance to use for specifying a physical origin ."}{"node_name": "PRINTABLE", "type": "field", "idx": 14143, "Desc": "the origintype instance to use for specifying a printable origin ."}{"node_name": "HIGH", "type": "field", "idx": 14147, "Desc": "the printqualitytype instance to use for specifying a high print quality ."}{"node_name": "NORMAL", "type": "field", "idx": 14148, "Desc": "the printqualitytype instance to use for specifying a normal print quality ."}{"node_name": "DRAFT", "type": "field", "idx": 14149, "Desc": "the printqualitytype instance to use for specifying a draft print quality ."}{"node_name": "x", "type": "field", "idx": 14177, "Desc": "the x coordinate of this point . if no x coordinate is set it will default to 0 ."}{"node_name": "y", "type": "field", "idx": 14178, "Desc": "the y coordinate of this point . if no y coordinate is set it will default to 0 ."}{"node_name": "npoints", "type": "field", "idx": 14209, "Desc": "the total number of points . the value of npoints represents the number of valid points in this polygon and might be less than the number of elements in xpoints or ypoints . this value can be 0 ."}{"node_name": "xpoints", "type": "field", "idx": 14210, "Desc": "the array of x coordinates . the number of elements in this array might be more than the number of x coordinates in this polygon . the extra elements allow new points to be added to this polygon without re-creating this array . the value of npoints is equal to the number of valid points in this polygon ."}{"node_name": "ypoints", "type": "field", "idx": 14211, "Desc": "the array of y coordinates . the number of elements in this array might be more than the number of y coordinates in this polygon . the extra elements allow new points to be added to this polygon without re-creating this array . the value of npoints is equal to the number of valid points in this polygon ."}{"node_name": "bounds", "type": "field", "idx": 14212, "Desc": "the bounds of this polygon . this value can be null ."}{"node_name": "UNKNOWN_NUMBER_OF_PAGES", "type": "field", "idx": 14289, "Desc": "this constant is returned from the getnumberofpages method if a pageable implementation does not know the number of pages in its set ."}{"node_name": "LANDSCAPE", "type": "field", "idx": 14296, "Desc": "the origin is at the bottom left of the paper with x running bottom to top and y running left to right . note that this is not the macintosh landscape but is the window's and postscript landscape ."}{"node_name": "PORTRAIT", "type": "field", "idx": 14297, "Desc": "the origin is at the top left of the paper with x running to the right and y running down the paper ."}{"node_name": "REVERSE_LANDSCAPE", "type": "field", "idx": 14298, "Desc": "the origin is at the top right of the paper with x running top to bottom and y running right to left . note that this is the macintosh landscape ."}{"node_name": "PAGE_EXISTS", "type": "field", "idx": 14332, "Desc": "returned from print ( graphics , pageformat , int ) to signify that the requested page was rendered ."}{"node_name": "NO_SUCH_PAGE", "type": "field", "idx": 14333, "Desc": "returned from print to signify that the pageindex is too large and that the requested page does not exist ."}{"node_name": "x", "type": "field", "idx": 14469, "Desc": "the x coordinate of the upper-left corner of the rectangle ."}{"node_name": "y", "type": "field", "idx": 14470, "Desc": "the y coordinate of the upper-left corner of the rectangle ."}{"node_name": "width", "type": "field", "idx": 14471, "Desc": "the width of the rectangle ."}{"node_name": "height", "type": "field", "idx": 14472, "Desc": "the height of the rectangle ."}{"node_name": "KEY_ANTIALIASING", "type": "field", "idx": 14564, "Desc": "antialiasing hint key . the antialiasing hint controls whether or not the geometry rendering methods of a graphics2d object will attempt to reduce aliasing artifacts along the edges of shapes . a typical antialiasing algorithm works by blending the existing colors of the pixels along the boundary of a shape with the requested fill paint according to the estimated partial pixel coverage of the shape . the allowable values for this hint are value_antialias_on value_antialias_off value_antialias_default"}{"node_name": "VALUE_ANTIALIAS_ON", "type": "field", "idx": 14565, "Desc": "antialiasing hint value -- rendering is done with antialiasing ."}{"node_name": "VALUE_ANTIALIAS_OFF", "type": "field", "idx": 14566, "Desc": "antialiasing hint value -- rendering is done without antialiasing ."}{"node_name": "VALUE_ANTIALIAS_DEFAULT", "type": "field", "idx": 14567, "Desc": "antialiasing hint value -- rendering is done with a default antialiasing mode chosen by the implementation ."}{"node_name": "KEY_RENDERING", "type": "field", "idx": 14568, "Desc": "rendering hint key . the rendering hint is a general hint that provides a high level recommendation as to whether to bias algorithm choices more for speed or quality when evaluating tradeoffs . this hint could be consulted for any rendering or image manipulation operation , but decisions will usually honor other , more specific hints in preference to this hint . the allowable values for this hint are value_render_speed value_render_quality value_render_default"}{"node_name": "VALUE_RENDER_SPEED", "type": "field", "idx": 14569, "Desc": "rendering hint value -- rendering algorithms are chosen with a preference for output speed ."}{"node_name": "VALUE_RENDER_QUALITY", "type": "field", "idx": 14570, "Desc": "rendering hint value -- rendering algorithms are chosen with a preference for output quality ."}{"node_name": "VALUE_RENDER_DEFAULT", "type": "field", "idx": 14571, "Desc": "rendering hint value -- rendering algorithms are chosen by the implementation for a good tradeoff of performance vs . quality ."}{"node_name": "KEY_DITHERING", "type": "field", "idx": 14572, "Desc": "dithering hint key . the dithering hint controls how closely to approximate a color when storing into a destination with limited color resolution . some rendering destinations may support a limited number of color choices which may not be able to accurately represent the full spectrum of colors that can result during rendering operations . for such a destination the dithering hint controls whether rendering is done with a flat solid fill of a single pixel value which is the closest supported color to what was requested , or whether shapes will be filled with a pattern of colors which combine to better approximate that color . the allowable values for this hint are value_dither_disable value_dither_enable value_dither_default"}{"node_name": "VALUE_DITHER_DISABLE", "type": "field", "idx": 14573, "Desc": "dithering hint value -- do not dither when rendering geometry ."}{"node_name": "VALUE_DITHER_ENABLE", "type": "field", "idx": 14574, "Desc": "dithering hint value -- dither when rendering geometry , if needed ."}{"node_name": "VALUE_DITHER_DEFAULT", "type": "field", "idx": 14575, "Desc": "dithering hint value -- use a default for dithering chosen by the implementation ."}{"node_name": "KEY_TEXT_ANTIALIASING", "type": "field", "idx": 14576, "Desc": "text antialiasing hint key . the text_antialiasing hint can control the use of antialiasing algorithms for text independently of the choice used for shape rendering . often an application may want to use antialiasing for text only and not for other shapes . additionally , the algorithms for reducing the aliasing artifacts for text are often more sophisticated than those that have been developed for general rendering so this hint key provides additional values which can control the choices of some of those text-specific algorithms . if left in the default state , this hint will generally defer to the value of the regular key_antialiasing hint key . the allowable values for this hint are value_text_antialias_on value_text_antialias_off value_text_antialias_default value_text_antialias_gasp value_text_antialias_lcd_hrgb value_text_antialias_lcd_hbgr value_text_antialias_lcd_vrgb value_text_antialias_lcd_vbgr"}{"node_name": "VALUE_TEXT_ANTIALIAS_ON", "type": "field", "idx": 14577, "Desc": "text antialiasing hint value -- text rendering is done with some form of antialiasing ."}{"node_name": "VALUE_TEXT_ANTIALIAS_OFF", "type": "field", "idx": 14578, "Desc": "text antialiasing hint value -- text rendering is done without any form of antialiasing ."}{"node_name": "VALUE_TEXT_ANTIALIAS_DEFAULT", "type": "field", "idx": 14579, "Desc": "text antialiasing hint value -- text rendering is done according to the key_antialiasing hint or a default chosen by the implementation ."}{"node_name": "VALUE_TEXT_ANTIALIAS_GASP", "type": "field", "idx": 14580, "Desc": "text antialiasing hint value -- text rendering is requested to use information in the font resource which specifies for each point size whether to apply value_text_antialias_on or value_text_antialias_off . truetype fonts typically provide this information in the ' gasp ' table . in the absence of this information , the behaviour for a particular font and size is determined by implementation defaults . note : a font designer will typically carefully hint a font for the most common user interface point sizes . consequently the ' gasp ' table will likely specify to use only hinting at those sizes and not \" smoothing \" . so in many cases the resulting text display is equivalent to value_text_antialias_off . this may be unexpected but is correct . logical fonts which are composed of multiple physical fonts will for consistency will use the setting most appropriate for the overall composite font ."}{"node_name": "VALUE_TEXT_ANTIALIAS_LCD_HRGB", "type": "field", "idx": 14581, "Desc": "text antialiasing hint value -- request that text be displayed optimised for an lcd display with subpixels in order from display left to right of r , g , b such that the horizontal subpixel resolution is three times that of the full pixel horizontal resolution ( hrgb ) . this is the most common configuration . selecting this hint for displays with one of the other lcd subpixel configurations will likely result in unfocused text . notes : an implementation when choosing whether to apply any of the lcd text hint values may take into account factors including requiring color depth of the destination to be at least 15 bits per pixel ( ie 5 bits per color component ) , characteristics of a font such as whether embedded bitmaps may produce better results , or when displaying to a non-local networked display device enabling it only if suitable protocols are available , or ignoring the hint if performing very high resolution rendering or the target device is not appropriate : eg when printing . these hints can equally be applied when rendering to software images , but these images may not then be suitable for general export , as the text will have been rendered appropriately for a specific subpixel organisation . also lossy images are not a good choice , nor image formats such as gif which have limited colors . so unless the image is destined solely for rendering on a display device with the same configuration , some other text anti-aliasing hint such as value_text_antialias_on may be a better choice . selecting a value which does not match the lcd display in use will likely lead to a degradation in text quality . on display devices ( ie crts ) which do not have the same characteristics as lcd displays , the overall effect may appear similar to standard text anti-aliasing , but the quality may be degraded by color distortion . analog connected lcd displays may also show little advantage over standard text-antialiasing and be similar to crts . in other words for the best results use an lcd display with a digital display connector and specify the appropriate sub-pixel configuration ."}{"node_name": "VALUE_TEXT_ANTIALIAS_LCD_HBGR", "type": "field", "idx": 14582, "Desc": "text antialiasing hint value -- request that text be displayed optimised for an lcd display with subpixels in order from display left to right of b , g , r such that the horizontal subpixel resolution is three times that of the full pixel horizontal resolution ( hbgr ) . this is a much less common configuration than hrgb . selecting this hint for displays with one of the other lcd subpixel configurations will likely result in unfocused text . see value_text_antialias_lcd_hrgb , for more information on when this hint is applied ."}{"node_name": "VALUE_TEXT_ANTIALIAS_LCD_VRGB", "type": "field", "idx": 14583, "Desc": "text antialiasing hint value -- request that text be displayed optimised for an lcd display with subpixel organisation from display top to bottom of r , g , b such that the vertical subpixel resolution is three times that of the full pixel vertical resolution ( vrgb ) . vertical orientation is very uncommon and probably mainly useful for a physically rotated display . selecting this hint for displays with one of the other lcd subpixel configurations will likely result in unfocused text . see value_text_antialias_lcd_hrgb , for more information on when this hint is applied ."}{"node_name": "VALUE_TEXT_ANTIALIAS_LCD_VBGR", "type": "field", "idx": 14584, "Desc": "text antialiasing hint value -- request that text be displayed optimised for an lcd display with subpixel organisation from display top to bottom of b , g , r such that the vertical subpixel resolution is three times that of the full pixel vertical resolution ( vbgr ) . vertical orientation is very uncommon and probably mainly useful for a physically rotated display . selecting this hint for displays with one of the other lcd subpixel configurations will likely result in unfocused text . see value_text_antialias_lcd_hrgb , for more information on when this hint is applied ."}{"node_name": "KEY_TEXT_LCD_CONTRAST", "type": "field", "idx": 14585, "Desc": "lcd text contrast rendering hint key . the value is an integer object which is used as a text contrast adjustment when used in conjunction with an lcd text anti-aliasing hint such as value_text_antialias_lcd_hrgb . values should be a positive integer in the range 100 to 250 . a lower value ( eg 100 ) corresponds to higher contrast text when displaying dark text on a light background . a higher value ( eg 200 ) corresponds to lower contrast text when displaying dark text on a light background . a typical useful value is in the narrow range 140-180 . if no value is specified , a system or implementation default value will be applied . the default value can be expected to be adequate for most purposes , so clients should rarely need to specify a value for this hint unless they have concrete information as to an appropriate value . a higher value does not mean a higher contrast , in fact the opposite is true . the correction is applied in a similar manner to a gamma adjustment for non-linear perceptual luminance response of display systems , but does not indicate a full correction for this ."}{"node_name": "KEY_FRACTIONALMETRICS", "type": "field", "idx": 14586, "Desc": "font fractional metrics hint key . the fractionalmetrics hint controls whether the positioning of individual character glyphs takes into account the sub-pixel accuracy of the scaled character advances of the font or whether such advance vectors are rounded to an integer number of whole device pixels . this hint only recommends how much accuracy should be used to position the glyphs and does not specify or recommend whether or not the actual rasterization or pixel bounds of the glyph should be modified to match . rendering text to a low resolution device like a screen will necessarily involve a number of rounding operations as the high quality and very precise definition of the shape and metrics of the character glyphs must be matched to discrete device pixels . ideally the positioning of glyphs during text layout would be calculated by scaling the design metrics in the font according to the point size , but then the scaled advance width will not necessarily be an integer number of pixels . if the glyphs are positioned with sub-pixel accuracy according to these scaled design metrics then the rasterization would ideally need to be adjusted for each possible sub-pixel origin . unfortunately , scaling each glyph customized to its exact subpixel origin during text layout would be prohibitively expensive so a simplified system based on integer device positions is typically used to lay out the text . the rasterization of the glyph and the scaled advance width are both adjusted together to yield text that looks good at device resolution and has consistent integer pixel distances between glyphs that help the glyphs look uniformly and consistently spaced and readable . this process of rounding advance widths for rasterized glyphs to integer distances means that the character density and the overall length of a string of text will be different from the theoretical design measurements due to the accumulation of a series of small differences in the adjusted widths of each glyph . the specific differences will be different for each glyph , some being wider and some being narrower than their theoretical design measurements . thus the overall difference in character density and length will vary by a number of factors including the font , the specific device resolution being targeted , and the glyphs chosen to represent the string being rendered . as a result , rendering the same string at multiple device resolutions can yield widely varying metrics for whole strings . when fractionalmetrics are enabled , the true font design metrics are scaled by the point size and used for layout with sub-pixel accuracy . the average density of glyphs and total length of a long string of characters will therefore more closely match the theoretical design of the font , but readability may be affected since individual pairs of characters may not always appear to be consistent distances apart depending on how the sub-pixel accumulation of the glyph origins meshes with the device pixel grid . enabling this hint may be desirable when text layout is being performed that must be consistent across a wide variety of output resolutions . specifically , this hint may be desirable in situations where the layout of text is being previewed on a low resolution device like a screen for output that will eventually be rendered on a high resolution printer or typesetting device . when disabled , the scaled design metrics are rounded or adjusted to integer distances for layout . the distances between any specific pair of glyphs will be more uniform on the device , but the density and total length of long strings may no longer match the theoretical intentions of the font designer . disabling this hint will typically produce more readable results on low resolution devices like computer monitors . the allowable values for this key are value_fractionalmetrics_off value_fractionalmetrics_on value_fractionalmetrics_default"}{"node_name": "VALUE_FRACTIONALMETRICS_OFF", "type": "field", "idx": 14587, "Desc": "font fractional metrics hint value -- character glyphs are positioned with advance widths rounded to pixel boundaries ."}{"node_name": "VALUE_FRACTIONALMETRICS_ON", "type": "field", "idx": 14588, "Desc": "font fractional metrics hint value -- character glyphs are positioned with sub-pixel accuracy ."}{"node_name": "VALUE_FRACTIONALMETRICS_DEFAULT", "type": "field", "idx": 14589, "Desc": "font fractional metrics hint value -- character glyphs are positioned with accuracy chosen by the implementation ."}{"node_name": "KEY_INTERPOLATION", "type": "field", "idx": 14590, "Desc": "interpolation hint key . the interpolation hint controls how image pixels are filtered or resampled during an image rendering operation . implicitly images are defined to provide color samples at integer coordinate locations . when images are rendered upright with no scaling onto a destination , the choice of which image pixels map to which device pixels is obvious and the samples at the integer coordinate locations in the image are transferred to the pixels at the corresponding integer locations on the device pixel grid one for one . when images are rendered in a scaled , rotated , or otherwise transformed coordinate system , then the mapping of device pixel coordinates back to the image can raise the question of what color sample to use for the continuous coordinates that lie between the integer locations of the provided image samples . interpolation algorithms define functions which provide a color sample for any continuous coordinate in an image based on the color samples at the surrounding integer coordinates . the allowable values for this hint are value_interpolation_nearest_neighbor value_interpolation_bilinear value_interpolation_bicubic"}{"node_name": "VALUE_INTERPOLATION_NEAREST_NEIGHBOR", "type": "field", "idx": 14591, "Desc": "interpolation hint value -- the color sample of the nearest neighboring integer coordinate sample in the image is used . conceptually the image is viewed as a grid of unit-sized square regions of color centered around the center of each image pixel . as the image is scaled up , it will look correspondingly blocky . as the image is scaled down , the colors for source pixels will be either used unmodified , or skipped entirely in the output representation ."}{"node_name": "VALUE_INTERPOLATION_BILINEAR", "type": "field", "idx": 14592, "Desc": "interpolation hint value -- the color samples of the 4 nearest neighboring integer coordinate samples in the image are interpolated linearly to produce a color sample . conceptually the image is viewed as a set of infinitely small point color samples which have value only at the centers of integer coordinate pixels and the space between those pixel centers is filled with linear ramps of colors that connect adjacent discrete samples in a straight line . as the image is scaled up , there are no blocky edges between the colors in the image as there are with nearest_neighbor , but the blending may show some subtle discontinuities along the horizontal and vertical edges that line up with the samples caused by a sudden change in the slope of the interpolation from one side of a sample to the other . as the image is scaled down , more image pixels have their color samples represented in the resulting output since each output pixel receives color information from up to 4 image pixels ."}{"node_name": "VALUE_INTERPOLATION_BICUBIC", "type": "field", "idx": 14593, "Desc": "interpolation hint value -- the color samples of 9 nearby integer coordinate samples in the image are interpolated using a cubic function in both x and y to produce a color sample . conceptually the view of the image is very similar to the view used in the bilinear algorithm except that the ramps of colors that connect between the samples are curved and have better continuity of slope as they cross over between sample boundaries . as the image is scaled up , there are no blocky edges and the interpolation should appear smoother and with better depictions of any edges in the original image than with bilinear . as the image is scaled down , even more of the original color samples from the original image will have their color information carried through and represented ."}{"node_name": "KEY_ALPHA_INTERPOLATION", "type": "field", "idx": 14594, "Desc": "alpha interpolation hint key . the alpha_interpolation hint is a general hint that provides a high level recommendation as to whether to bias alpha blending algorithm choices more for speed or quality when evaluating tradeoffs . this hint could control the choice of alpha blending calculations that sacrifice some precision to use fast lookup tables or lower precision simd instructions . this hint could also control whether or not the color and alpha values are converted into a linear color space during the calculations for a more linear visual effect at the expense of additional per-pixel calculations . the allowable values for this hint are value_alpha_interpolation_speed value_alpha_interpolation_quality value_alpha_interpolation_default"}{"node_name": "VALUE_ALPHA_INTERPOLATION_SPEED", "type": "field", "idx": 14595, "Desc": "alpha interpolation hint value -- alpha blending algorithms are chosen with a preference for calculation speed ."}{"node_name": "VALUE_ALPHA_INTERPOLATION_QUALITY", "type": "field", "idx": 14596, "Desc": "alpha interpolation hint value -- alpha blending algorithms are chosen with a preference for precision and visual quality ."}{"node_name": "VALUE_ALPHA_INTERPOLATION_DEFAULT", "type": "field", "idx": 14597, "Desc": "alpha interpolation hint value -- alpha blending algorithms are chosen by the implementation for a good tradeoff of performance vs . quality ."}{"node_name": "KEY_COLOR_RENDERING", "type": "field", "idx": 14598, "Desc": "color rendering hint key . the color_rendering hint controls the accuracy of approximation and conversion when storing colors into a destination image or surface . when a rendering or image manipulation operation produces a color value that must be stored into a destination , it must first convert that color into a form suitable for storing into the destination image or surface . minimally , the color components must be converted to bit representations and ordered in the correct order or an index into a color lookup table must be chosen before the data can be stored into the destination memory . without this minimal conversion , the data in the destination would likely represent random , incorrect or possibly even unsupported values . algorithms to quickly convert the results of rendering operations into the color format of most common destinations are well known and fairly optimal to execute . simply performing the most basic color format conversion to store colors into a destination can potentially ignore a difference in the calibration of the colorspace of the source and destination or other factors such as the linearity of the gamma correction . unless the source and destination colorspace are identical , to correctly perform a rendering operation with the most care taken for the accuracy of the colors being represented , the source colors should be converted to a device independent colorspace and the results then converted back to the destination colorspace . furthermore , if calculations such as the blending of multiple source colors are to be performed during the rendering operation , greater visual clarity can be achieved if the intermediate device independent colorspace is chosen to have a linear relationship between the values being calculated and the perception of the human eye to the response curves of the output device . the allowable values for this hint are value_color_render_speed value_color_render_quality value_color_render_default"}{"node_name": "VALUE_COLOR_RENDER_SPEED", "type": "field", "idx": 14599, "Desc": "color rendering hint value -- perform the fastest color conversion to the format of the output device ."}{"node_name": "VALUE_COLOR_RENDER_QUALITY", "type": "field", "idx": 14600, "Desc": "color rendering hint value -- perform the color conversion calculations with the highest accuracy and visual quality ."}{"node_name": "VALUE_COLOR_RENDER_DEFAULT", "type": "field", "idx": 14601, "Desc": "color rendering hint value -- perform color conversion calculations as chosen by the implementation to represent the best available tradeoff between performance and accuracy ."}{"node_name": "KEY_STROKE_CONTROL", "type": "field", "idx": 14602, "Desc": "stroke normalization control hint key . the stroke_control hint controls whether a rendering implementation should or is allowed to modify the geometry of rendered shapes for various purposes . some implementations may be able to use an optimized platform rendering library which may be faster than traditional software rendering algorithms on a given platform , but which may also not support floating point coordinates . some implementations may also have sophisticated algorithms which perturb the coordinates of a path so that wide lines appear more uniform in width and spacing . if an implementation performs any type of modification or \" normalization \" of a path , it should never move the coordinates by more than half a pixel in any direction . the allowable values for this hint are value_stroke_normalize value_stroke_pure value_stroke_default"}{"node_name": "VALUE_STROKE_DEFAULT", "type": "field", "idx": 14603, "Desc": "stroke normalization control hint value -- geometry may be modified or left pure depending on the tradeoffs in a given implementation . typically this setting allows an implementation to use a fast integer coordinate based platform rendering library , but does not specifically request normalization for uniformity or aesthetics ."}{"node_name": "VALUE_STROKE_NORMALIZE", "type": "field", "idx": 14604, "Desc": "stroke normalization control hint value -- geometry should be normalized to improve uniformity or spacing of lines and overall aesthetics . note that different normalization algorithms may be more successful than others for given input paths ."}{"node_name": "VALUE_STROKE_PURE", "type": "field", "idx": 14605, "Desc": "stroke normalization control hint value -- geometry should be left unmodified and rendered with sub-pixel accuracy ."}{"node_name": "KEY_RESOLUTION_VARIANT", "type": "field", "idx": 14606, "Desc": "image resolution variant hint key . the resolution_variant hint controls which image resolution variant should be chosen for image drawing . value_resolution_variant_default value_resolution_variant_base value_resolution_variant_size_fit value_resolution_variant_dpi_fit"}{"node_name": "VALUE_RESOLUTION_VARIANT_DEFAULT", "type": "field", "idx": 14607, "Desc": "image resolution variant hint value -- an image resolution variant is chosen based on a default heuristic which may depend on the policies of the platform"}{"node_name": "VALUE_RESOLUTION_VARIANT_BASE", "type": "field", "idx": 14608, "Desc": "image resolution variant hint value -- the standard resolution of an image is always used ."}{"node_name": "VALUE_RESOLUTION_VARIANT_SIZE_FIT", "type": "field", "idx": 14609, "Desc": "image resolution variant hint value -- an image resolution variant is chosen based on the dpi of the screen and the transform in the graphics2d context ."}{"node_name": "VALUE_RESOLUTION_VARIANT_DPI_FIT", "type": "field", "idx": 14610, "Desc": "image resolution variant hint value -- an image resolution variant is chosen based only on the dpi of the screen ."}{"node_name": "HORIZONTAL", "type": "field", "idx": 14696, "Desc": "a constant that indicates a horizontal scroll bar ."}{"node_name": "VERTICAL", "type": "field", "idx": 14697, "Desc": "a constant that indicates a vertical scroll bar ."}{"node_name": "SCROLLBARS_AS_NEEDED", "type": "field", "idx": 14754, "Desc": "specifies that horizontal / vertical scrollbar should be shown only when the size of the child exceeds the size of the scrollpane in the horizontal / vertical dimension ."}{"node_name": "SCROLLBARS_ALWAYS", "type": "field", "idx": 14755, "Desc": "specifies that horizontal / vertical scrollbars should always be shown regardless of the respective sizes of the scrollpane and child ."}{"node_name": "SCROLLBARS_NEVER", "type": "field", "idx": 14756, "Desc": "specifies that horizontal / vertical scrollbars should never be shown regardless of the respective sizes of the scrollpane and child ."}{"node_name": "DESKTOP", "type": "field", "idx": 14855, "Desc": "the array index for the desktop system color ."}{"node_name": "ACTIVE_CAPTION", "type": "field", "idx": 14856, "Desc": "the array index for the activecaption system color ."}{"node_name": "ACTIVE_CAPTION_TEXT", "type": "field", "idx": 14857, "Desc": "the array index for the activecaptiontext system color ."}{"node_name": "ACTIVE_CAPTION_BORDER", "type": "field", "idx": 14858, "Desc": "the array index for the activecaptionborder system color ."}{"node_name": "INACTIVE_CAPTION", "type": "field", "idx": 14859, "Desc": "the array index for the inactivecaption system color ."}{"node_name": "INACTIVE_CAPTION_TEXT", "type": "field", "idx": 14860, "Desc": "the array index for the inactivecaptiontext system color ."}{"node_name": "INACTIVE_CAPTION_BORDER", "type": "field", "idx": 14861, "Desc": "the array index for the inactivecaptionborder system color ."}{"node_name": "WINDOW", "type": "field", "idx": 14862, "Desc": "the array index for the window system color ."}{"node_name": "WINDOW_BORDER", "type": "field", "idx": 14863, "Desc": "the array index for the windowborder system color ."}{"node_name": "WINDOW_TEXT", "type": "field", "idx": 14864, "Desc": "the array index for the windowtext system color ."}{"node_name": "MENU", "type": "field", "idx": 14865, "Desc": "the array index for the menu system color ."}{"node_name": "MENU_TEXT", "type": "field", "idx": 14866, "Desc": "the array index for the menutext system color ."}{"node_name": "TEXT", "type": "field", "idx": 14867, "Desc": "the array index for the text system color ."}{"node_name": "TEXT_TEXT", "type": "field", "idx": 14868, "Desc": "the array index for the texttext system color ."}{"node_name": "TEXT_HIGHLIGHT", "type": "field", "idx": 14869, "Desc": "the array index for the texthighlight system color ."}{"node_name": "TEXT_HIGHLIGHT_TEXT", "type": "field", "idx": 14870, "Desc": "the array index for the texthighlighttext system color ."}{"node_name": "TEXT_INACTIVE_TEXT", "type": "field", "idx": 14871, "Desc": "the array index for the textinactivetext system color ."}{"node_name": "CONTROL", "type": "field", "idx": 14872, "Desc": "the array index for the control system color ."}{"node_name": "CONTROL_TEXT", "type": "field", "idx": 14873, "Desc": "the array index for the controltext system color ."}{"node_name": "CONTROL_HIGHLIGHT", "type": "field", "idx": 14874, "Desc": "the array index for the controlhighlight system color ."}{"node_name": "CONTROL_LT_HIGHLIGHT", "type": "field", "idx": 14875, "Desc": "the array index for the controllthighlight system color ."}{"node_name": "CONTROL_SHADOW", "type": "field", "idx": 14876, "Desc": "the array index for the controlshadow system color ."}{"node_name": "CONTROL_DK_SHADOW", "type": "field", "idx": 14877, "Desc": "the array index for the controldkshadow system color ."}{"node_name": "SCROLLBAR", "type": "field", "idx": 14878, "Desc": "the array index for the scrollbar system color ."}{"node_name": "INFO", "type": "field", "idx": 14879, "Desc": "the array index for the info system color ."}{"node_name": "INFO_TEXT", "type": "field", "idx": 14880, "Desc": "the array index for the infotext system color ."}{"node_name": "NUM_COLORS", "type": "field", "idx": 14881, "Desc": "the number of system colors in the array ."}{"node_name": "desktop", "type": "field", "idx": 14882, "Desc": "the color rendered for the background of the desktop ."}{"node_name": "activeCaption", "type": "field", "idx": 14883, "Desc": "the color rendered for the window-title background of the currently active window ."}{"node_name": "activeCaptionText", "type": "field", "idx": 14884, "Desc": "the color rendered for the window-title text of the currently active window ."}{"node_name": "activeCaptionBorder", "type": "field", "idx": 14885, "Desc": "the color rendered for the border around the currently active window ."}{"node_name": "inactiveCaption", "type": "field", "idx": 14886, "Desc": "the color rendered for the window-title background of inactive windows ."}{"node_name": "inactiveCaptionText", "type": "field", "idx": 14887, "Desc": "the color rendered for the window-title text of inactive windows ."}{"node_name": "inactiveCaptionBorder", "type": "field", "idx": 14888, "Desc": "the color rendered for the border around inactive windows ."}{"node_name": "window", "type": "field", "idx": 14889, "Desc": "the color rendered for the background of interior regions inside windows ."}{"node_name": "windowBorder", "type": "field", "idx": 14890, "Desc": "the color rendered for the border around interior regions inside windows ."}{"node_name": "windowText", "type": "field", "idx": 14891, "Desc": "the color rendered for text of interior regions inside windows ."}{"node_name": "menu", "type": "field", "idx": 14892, "Desc": "the color rendered for the background of menus ."}{"node_name": "menuText", "type": "field", "idx": 14893, "Desc": "the color rendered for the text of menus ."}{"node_name": "text", "type": "field", "idx": 14894, "Desc": "the color rendered for the background of text control objects , such as textfields and comboboxes ."}{"node_name": "textText", "type": "field", "idx": 14895, "Desc": "the color rendered for the text of text control objects , such as textfields and comboboxes ."}{"node_name": "textHighlight", "type": "field", "idx": 14896, "Desc": "the color rendered for the background of selected items , such as in menus , comboboxes , and text ."}{"node_name": "textHighlightText", "type": "field", "idx": 14897, "Desc": "the color rendered for the text of selected items , such as in menus , comboboxes , and text ."}{"node_name": "textInactiveText", "type": "field", "idx": 14898, "Desc": "the color rendered for the text of inactive items , such as in menus ."}{"node_name": "control", "type": "field", "idx": 14899, "Desc": "the color rendered for the background of control panels and control objects , such as pushbuttons ."}{"node_name": "controlText", "type": "field", "idx": 14900, "Desc": "the color rendered for the text of control panels and control objects , such as pushbuttons ."}{"node_name": "controlHighlight", "type": "field", "idx": 14901, "Desc": "the color rendered for light areas of 3d control objects , such as pushbuttons . this color is typically derived from the control background color to provide a 3d effect ."}{"node_name": "controlLtHighlight", "type": "field", "idx": 14902, "Desc": "the color rendered for highlight areas of 3d control objects , such as pushbuttons . this color is typically derived from the control background color to provide a 3d effect ."}{"node_name": "controlShadow", "type": "field", "idx": 14903, "Desc": "the color rendered for shadow areas of 3d control objects , such as pushbuttons . this color is typically derived from the control background color to provide a 3d effect ."}{"node_name": "controlDkShadow", "type": "field", "idx": 14904, "Desc": "the color rendered for dark shadow areas on 3d control objects , such as pushbuttons . this color is typically derived from the control background color to provide a 3d effect ."}{"node_name": "scrollbar", "type": "field", "idx": 14905, "Desc": "the color rendered for the background of scrollbars ."}{"node_name": "info", "type": "field", "idx": 14906, "Desc": "the color rendered for the background of tooltips or spot help ."}{"node_name": "infoText", "type": "field", "idx": 14907, "Desc": "the color rendered for the text of tooltips or spot help ."}{"node_name": "SCROLLBARS_BOTH", "type": "field", "idx": 14967, "Desc": "create and display both vertical and horizontal scrollbars ."}{"node_name": "SCROLLBARS_VERTICAL_ONLY", "type": "field", "idx": 14968, "Desc": "create and display vertical scrollbar only ."}{"node_name": "SCROLLBARS_HORIZONTAL_ONLY", "type": "field", "idx": 14969, "Desc": "create and display horizontal scrollbar only ."}{"node_name": "SCROLLBARS_NONE", "type": "field", "idx": 14970, "Desc": "do not create or display any scrollbars for the text area ."}{"node_name": "textListener", "type": "field", "idx": 15041, "Desc": "a list of listeners that will receive events from this object ."}{"node_name": "desktopProperties", "type": "field", "idx": 15137, "Desc": "the desktop properties ."}{"node_name": "desktopPropsSupport", "type": "field", "idx": 15138, "Desc": "the desktop properties change support ."}{"node_name": "OPAQUE", "type": "field", "idx": 15254, "Desc": "represents image data that is guaranteed to be completely opaque , meaning that all pixels have an alpha value of 1.0 ."}{"node_name": "BITMASK", "type": "field", "idx": 15255, "Desc": "represents image data that is guaranteed to be either completely opaque , with an alpha value of 1.0 , or completely transparent , with an alpha value of 0.0 ."}{"node_name": "TRANSLUCENT", "type": "field", "idx": 15256, "Desc": "represents image data that contains or might contain arbitrary alpha values between and including 0.0 and 1.0 ."}{"node_name": "globalHierarchyLock", "type": "field", "idx": 15449, "Desc": "this global lock is used by both beancontext and beancontextservices implementors to serialize changes in a beancontext hierarchy and any service requests etc ."}{"node_name": "beanContextChildPeer", "type": "field", "idx": 15481, "Desc": "the beancontext in which this beancontextchild is nested ."}{"node_name": "pcSupport", "type": "field", "idx": 15482, "Desc": "the propertychangesupport associated with this beancontextchildsupport ."}{"node_name": "vcSupport", "type": "field", "idx": 15483, "Desc": "the vetoablechangesupport associated with this beancontextchildsupport ."}{"node_name": "beanContext", "type": "field", "idx": 15484, "Desc": "the bean context ."}{"node_name": "rejectedSetBCOnce", "type": "field", "idx": 15485, "Desc": "a flag indicating that there has been at least one propertychangevetoexception thrown for the attempted setbeancontext operation ."}{"node_name": "propagatedFrom", "type": "field", "idx": 15525, "Desc": "the beancontext from which this event was propagated"}{"node_name": "children", "type": "field", "idx": 15534, "Desc": "the list of children affected by this event notification ."}{"node_name": "serviceClass", "type": "field", "idx": 15554, "Desc": "a class reference to the newly available service"}{"node_name": "serviceClass", "type": "field", "idx": 15577, "Desc": "a class reference to the service that is being revoked ."}{"node_name": "serviceProvider", "type": "field", "idx": 15623, "Desc": "the service provider ."}{"node_name": "services", "type": "field", "idx": 15626, "Desc": "all accesses to the protected transient hashmap services field should be synchronized on that object"}{"node_name": "serializable", "type": "field", "idx": 15627, "Desc": "the number of instances of a serializable beancontextservceprovider ."}{"node_name": "proxy", "type": "field", "idx": 15628, "Desc": "delegate for the beancontextserviceprovider ."}{"node_name": "bcsListeners", "type": "field", "idx": 15629, "Desc": "list of beancontextserviceslistener objects ."}{"node_name": "children", "type": "field", "idx": 15710, "Desc": "all accesses to the protected hashmap children field shall be synchronized on that object ."}{"node_name": "bcmListeners", "type": "field", "idx": 15711, "Desc": "all accesses to the protected arraylist bcmlisteners field shall be synchronized on that object ."}{"node_name": "locale", "type": "field", "idx": 15712, "Desc": "the current locale of this beancontext ."}{"node_name": "okToUseGui", "type": "field", "idx": 15713, "Desc": "a boolean indicating if this instance may now render a gui ."}{"node_name": "designTime", "type": "field", "idx": 15714, "Desc": "a boolean indicating whether or not this object is currently in design time mode ."}{"node_name": "ICON_COLOR_16x16", "type": "field", "idx": 15845, "Desc": "constant to indicate a 16 x 16 color icon ."}{"node_name": "ICON_COLOR_32x32", "type": "field", "idx": 15846, "Desc": "constant to indicate a 32 x 32 color icon ."}{"node_name": "ICON_MONO_16x16", "type": "field", "idx": 15847, "Desc": "constant to indicate a 16 x 16 monochrome icon ."}{"node_name": "ICON_MONO_32x32", "type": "field", "idx": 15848, "Desc": "constant to indicate a 32 x 32 monochrome icon ."}{"node_name": "PROPERTYNAME", "type": "field", "idx": 15904, "Desc": "the standard value of the propertyname as fired from a beancontext or other source of propertychangeevents ."}{"node_name": "USE_ALL_BEANINFO", "type": "field", "idx": 16093, "Desc": "flag to indicate to use of all beaninfo ."}{"node_name": "IGNORE_IMMEDIATE_BEANINFO", "type": "field", "idx": 16094, "Desc": "flag to indicate to ignore immediate beaninfo ."}{"node_name": "IGNORE_ALL_BEANINFO", "type": "field", "idx": 16095, "Desc": "flag to indicate to ignore all beaninfo ."}{"node_name": "buf", "type": "field", "idx": 16424, "Desc": "the internal buffer array where the data is stored . when necessary , it may be replaced by another array of a different size ."}{"node_name": "count", "type": "field", "idx": 16425, "Desc": "the index one greater than the index of the last valid byte in the buffer . this value is always in the range 0 through buf.length ; elements buf [ 0 ] through buf [ count-1 ] contain buffered input data obtained from the underlying input stream ."}{"node_name": "pos", "type": "field", "idx": 16426, "Desc": "the current position in the buffer . this is the index of the next character to be read from the buf array . this value is always in the range 0 through count . if it is less than count , then buf [ pos ] is the next byte to be supplied as input ; if it is equal to count , then the next read or skip operation will require more bytes to be read from the contained input stream ."}{"node_name": "markpos", "type": "field", "idx": 16427, "Desc": "the value of the pos field at the time the last mark method was called . this value is always in the range -1 through pos . if there is no marked position in the input stream , markpos is -1 . if there is a marked position in the input stream , then buf [ markpos ] is the first byte to be supplied as input after a reset operation . if markpos is not -1 , then all bytes from positions buf [ markpos ] through buf [ pos-1 ] must remain in the buffer array ( though they may be moved to another place in the buffer array , with suitable adjustments to the values of count , pos , and markpos ); they may not be discarded unless and until the difference between pos and markpos exceeds marklimit ."}{"node_name": "marklimit", "type": "field", "idx": 16428, "Desc": "the maximum read ahead allowed after a call to the mark method before subsequent calls to the reset method fail . whenever the difference between pos and markpos exceeds marklimit , then the mark may be dropped by setting markpos to -1 ."}{"node_name": "buf", "type": "field", "idx": 16448, "Desc": "the internal buffer where data is stored ."}{"node_name": "count", "type": "field", "idx": 16449, "Desc": "the number of valid bytes in the buffer . this value is always in the range 0 through buf.length ; elements buf [ 0 ] through buf [ count-1 ] contain valid byte data ."}{"node_name": "buf", "type": "field", "idx": 16501, "Desc": "an array of bytes that was provided by the creator of the stream . elements buf [ 0 ] through buf [ count-1 ] are the only bytes that can ever be read from the stream ; element buf [ pos ] is the next byte to be read ."}{"node_name": "pos", "type": "field", "idx": 16502, "Desc": "the index of the next character to read from the input stream buffer . this value should always be nonnegative and not larger than the value of count . the next byte to be read from the input stream buffer will be buf [ pos ] ."}{"node_name": "mark", "type": "field", "idx": 16503, "Desc": "the currently marked position in the stream . bytearrayinputstream objects are marked at position zero by default when constructed . they may be marked at another position within the buffer by the mark() method . the current buffer position is set to this point by the reset() method . if no mark has been set , then the value of mark is the offset passed to the constructor ( or 0 if the offset was not supplied ) ."}{"node_name": "count", "type": "field", "idx": 16504, "Desc": "the index one greater than the last valid character in the input stream buffer . this value should always be nonnegative and not larger than the length of buf . it is one greater than the position of the last byte within buf that can ever be read from the input stream buffer ."}{"node_name": "buf", "type": "field", "idx": 16525, "Desc": "the buffer where data is stored ."}{"node_name": "count", "type": "field", "idx": 16526, "Desc": "the number of valid bytes in the buffer ."}{"node_name": "buf", "type": "field", "idx": 16550, "Desc": "the character buffer ."}{"node_name": "pos", "type": "field", "idx": 16551, "Desc": "the current buffer position ."}{"node_name": "markedPos", "type": "field", "idx": 16552, "Desc": "the position of mark in buffer ."}{"node_name": "count", "type": "field", "idx": 16553, "Desc": "the index of the end of this buffer . there is not valid data at or beyond this index ."}{"node_name": "buf", "type": "field", "idx": 16574, "Desc": "the buffer where data is stored ."}{"node_name": "count", "type": "field", "idx": 16575, "Desc": "the number of chars in the buffer ."}{"node_name": "written", "type": "field", "idx": 16712, "Desc": "the number of bytes written to the data output stream so far . if this counter overflows , it will be wrapped to integer.max_value ."}{"node_name": "separatorChar", "type": "field", "idx": 16755, "Desc": "the system-dependent default name-separator character . separatorChar is initialized to contain the first character of the value of the system property file.separator . on unix systems the value of separatorChar is ' / ' ; on microsoft windows systems it is ' \\\\ ' ."}{"node_name": "separator", "type": "field", "idx": 16756, "Desc": "the system-dependent default name-separator character , represented as a string for convenience . this string contains a single character , namely separatorchar ."}{"node_name": "pathSeparatorChar", "type": "field", "idx": 16757, "Desc": "the system-dependent path-separator character . pathSeparatorChar is initialized to contain the first character of the value of the system property path.separator . this character is used to separate filenames in a sequence of files given as a path list . on unix systems , this character is ' : ' ; on microsoft windows systems it is ' ; ' ."}{"node_name": "pathSeparator", "type": "field", "idx": 16758, "Desc": "the system-dependent path-separator character , represented as a string for convenience . this string contains a single character , namely pathseparatorchar ."}{"node_name": "in", "type": "field", "idx": 16840, "Desc": "a handle to the standard input stream . usually , this file descriptor is not used directly , but rather via the input stream known as system.in ."}{"node_name": "out", "type": "field", "idx": 16841, "Desc": "a handle to the standard output stream . usually , this file descriptor is not used directly , but rather via the output stream known as system.out ."}{"node_name": "err", "type": "field", "idx": 16842, "Desc": "a handle to the standard error stream . usually , this file descriptor is not used directly , but rather via the output stream known as system.err ."}{"node_name": "in", "type": "field", "idx": 16953, "Desc": "the input stream to be filtered ."}{"node_name": "out", "type": "field", "idx": 16972, "Desc": "the underlying output stream to be filtered ."}{"node_name": "in", "type": "field", "idx": 16986, "Desc": "the underlying character-input stream ."}{"node_name": "out", "type": "field", "idx": 17002, "Desc": "the underlying character-output stream ."}{"node_name": "bytesTransferred", "type": "field", "idx": 17067, "Desc": "reports how many bytes had been transferred as part of the i / o operation before it was interrupted ."}{"node_name": "classname", "type": "field", "idx": 17072, "Desc": "name of the invalid class ."}{"node_name": "NO_FIELDS", "type": "field", "idx": 17343, "Desc": "serialpersistentfields value indicating no serializable fields"}{"node_name": "STREAM_MAGIC", "type": "field", "idx": 17356, "Desc": "magic number that is written to the stream header ."}{"node_name": "STREAM_VERSION", "type": "field", "idx": 17357, "Desc": "version number that is written to the stream header ."}{"node_name": "TC_BASE", "type": "field", "idx": 17358, "Desc": "first tag value ."}{"node_name": "TC_NULL", "type": "field", "idx": 17359, "Desc": "null object reference ."}{"node_name": "TC_REFERENCE", "type": "field", "idx": 17360, "Desc": "reference to an object already written into the stream ."}{"node_name": "TC_CLASSDESC", "type": "field", "idx": 17361, "Desc": "new class descriptor ."}{"node_name": "TC_OBJECT", "type": "field", "idx": 17362, "Desc": "new object ."}{"node_name": "TC_STRING", "type": "field", "idx": 17363, "Desc": "new string ."}{"node_name": "TC_ARRAY", "type": "field", "idx": 17364, "Desc": "new array ."}{"node_name": "TC_CLASS", "type": "field", "idx": 17365, "Desc": "reference to class ."}{"node_name": "TC_BLOCKDATA", "type": "field", "idx": 17366, "Desc": "block of optional data . byte following tag indicates number of bytes in this block data ."}{"node_name": "TC_ENDBLOCKDATA", "type": "field", "idx": 17367, "Desc": "end of optional block data blocks for an object ."}{"node_name": "TC_RESET", "type": "field", "idx": 17368, "Desc": "reset stream context . all handles written into stream are reset ."}{"node_name": "TC_BLOCKDATALONG", "type": "field", "idx": 17369, "Desc": "long block data . the long following the tag indicates the number of bytes in this block data ."}{"node_name": "TC_EXCEPTION", "type": "field", "idx": 17370, "Desc": "exception during write ."}{"node_name": "TC_LONGSTRING", "type": "field", "idx": 17371, "Desc": "long string ."}{"node_name": "TC_PROXYCLASSDESC", "type": "field", "idx": 17372, "Desc": "new proxy class descriptor ."}{"node_name": "TC_ENUM", "type": "field", "idx": 17373, "Desc": "new enum constant ."}{"node_name": "TC_MAX", "type": "field", "idx": 17374, "Desc": "last tag value ."}{"node_name": "baseWireHandle", "type": "field", "idx": 17375, "Desc": "first wire handle to be assigned ."}{"node_name": "SC_WRITE_METHOD", "type": "field", "idx": 17376, "Desc": "bit mask for objectstreamclass flag . indicates a serializable class defines its own writeobject method ."}{"node_name": "SC_BLOCK_DATA", "type": "field", "idx": 17377, "Desc": "bit mask for objectstreamclass flag . indicates externalizable data written in block data mode . added for protocol_version_2 ."}{"node_name": "SC_SERIALIZABLE", "type": "field", "idx": 17378, "Desc": "bit mask for objectstreamclass flag . indicates class is serializable ."}{"node_name": "SC_EXTERNALIZABLE", "type": "field", "idx": 17379, "Desc": "bit mask for objectstreamclass flag . indicates class is externalizable ."}{"node_name": "SC_ENUM", "type": "field", "idx": 17380, "Desc": "bit mask for objectstreamclass flag . indicates class is an enum type ."}{"node_name": "SUBSTITUTION_PERMISSION", "type": "field", "idx": 17381, "Desc": "enable substitution of one object for another during serialization / deserialization ."}{"node_name": "SUBCLASS_IMPLEMENTATION_PERMISSION", "type": "field", "idx": 17382, "Desc": "enable overriding of readobject and writeobject ."}{"node_name": "SERIAL_FILTER_PERMISSION", "type": "field", "idx": 17383, "Desc": "enable setting the system-wide serial filter ."}{"node_name": "PROTOCOL_VERSION_1", "type": "field", "idx": 17384, "Desc": "a stream protocol version . all externalizable data is written in jdk 1.1 external data format after calling this method . this version is needed to write streams containing externalizable data that can be read by pre-jdk 1.1.6 jvms ."}{"node_name": "PROTOCOL_VERSION_2", "type": "field", "idx": 17385, "Desc": "a stream protocol version . this protocol is written by jvm 1.2 . externalizable data is written in block data mode and is terminated with tc_endblockdata . externalizable class descriptor flags has sc_block_data enabled . jvm 1.1.6 and greater can read this format change . enables writing a nonserializable class descriptor into the stream . the serialversionuid of a nonserializable class is set to 0l ."}{"node_name": "length", "type": "field", "idx": 17411, "Desc": "the number of bytes of primitive data available to be read in the current buffer ."}{"node_name": "eof", "type": "field", "idx": 17412, "Desc": "true if there is no more data in the buffered part of the stream ."}{"node_name": "PIPE_SIZE", "type": "field", "idx": 17451, "Desc": "the default size of the pipe's circular input buffer ."}{"node_name": "buffer", "type": "field", "idx": 17452, "Desc": "the circular buffer into which incoming data is placed ."}{"node_name": "in", "type": "field", "idx": 17453, "Desc": "the index of the position in the circular buffer at which the next byte of data will be stored when received from the connected piped output stream . in < 0 implies the buffer is empty , in == out implies the buffer is full"}{"node_name": "out", "type": "field", "idx": 17454, "Desc": "the index of the position in the circular buffer at which the next byte of data will be read by this piped input stream ."}{"node_name": "out", "type": "field", "idx": 17621, "Desc": "the underlying character-output stream of this printwriter ."}{"node_name": "buf", "type": "field", "idx": 17731, "Desc": "the pushback buffer ."}{"node_name": "pos", "type": "field", "idx": 17732, "Desc": "the position within the pushback buffer from which the next byte will be read . when the buffer is empty , pos is equal to buf.length ; when the buffer is full , pos is equal to zero ."}{"node_name": "lock", "type": "field", "idx": 17860, "Desc": "the object used to synchronize operations on this stream . for efficiency , a character-stream object may use an object other than itself to protect critical sections . a subclass should therefore use the object in lock rather than this or a synchronized method ."}{"node_name": "ttype", "type": "field", "idx": 17909, "Desc": "after a call to the nexttoken method , ttype contains the type of the token just read . for a single character token , its value is the single character , converted to an integer . for a quoted string token , its value is the quote character . otherwise , its value is one of the following : tt_word indicates that the token is a word . tt_number indicates that the token is a number . tt_eol indicates that the end of line has been read . ttype can only have this value if the eolissignificant method has been called with the argument true . tt_eof indicates that the end of the input stream has been reached . the initial value of ttype is -4 ."}{"node_name": "TT_EOF", "type": "field", "idx": 17910, "Desc": "a constant indicating that the end of the stream has been read ."}{"node_name": "TT_EOL", "type": "field", "idx": 17911, "Desc": "a constant indicating that the end of the line has been read ."}{"node_name": "TT_NUMBER", "type": "field", "idx": 17912, "Desc": "a constant indicating that a number token has been read ."}{"node_name": "TT_WORD", "type": "field", "idx": 17913, "Desc": "a constant indicating that a word token has been read ."}{"node_name": "sval", "type": "field", "idx": 17914, "Desc": "if the current token is a word token , sval contains a string giving the characters of the word token . when the current token is a quoted string token , sval contains the body of the string . the current token is a word when the value of the ttype field is tt_word . the current token is a quoted string token when the value of the ttype field is a quote character . the initial value of sval is null ."}{"node_name": "nval", "type": "field", "idx": 17915, "Desc": "if the current token is a number , nval contains the value of that number . the current token is a number when the value of the ttype field is tt_number . the initial value of nval is 0.0 ."}{"node_name": "detail", "type": "field", "idx": 18011, "Desc": "exception that was caught while writing the objectstream . detail predates the general-purpose exception chaining facility . the throwable.getcause() method is now the preferred means of obtaining this information ."}{"node_name": "lock", "type": "field", "idx": 18018, "Desc": "the object used to synchronize operations on this stream . for efficiency , a character-stream object may use an object other than itself to protect critical sections . a subclass should therefore use the object in lock rather than this or a synchronized method ."}{"node_name": "TRUE", "type": "field", "idx": 18136, "Desc": "the boolean object corresponding to the primitive value true ."}{"node_name": "FALSE", "type": "field", "idx": 18137, "Desc": "the boolean object corresponding to the primitive value false ."}{"node_name": "TYPE", "type": "field", "idx": 18138, "Desc": "the class object representing the primitive type boolean ."}{"node_name": "MIN_VALUE", "type": "field", "idx": 18180, "Desc": "a constant holding the minimum value a byte can have , -27 ."}{"node_name": "MAX_VALUE", "type": "field", "idx": 18181, "Desc": "a constant holding the maximum value a byte can have , 27-1 ."}{"node_name": "TYPE", "type": "field", "idx": 18182, "Desc": "the class instance representing the primitive type byte ."}{"node_name": "SIZE", "type": "field", "idx": 18183, "Desc": "the number of bits used to represent a byte value in two's complement binary form ."}{"node_name": "BYTES", "type": "field", "idx": 18184, "Desc": "the number of bytes used to represent a byte value in two's complement binary form ."}{"node_name": "MIN_RADIX", "type": "field", "idx": 18225, "Desc": "the minimum radix available for conversion to and from strings . the constant value of MIN_RADIX is the smallest value permitted for the radix argument in radix-conversion methods such as the digit method , the fordigit method , and the tostring method of class integer ."}{"node_name": "MAX_RADIX", "type": "field", "idx": 18226, "Desc": "the maximum radix available for conversion to and from strings . the constant value of MAX_RADIX is the largest value permitted for the radix argument in radix-conversion methods such as the digit method , the fordigit method , and the tostring method of class integer ."}{"node_name": "MIN_VALUE", "type": "field", "idx": 18227, "Desc": "the constant value of MIN_VALUE is the smallest value of type char , ' \\u0000 ' ."}{"node_name": "MAX_VALUE", "type": "field", "idx": 18228, "Desc": "the constant value of MAX_VALUE is the largest value of type char , ' \\uffff ' ."}{"node_name": "TYPE", "type": "field", "idx": 18229, "Desc": "the class instance representing the primitive type char ."}{"node_name": "UNASSIGNED", "type": "field", "idx": 18230, "Desc": "general category \" cn \" in the unicode specification ."}{"node_name": "UPPERCASE_LETTER", "type": "field", "idx": 18231, "Desc": "general category \" lu \" in the unicode specification ."}{"node_name": "LOWERCASE_LETTER", "type": "field", "idx": 18232, "Desc": "general category \" ll \" in the unicode specification ."}{"node_name": "TITLECASE_LETTER", "type": "field", "idx": 18233, "Desc": "general category \" lt \" in the unicode specification ."}{"node_name": "MODIFIER_LETTER", "type": "field", "idx": 18234, "Desc": "general category \" lm \" in the unicode specification ."}{"node_name": "OTHER_LETTER", "type": "field", "idx": 18235, "Desc": "general category \" lo \" in the unicode specification ."}{"node_name": "NON_SPACING_MARK", "type": "field", "idx": 18236, "Desc": "general category \" mn \" in the unicode specification ."}{"node_name": "ENCLOSING_MARK", "type": "field", "idx": 18237, "Desc": "general category \" me \" in the unicode specification ."}{"node_name": "COMBINING_SPACING_MARK", "type": "field", "idx": 18238, "Desc": "general category \" mc \" in the unicode specification ."}{"node_name": "DECIMAL_DIGIT_NUMBER", "type": "field", "idx": 18239, "Desc": "general category \" nd \" in the unicode specification ."}{"node_name": "LETTER_NUMBER", "type": "field", "idx": 18240, "Desc": "general category \" nl \" in the unicode specification ."}{"node_name": "OTHER_NUMBER", "type": "field", "idx": 18241, "Desc": "general category \" no \" in the unicode specification ."}{"node_name": "SPACE_SEPARATOR", "type": "field", "idx": 18242, "Desc": "general category \" zs \" in the unicode specification ."}{"node_name": "LINE_SEPARATOR", "type": "field", "idx": 18243, "Desc": "general category \" zl \" in the unicode specification ."}{"node_name": "PARAGRAPH_SEPARATOR", "type": "field", "idx": 18244, "Desc": "general category \" zp \" in the unicode specification ."}{"node_name": "CONTROL", "type": "field", "idx": 18245, "Desc": "general category \" cc \" in the unicode specification ."}{"node_name": "FORMAT", "type": "field", "idx": 18246, "Desc": "general category \" cf \" in the unicode specification ."}{"node_name": "PRIVATE_USE", "type": "field", "idx": 18247, "Desc": "general category \" co \" in the unicode specification ."}{"node_name": "SURROGATE", "type": "field", "idx": 18248, "Desc": "general category \" cs \" in the unicode specification ."}{"node_name": "DASH_PUNCTUATION", "type": "field", "idx": 18249, "Desc": "general category \" pd \" in the unicode specification ."}{"node_name": "START_PUNCTUATION", "type": "field", "idx": 18250, "Desc": "general category \" ps \" in the unicode specification ."}{"node_name": "END_PUNCTUATION", "type": "field", "idx": 18251, "Desc": "general category \" pe \" in the unicode specification ."}{"node_name": "CONNECTOR_PUNCTUATION", "type": "field", "idx": 18252, "Desc": "general category \" pc \" in the unicode specification ."}{"node_name": "OTHER_PUNCTUATION", "type": "field", "idx": 18253, "Desc": "general category \" po \" in the unicode specification ."}{"node_name": "MATH_SYMBOL", "type": "field", "idx": 18254, "Desc": "general category \" sm \" in the unicode specification ."}{"node_name": "CURRENCY_SYMBOL", "type": "field", "idx": 18255, "Desc": "general category \" sc \" in the unicode specification ."}{"node_name": "MODIFIER_SYMBOL", "type": "field", "idx": 18256, "Desc": "general category \" sk \" in the unicode specification ."}{"node_name": "OTHER_SYMBOL", "type": "field", "idx": 18257, "Desc": "general category \" so \" in the unicode specification ."}{"node_name": "INITIAL_QUOTE_PUNCTUATION", "type": "field", "idx": 18258, "Desc": "general category \" pi \" in the unicode specification ."}{"node_name": "FINAL_QUOTE_PUNCTUATION", "type": "field", "idx": 18259, "Desc": "general category \" pf \" in the unicode specification ."}{"node_name": "DIRECTIONALITY_UNDEFINED", "type": "field", "idx": 18260, "Desc": "undefined bidirectional character type . undefined char values have undefined directionality in the unicode specification ."}{"node_name": "DIRECTIONALITY_LEFT_TO_RIGHT", "type": "field", "idx": 18261, "Desc": "strong bidirectional character type \" l \" in the unicode specification ."}{"node_name": "DIRECTIONALITY_RIGHT_TO_LEFT", "type": "field", "idx": 18262, "Desc": "strong bidirectional character type \" r \" in the unicode specification ."}{"node_name": "DIRECTIONALITY_RIGHT_TO_LEFT_ARABIC", "type": "field", "idx": 18263, "Desc": "strong bidirectional character type \" al \" in the unicode specification ."}{"node_name": "DIRECTIONALITY_EUROPEAN_NUMBER", "type": "field", "idx": 18264, "Desc": "weak bidirectional character type \" en \" in the unicode specification ."}{"node_name": "DIRECTIONALITY_EUROPEAN_NUMBER_SEPARATOR", "type": "field", "idx": 18265, "Desc": "weak bidirectional character type \" es \" in the unicode specification ."}{"node_name": "DIRECTIONALITY_EUROPEAN_NUMBER_TERMINATOR", "type": "field", "idx": 18266, "Desc": "weak bidirectional character type \" et \" in the unicode specification ."}{"node_name": "DIRECTIONALITY_ARABIC_NUMBER", "type": "field", "idx": 18267, "Desc": "weak bidirectional character type \" an \" in the unicode specification ."}{"node_name": "DIRECTIONALITY_COMMON_NUMBER_SEPARATOR", "type": "field", "idx": 18268, "Desc": "weak bidirectional character type \" cs \" in the unicode specification ."}{"node_name": "DIRECTIONALITY_NONSPACING_MARK", "type": "field", "idx": 18269, "Desc": "weak bidirectional character type \" nsm \" in the unicode specification ."}{"node_name": "DIRECTIONALITY_BOUNDARY_NEUTRAL", "type": "field", "idx": 18270, "Desc": "weak bidirectional character type \" bn \" in the unicode specification ."}{"node_name": "DIRECTIONALITY_PARAGRAPH_SEPARATOR", "type": "field", "idx": 18271, "Desc": "neutral bidirectional character type \" b \" in the unicode specification ."}{"node_name": "DIRECTIONALITY_SEGMENT_SEPARATOR", "type": "field", "idx": 18272, "Desc": "neutral bidirectional character type \" s \" in the unicode specification ."}{"node_name": "DIRECTIONALITY_WHITESPACE", "type": "field", "idx": 18273, "Desc": "neutral bidirectional character type \" ws \" in the unicode specification ."}{"node_name": "DIRECTIONALITY_OTHER_NEUTRALS", "type": "field", "idx": 18274, "Desc": "neutral bidirectional character type \" on \" in the unicode specification ."}{"node_name": "DIRECTIONALITY_LEFT_TO_RIGHT_EMBEDDING", "type": "field", "idx": 18275, "Desc": "strong bidirectional character type \" lre \" in the unicode specification ."}{"node_name": "DIRECTIONALITY_LEFT_TO_RIGHT_OVERRIDE", "type": "field", "idx": 18276, "Desc": "strong bidirectional character type \" lro \" in the unicode specification ."}{"node_name": "DIRECTIONALITY_RIGHT_TO_LEFT_EMBEDDING", "type": "field", "idx": 18277, "Desc": "strong bidirectional character type \" rle \" in the unicode specification ."}{"node_name": "DIRECTIONALITY_RIGHT_TO_LEFT_OVERRIDE", "type": "field", "idx": 18278, "Desc": "strong bidirectional character type \" rlo \" in the unicode specification ."}{"node_name": "DIRECTIONALITY_POP_DIRECTIONAL_FORMAT", "type": "field", "idx": 18279, "Desc": "weak bidirectional character type \" pdf \" in the unicode specification ."}{"node_name": "DIRECTIONALITY_LEFT_TO_RIGHT_ISOLATE", "type": "field", "idx": 18280, "Desc": "weak bidirectional character type \" lri \" in the unicode specification ."}{"node_name": "DIRECTIONALITY_RIGHT_TO_LEFT_ISOLATE", "type": "field", "idx": 18281, "Desc": "weak bidirectional character type \" rli \" in the unicode specification ."}{"node_name": "DIRECTIONALITY_FIRST_STRONG_ISOLATE", "type": "field", "idx": 18282, "Desc": "weak bidirectional character type \" fsi \" in the unicode specification ."}{"node_name": "DIRECTIONALITY_POP_DIRECTIONAL_ISOLATE", "type": "field", "idx": 18283, "Desc": "weak bidirectional character type \" pdi \" in the unicode specification ."}{"node_name": "MIN_HIGH_SURROGATE", "type": "field", "idx": 18284, "Desc": "the minimum value of a unicode high-surrogate code unit in the utf-16 encoding , constant ' \\ud800 ' . a high-surrogate is also known as a leading-surrogate ."}{"node_name": "MAX_HIGH_SURROGATE", "type": "field", "idx": 18285, "Desc": "the maximum value of a unicode high-surrogate code unit in the utf-16 encoding , constant ' \\udbff ' . a high-surrogate is also known as a leading-surrogate ."}{"node_name": "MIN_LOW_SURROGATE", "type": "field", "idx": 18286, "Desc": "the minimum value of a unicode low-surrogate code unit in the utf-16 encoding , constant ' \\udc00 ' . a low-surrogate is also known as a trailing-surrogate ."}{"node_name": "MAX_LOW_SURROGATE", "type": "field", "idx": 18287, "Desc": "the maximum value of a unicode low-surrogate code unit in the utf-16 encoding , constant ' \\udfff ' . a low-surrogate is also known as a trailing-surrogate ."}{"node_name": "MIN_SURROGATE", "type": "field", "idx": 18288, "Desc": "the minimum value of a unicode surrogate code unit in the utf-16 encoding , constant ' \\ud800 ' ."}{"node_name": "MAX_SURROGATE", "type": "field", "idx": 18289, "Desc": "the maximum value of a unicode surrogate code unit in the utf-16 encoding , constant ' \\udfff ' ."}{"node_name": "MIN_SUPPLEMENTARY_CODE_POINT", "type": "field", "idx": 18290, "Desc": "the minimum value of a unicode supplementary code point , constant u+10000 ."}{"node_name": "MIN_CODE_POINT", "type": "field", "idx": 18291, "Desc": "the minimum value of a unicode code point , constant u+0000 ."}{"node_name": "MAX_CODE_POINT", "type": "field", "idx": 18292, "Desc": "the maximum value of a unicode code point , constant u+10ffff ."}{"node_name": "SIZE", "type": "field", "idx": 18293, "Desc": "the number of bits used to represent a char value in unsigned binary form , constant 16 ."}{"node_name": "BYTES", "type": "field", "idx": 18294, "Desc": "the number of bytes used to represent a char value in unsigned binary form ."}{"node_name": "BASIC_LATIN", "type": "field", "idx": 18496, "Desc": "constant for the \" basic latin \" unicode character block ."}{"node_name": "LATIN_1_SUPPLEMENT", "type": "field", "idx": 18497, "Desc": "constant for the \" latin-1 supplement \" unicode character block ."}{"node_name": "LATIN_EXTENDED_A", "type": "field", "idx": 18498, "Desc": "constant for the \" latin extended-a \" unicode character block ."}{"node_name": "LATIN_EXTENDED_B", "type": "field", "idx": 18499, "Desc": "constant for the \" latin extended-b \" unicode character block ."}{"node_name": "IPA_EXTENSIONS", "type": "field", "idx": 18500, "Desc": "constant for the \" ipa extensions \" unicode character block ."}{"node_name": "SPACING_MODIFIER_LETTERS", "type": "field", "idx": 18501, "Desc": "constant for the \" spacing modifier letters \" unicode character block ."}{"node_name": "COMBINING_DIACRITICAL_MARKS", "type": "field", "idx": 18502, "Desc": "constant for the \" combining diacritical marks \" unicode character block ."}{"node_name": "GREEK", "type": "field", "idx": 18503, "Desc": "constant for the \" greek and coptic \" unicode character block . this block was previously known as the \" greek \" block ."}{"node_name": "CYRILLIC", "type": "field", "idx": 18504, "Desc": "constant for the \" cyrillic \" unicode character block ."}{"node_name": "ARMENIAN", "type": "field", "idx": 18505, "Desc": "constant for the \" armenian \" unicode character block ."}{"node_name": "HEBREW", "type": "field", "idx": 18506, "Desc": "constant for the \" hebrew \" unicode character block ."}{"node_name": "ARABIC", "type": "field", "idx": 18507, "Desc": "constant for the \" arabic \" unicode character block ."}{"node_name": "DEVANAGARI", "type": "field", "idx": 18508, "Desc": "constant for the \" devanagari \" unicode character block ."}{"node_name": "BENGALI", "type": "field", "idx": 18509, "Desc": "constant for the \" bengali \" unicode character block ."}{"node_name": "GURMUKHI", "type": "field", "idx": 18510, "Desc": "constant for the \" gurmukhi \" unicode character block ."}{"node_name": "GUJARATI", "type": "field", "idx": 18511, "Desc": "constant for the \" gujarati \" unicode character block ."}{"node_name": "ORIYA", "type": "field", "idx": 18512, "Desc": "constant for the \" oriya \" unicode character block ."}{"node_name": "TAMIL", "type": "field", "idx": 18513, "Desc": "constant for the \" tamil \" unicode character block ."}{"node_name": "TELUGU", "type": "field", "idx": 18514, "Desc": "constant for the \" telugu \" unicode character block ."}{"node_name": "KANNADA", "type": "field", "idx": 18515, "Desc": "constant for the \" kannada \" unicode character block ."}{"node_name": "MALAYALAM", "type": "field", "idx": 18516, "Desc": "constant for the \" malayalam \" unicode character block ."}{"node_name": "THAI", "type": "field", "idx": 18517, "Desc": "constant for the \" thai \" unicode character block ."}{"node_name": "LAO", "type": "field", "idx": 18518, "Desc": "constant for the \" lao \" unicode character block ."}{"node_name": "TIBETAN", "type": "field", "idx": 18519, "Desc": "constant for the \" tibetan \" unicode character block ."}{"node_name": "GEORGIAN", "type": "field", "idx": 18520, "Desc": "constant for the \" georgian \" unicode character block ."}{"node_name": "HANGUL_JAMO", "type": "field", "idx": 18521, "Desc": "constant for the \" hangul jamo \" unicode character block ."}{"node_name": "LATIN_EXTENDED_ADDITIONAL", "type": "field", "idx": 18522, "Desc": "constant for the \" latin extended additional \" unicode character block ."}{"node_name": "GREEK_EXTENDED", "type": "field", "idx": 18523, "Desc": "constant for the \" greek extended \" unicode character block ."}{"node_name": "GENERAL_PUNCTUATION", "type": "field", "idx": 18524, "Desc": "constant for the \" general punctuation \" unicode character block ."}{"node_name": "SUPERSCRIPTS_AND_SUBSCRIPTS", "type": "field", "idx": 18525, "Desc": "constant for the \" superscripts and subscripts \" unicode character block ."}{"node_name": "CURRENCY_SYMBOLS", "type": "field", "idx": 18526, "Desc": "constant for the \" currency symbols \" unicode character block ."}{"node_name": "COMBINING_MARKS_FOR_SYMBOLS", "type": "field", "idx": 18527, "Desc": "constant for the \" combining diacritical marks for symbols \" unicode character block . this block was previously known as \" combining marks for symbols \" ."}{"node_name": "LETTERLIKE_SYMBOLS", "type": "field", "idx": 18528, "Desc": "constant for the \" letterlike symbols \" unicode character block ."}{"node_name": "NUMBER_FORMS", "type": "field", "idx": 18529, "Desc": "constant for the \" number forms \" unicode character block ."}{"node_name": "ARROWS", "type": "field", "idx": 18530, "Desc": "constant for the \" arrows \" unicode character block ."}{"node_name": "MATHEMATICAL_OPERATORS", "type": "field", "idx": 18531, "Desc": "constant for the \" mathematical operators \" unicode character block ."}{"node_name": "MISCELLANEOUS_TECHNICAL", "type": "field", "idx": 18532, "Desc": "constant for the \" miscellaneous technical \" unicode character block ."}{"node_name": "CONTROL_PICTURES", "type": "field", "idx": 18533, "Desc": "constant for the \" control pictures \" unicode character block ."}{"node_name": "OPTICAL_CHARACTER_RECOGNITION", "type": "field", "idx": 18534, "Desc": "constant for the \" optical character recognition \" unicode character block ."}{"node_name": "ENCLOSED_ALPHANUMERICS", "type": "field", "idx": 18535, "Desc": "constant for the \" enclosed alphanumerics \" unicode character block ."}{"node_name": "BOX_DRAWING", "type": "field", "idx": 18536, "Desc": "constant for the \" box drawing \" unicode character block ."}{"node_name": "BLOCK_ELEMENTS", "type": "field", "idx": 18537, "Desc": "constant for the \" block elements \" unicode character block ."}{"node_name": "GEOMETRIC_SHAPES", "type": "field", "idx": 18538, "Desc": "constant for the \" geometric shapes \" unicode character block ."}{"node_name": "MISCELLANEOUS_SYMBOLS", "type": "field", "idx": 18539, "Desc": "constant for the \" miscellaneous symbols \" unicode character block ."}{"node_name": "DINGBATS", "type": "field", "idx": 18540, "Desc": "constant for the \" dingbats \" unicode character block ."}{"node_name": "CJK_SYMBOLS_AND_PUNCTUATION", "type": "field", "idx": 18541, "Desc": "constant for the \" cjk symbols and punctuation \" unicode character block ."}{"node_name": "HIRAGANA", "type": "field", "idx": 18542, "Desc": "constant for the \" hiragana \" unicode character block ."}{"node_name": "KATAKANA", "type": "field", "idx": 18543, "Desc": "constant for the \" katakana \" unicode character block ."}{"node_name": "BOPOMOFO", "type": "field", "idx": 18544, "Desc": "constant for the \" bopomofo \" unicode character block ."}{"node_name": "HANGUL_COMPATIBILITY_JAMO", "type": "field", "idx": 18545, "Desc": "constant for the \" hangul compatibility jamo \" unicode character block ."}{"node_name": "KANBUN", "type": "field", "idx": 18546, "Desc": "constant for the \" kanbun \" unicode character block ."}{"node_name": "ENCLOSED_CJK_LETTERS_AND_MONTHS", "type": "field", "idx": 18547, "Desc": "constant for the \" enclosed cjk letters and months \" unicode character block ."}{"node_name": "CJK_COMPATIBILITY", "type": "field", "idx": 18548, "Desc": "constant for the \" cjk compatibility \" unicode character block ."}{"node_name": "CJK_UNIFIED_IDEOGRAPHS", "type": "field", "idx": 18549, "Desc": "constant for the \" cjk unified ideographs \" unicode character block ."}{"node_name": "HANGUL_SYLLABLES", "type": "field", "idx": 18550, "Desc": "constant for the \" hangul syllables \" unicode character block ."}{"node_name": "PRIVATE_USE_AREA", "type": "field", "idx": 18551, "Desc": "constant for the \" private use area \" unicode character block ."}{"node_name": "CJK_COMPATIBILITY_IDEOGRAPHS", "type": "field", "idx": 18552, "Desc": "constant for the \" cjk compatibility ideographs \" unicode character block ."}{"node_name": "ALPHABETIC_PRESENTATION_FORMS", "type": "field", "idx": 18553, "Desc": "constant for the \" alphabetic presentation forms \" unicode character block ."}{"node_name": "ARABIC_PRESENTATION_FORMS_A", "type": "field", "idx": 18554, "Desc": "constant for the \" arabic presentation forms-a \" unicode character block ."}{"node_name": "COMBINING_HALF_MARKS", "type": "field", "idx": 18555, "Desc": "constant for the \" combining half marks \" unicode character block ."}{"node_name": "CJK_COMPATIBILITY_FORMS", "type": "field", "idx": 18556, "Desc": "constant for the \" cjk compatibility forms \" unicode character block ."}{"node_name": "SMALL_FORM_VARIANTS", "type": "field", "idx": 18557, "Desc": "constant for the \" small form variants \" unicode character block ."}{"node_name": "ARABIC_PRESENTATION_FORMS_B", "type": "field", "idx": 18558, "Desc": "constant for the \" arabic presentation forms-b \" unicode character block ."}{"node_name": "HALFWIDTH_AND_FULLWIDTH_FORMS", "type": "field", "idx": 18559, "Desc": "constant for the \" halfwidth and fullwidth forms \" unicode character block ."}{"node_name": "SPECIALS", "type": "field", "idx": 18560, "Desc": "constant for the \" specials \" unicode character block ."}{"node_name": "SYRIAC", "type": "field", "idx": 18561, "Desc": "constant for the \" syriac \" unicode character block ."}{"node_name": "THAANA", "type": "field", "idx": 18562, "Desc": "constant for the \" thaana \" unicode character block ."}{"node_name": "SINHALA", "type": "field", "idx": 18563, "Desc": "constant for the \" sinhala \" unicode character block ."}{"node_name": "MYANMAR", "type": "field", "idx": 18564, "Desc": "constant for the \" myanmar \" unicode character block ."}{"node_name": "ETHIOPIC", "type": "field", "idx": 18565, "Desc": "constant for the \" ethiopic \" unicode character block ."}{"node_name": "CHEROKEE", "type": "field", "idx": 18566, "Desc": "constant for the \" cherokee \" unicode character block ."}{"node_name": "UNIFIED_CANADIAN_ABORIGINAL_SYLLABICS", "type": "field", "idx": 18567, "Desc": "constant for the \" unified canadian aboriginal syllabics \" unicode character block ."}{"node_name": "OGHAM", "type": "field", "idx": 18568, "Desc": "constant for the \" ogham \" unicode character block ."}{"node_name": "RUNIC", "type": "field", "idx": 18569, "Desc": "constant for the \" runic \" unicode character block ."}{"node_name": "KHMER", "type": "field", "idx": 18570, "Desc": "constant for the \" khmer \" unicode character block ."}{"node_name": "MONGOLIAN", "type": "field", "idx": 18571, "Desc": "constant for the \" mongolian \" unicode character block ."}{"node_name": "BRAILLE_PATTERNS", "type": "field", "idx": 18572, "Desc": "constant for the \" braille patterns \" unicode character block ."}{"node_name": "CJK_RADICALS_SUPPLEMENT", "type": "field", "idx": 18573, "Desc": "constant for the \" cjk radicals supplement \" unicode character block ."}{"node_name": "KANGXI_RADICALS", "type": "field", "idx": 18574, "Desc": "constant for the \" kangxi radicals \" unicode character block ."}{"node_name": "IDEOGRAPHIC_DESCRIPTION_CHARACTERS", "type": "field", "idx": 18575, "Desc": "constant for the \" ideographic description characters \" unicode character block ."}{"node_name": "BOPOMOFO_EXTENDED", "type": "field", "idx": 18576, "Desc": "constant for the \" bopomofo extended \" unicode character block ."}{"node_name": "CJK_UNIFIED_IDEOGRAPHS_EXTENSION_A", "type": "field", "idx": 18577, "Desc": "constant for the \" cjk unified ideographs extension a \" unicode character block ."}{"node_name": "YI_SYLLABLES", "type": "field", "idx": 18578, "Desc": "constant for the \" yi syllables \" unicode character block ."}{"node_name": "YI_RADICALS", "type": "field", "idx": 18579, "Desc": "constant for the \" yi radicals \" unicode character block ."}{"node_name": "CYRILLIC_SUPPLEMENTARY", "type": "field", "idx": 18580, "Desc": "constant for the \" cyrillic supplement \" unicode character block . this block was previously known as the \" cyrillic supplementary \" block ."}{"node_name": "TAGALOG", "type": "field", "idx": 18581, "Desc": "constant for the \" tagalog \" unicode character block ."}{"node_name": "HANUNOO", "type": "field", "idx": 18582, "Desc": "constant for the \" hanunoo \" unicode character block ."}{"node_name": "BUHID", "type": "field", "idx": 18583, "Desc": "constant for the \" buhid \" unicode character block ."}{"node_name": "TAGBANWA", "type": "field", "idx": 18584, "Desc": "constant for the \" tagbanwa \" unicode character block ."}{"node_name": "LIMBU", "type": "field", "idx": 18585, "Desc": "constant for the \" limbu \" unicode character block ."}{"node_name": "TAI_LE", "type": "field", "idx": 18586, "Desc": "constant for the \" tai le \" unicode character block ."}{"node_name": "KHMER_SYMBOLS", "type": "field", "idx": 18587, "Desc": "constant for the \" khmer symbols \" unicode character block ."}{"node_name": "PHONETIC_EXTENSIONS", "type": "field", "idx": 18588, "Desc": "constant for the \" phonetic extensions \" unicode character block ."}{"node_name": "MISCELLANEOUS_MATHEMATICAL_SYMBOLS_A", "type": "field", "idx": 18589, "Desc": "constant for the \" miscellaneous mathematical symbols-a \" unicode character block ."}{"node_name": "SUPPLEMENTAL_ARROWS_A", "type": "field", "idx": 18590, "Desc": "constant for the \" supplemental arrows-a \" unicode character block ."}{"node_name": "SUPPLEMENTAL_ARROWS_B", "type": "field", "idx": 18591, "Desc": "constant for the \" supplemental arrows-b \" unicode character block ."}{"node_name": "MISCELLANEOUS_MATHEMATICAL_SYMBOLS_B", "type": "field", "idx": 18592, "Desc": "constant for the \" miscellaneous mathematical symbols-b \" unicode character block ."}{"node_name": "SUPPLEMENTAL_MATHEMATICAL_OPERATORS", "type": "field", "idx": 18593, "Desc": "constant for the \" supplemental mathematical operators \" unicode character block ."}{"node_name": "MISCELLANEOUS_SYMBOLS_AND_ARROWS", "type": "field", "idx": 18594, "Desc": "constant for the \" miscellaneous symbols and arrows \" unicode character block ."}{"node_name": "KATAKANA_PHONETIC_EXTENSIONS", "type": "field", "idx": 18595, "Desc": "constant for the \" katakana phonetic extensions \" unicode character block ."}{"node_name": "YIJING_HEXAGRAM_SYMBOLS", "type": "field", "idx": 18596, "Desc": "constant for the \" yijing hexagram symbols \" unicode character block ."}{"node_name": "VARIATION_SELECTORS", "type": "field", "idx": 18597, "Desc": "constant for the \" variation selectors \" unicode character block ."}{"node_name": "LINEAR_B_SYLLABARY", "type": "field", "idx": 18598, "Desc": "constant for the \" linear b syllabary \" unicode character block ."}{"node_name": "LINEAR_B_IDEOGRAMS", "type": "field", "idx": 18599, "Desc": "constant for the \" linear b ideograms \" unicode character block ."}{"node_name": "AEGEAN_NUMBERS", "type": "field", "idx": 18600, "Desc": "constant for the \" aegean numbers \" unicode character block ."}{"node_name": "OLD_ITALIC", "type": "field", "idx": 18601, "Desc": "constant for the \" old italic \" unicode character block ."}{"node_name": "GOTHIC", "type": "field", "idx": 18602, "Desc": "constant for the \" gothic \" unicode character block ."}{"node_name": "UGARITIC", "type": "field", "idx": 18603, "Desc": "constant for the \" ugaritic \" unicode character block ."}{"node_name": "DESERET", "type": "field", "idx": 18604, "Desc": "constant for the \" deseret \" unicode character block ."}{"node_name": "SHAVIAN", "type": "field", "idx": 18605, "Desc": "constant for the \" shavian \" unicode character block ."}{"node_name": "OSMANYA", "type": "field", "idx": 18606, "Desc": "constant for the \" osmanya \" unicode character block ."}{"node_name": "CYPRIOT_SYLLABARY", "type": "field", "idx": 18607, "Desc": "constant for the \" cypriot syllabary \" unicode character block ."}{"node_name": "BYZANTINE_MUSICAL_SYMBOLS", "type": "field", "idx": 18608, "Desc": "constant for the \" byzantine musical symbols \" unicode character block ."}{"node_name": "MUSICAL_SYMBOLS", "type": "field", "idx": 18609, "Desc": "constant for the \" musical symbols \" unicode character block ."}{"node_name": "TAI_XUAN_JING_SYMBOLS", "type": "field", "idx": 18610, "Desc": "constant for the \" tai xuan jing symbols \" unicode character block ."}{"node_name": "MATHEMATICAL_ALPHANUMERIC_SYMBOLS", "type": "field", "idx": 18611, "Desc": "constant for the \" mathematical alphanumeric symbols \" unicode character block ."}{"node_name": "CJK_UNIFIED_IDEOGRAPHS_EXTENSION_B", "type": "field", "idx": 18612, "Desc": "constant for the \" cjk unified ideographs extension b \" unicode character block ."}{"node_name": "CJK_COMPATIBILITY_IDEOGRAPHS_SUPPLEMENT", "type": "field", "idx": 18613, "Desc": "constant for the \" cjk compatibility ideographs supplement \" unicode character block ."}{"node_name": "TAGS", "type": "field", "idx": 18614, "Desc": "constant for the \" tags \" unicode character block ."}{"node_name": "VARIATION_SELECTORS_SUPPLEMENT", "type": "field", "idx": 18615, "Desc": "constant for the \" variation selectors supplement \" unicode character block ."}{"node_name": "SUPPLEMENTARY_PRIVATE_USE_AREA_A", "type": "field", "idx": 18616, "Desc": "constant for the \" supplementary private use area-a \" unicode character block ."}{"node_name": "SUPPLEMENTARY_PRIVATE_USE_AREA_B", "type": "field", "idx": 18617, "Desc": "constant for the \" supplementary private use area-b \" unicode character block ."}{"node_name": "HIGH_SURROGATES", "type": "field", "idx": 18618, "Desc": "constant for the \" high surrogates \" unicode character block . this block represents codepoint values in the high surrogate range : u+d800 through u+db7f"}{"node_name": "HIGH_PRIVATE_USE_SURROGATES", "type": "field", "idx": 18619, "Desc": "constant for the \" high private use surrogates \" unicode character block . this block represents codepoint values in the private use high surrogate range : u+db80 through u+dbff"}{"node_name": "LOW_SURROGATES", "type": "field", "idx": 18620, "Desc": "constant for the \" low surrogates \" unicode character block . this block represents codepoint values in the low surrogate range : u+dc00 through u+dfff"}{"node_name": "ARABIC_SUPPLEMENT", "type": "field", "idx": 18621, "Desc": "constant for the \" arabic supplement \" unicode character block ."}{"node_name": "NKO", "type": "field", "idx": 18622, "Desc": "constant for the \" nko \" unicode character block ."}{"node_name": "SAMARITAN", "type": "field", "idx": 18623, "Desc": "constant for the \" samaritan \" unicode character block ."}{"node_name": "MANDAIC", "type": "field", "idx": 18624, "Desc": "constant for the \" mandaic \" unicode character block ."}{"node_name": "ETHIOPIC_SUPPLEMENT", "type": "field", "idx": 18625, "Desc": "constant for the \" ethiopic supplement \" unicode character block ."}{"node_name": "UNIFIED_CANADIAN_ABORIGINAL_SYLLABICS_EXTENDED", "type": "field", "idx": 18626, "Desc": "constant for the \" unified canadian aboriginal syllabics extended \" unicode character block ."}{"node_name": "NEW_TAI_LUE", "type": "field", "idx": 18627, "Desc": "constant for the \" new tai lue \" unicode character block ."}{"node_name": "BUGINESE", "type": "field", "idx": 18628, "Desc": "constant for the \" buginese \" unicode character block ."}{"node_name": "TAI_THAM", "type": "field", "idx": 18629, "Desc": "constant for the \" tai tham \" unicode character block ."}{"node_name": "BALINESE", "type": "field", "idx": 18630, "Desc": "constant for the \" balinese \" unicode character block ."}{"node_name": "SUNDANESE", "type": "field", "idx": 18631, "Desc": "constant for the \" sundanese \" unicode character block ."}{"node_name": "BATAK", "type": "field", "idx": 18632, "Desc": "constant for the \" batak \" unicode character block ."}{"node_name": "LEPCHA", "type": "field", "idx": 18633, "Desc": "constant for the \" lepcha \" unicode character block ."}{"node_name": "OL_CHIKI", "type": "field", "idx": 18634, "Desc": "constant for the \" ol chiki \" unicode character block ."}{"node_name": "VEDIC_EXTENSIONS", "type": "field", "idx": 18635, "Desc": "constant for the \" vedic extensions \" unicode character block ."}{"node_name": "PHONETIC_EXTENSIONS_SUPPLEMENT", "type": "field", "idx": 18636, "Desc": "constant for the \" phonetic extensions supplement \" unicode character block ."}{"node_name": "COMBINING_DIACRITICAL_MARKS_SUPPLEMENT", "type": "field", "idx": 18637, "Desc": "constant for the \" combining diacritical marks supplement \" unicode character block ."}{"node_name": "GLAGOLITIC", "type": "field", "idx": 18638, "Desc": "constant for the \" glagolitic \" unicode character block ."}{"node_name": "LATIN_EXTENDED_C", "type": "field", "idx": 18639, "Desc": "constant for the \" latin extended-c \" unicode character block ."}{"node_name": "COPTIC", "type": "field", "idx": 18640, "Desc": "constant for the \" coptic \" unicode character block ."}{"node_name": "GEORGIAN_SUPPLEMENT", "type": "field", "idx": 18641, "Desc": "constant for the \" georgian supplement \" unicode character block ."}{"node_name": "TIFINAGH", "type": "field", "idx": 18642, "Desc": "constant for the \" tifinagh \" unicode character block ."}{"node_name": "ETHIOPIC_EXTENDED", "type": "field", "idx": 18643, "Desc": "constant for the \" ethiopic extended \" unicode character block ."}{"node_name": "CYRILLIC_EXTENDED_A", "type": "field", "idx": 18644, "Desc": "constant for the \" cyrillic extended-a \" unicode character block ."}{"node_name": "SUPPLEMENTAL_PUNCTUATION", "type": "field", "idx": 18645, "Desc": "constant for the \" supplemental punctuation \" unicode character block ."}{"node_name": "CJK_STROKES", "type": "field", "idx": 18646, "Desc": "constant for the \" cjk strokes \" unicode character block ."}{"node_name": "LISU", "type": "field", "idx": 18647, "Desc": "constant for the \" lisu \" unicode character block ."}{"node_name": "VAI", "type": "field", "idx": 18648, "Desc": "constant for the \" vai \" unicode character block ."}{"node_name": "CYRILLIC_EXTENDED_B", "type": "field", "idx": 18649, "Desc": "constant for the \" cyrillic extended-b \" unicode character block ."}{"node_name": "BAMUM", "type": "field", "idx": 18650, "Desc": "constant for the \" bamum \" unicode character block ."}{"node_name": "MODIFIER_TONE_LETTERS", "type": "field", "idx": 18651, "Desc": "constant for the \" modifier tone letters \" unicode character block ."}{"node_name": "LATIN_EXTENDED_D", "type": "field", "idx": 18652, "Desc": "constant for the \" latin extended-d \" unicode character block ."}{"node_name": "SYLOTI_NAGRI", "type": "field", "idx": 18653, "Desc": "constant for the \" syloti nagri \" unicode character block ."}{"node_name": "COMMON_INDIC_NUMBER_FORMS", "type": "field", "idx": 18654, "Desc": "constant for the \" common indic number forms \" unicode character block ."}{"node_name": "PHAGS_PA", "type": "field", "idx": 18655, "Desc": "constant for the \" phags-pa \" unicode character block ."}{"node_name": "SAURASHTRA", "type": "field", "idx": 18656, "Desc": "constant for the \" saurashtra \" unicode character block ."}{"node_name": "DEVANAGARI_EXTENDED", "type": "field", "idx": 18657, "Desc": "constant for the \" devanagari extended \" unicode character block ."}{"node_name": "KAYAH_LI", "type": "field", "idx": 18658, "Desc": "constant for the \" kayah li \" unicode character block ."}{"node_name": "REJANG", "type": "field", "idx": 18659, "Desc": "constant for the \" rejang \" unicode character block ."}{"node_name": "HANGUL_JAMO_EXTENDED_A", "type": "field", "idx": 18660, "Desc": "constant for the \" hangul jamo extended-a \" unicode character block ."}{"node_name": "JAVANESE", "type": "field", "idx": 18661, "Desc": "constant for the \" javanese \" unicode character block ."}{"node_name": "CHAM", "type": "field", "idx": 18662, "Desc": "constant for the \" cham \" unicode character block ."}{"node_name": "MYANMAR_EXTENDED_A", "type": "field", "idx": 18663, "Desc": "constant for the \" myanmar extended-a \" unicode character block ."}{"node_name": "TAI_VIET", "type": "field", "idx": 18664, "Desc": "constant for the \" tai viet \" unicode character block ."}{"node_name": "ETHIOPIC_EXTENDED_A", "type": "field", "idx": 18665, "Desc": "constant for the \" ethiopic extended-a \" unicode character block ."}{"node_name": "MEETEI_MAYEK", "type": "field", "idx": 18666, "Desc": "constant for the \" meetei mayek \" unicode character block ."}{"node_name": "HANGUL_JAMO_EXTENDED_B", "type": "field", "idx": 18667, "Desc": "constant for the \" hangul jamo extended-b \" unicode character block ."}{"node_name": "VERTICAL_FORMS", "type": "field", "idx": 18668, "Desc": "constant for the \" vertical forms \" unicode character block ."}{"node_name": "ANCIENT_GREEK_NUMBERS", "type": "field", "idx": 18669, "Desc": "constant for the \" ancient greek numbers \" unicode character block ."}{"node_name": "ANCIENT_SYMBOLS", "type": "field", "idx": 18670, "Desc": "constant for the \" ancient symbols \" unicode character block ."}{"node_name": "PHAISTOS_DISC", "type": "field", "idx": 18671, "Desc": "constant for the \" phaistos disc \" unicode character block ."}{"node_name": "LYCIAN", "type": "field", "idx": 18672, "Desc": "constant for the \" lycian \" unicode character block ."}{"node_name": "CARIAN", "type": "field", "idx": 18673, "Desc": "constant for the \" carian \" unicode character block ."}{"node_name": "OLD_PERSIAN", "type": "field", "idx": 18674, "Desc": "constant for the \" old persian \" unicode character block ."}{"node_name": "IMPERIAL_ARAMAIC", "type": "field", "idx": 18675, "Desc": "constant for the \" imperial aramaic \" unicode character block ."}{"node_name": "PHOENICIAN", "type": "field", "idx": 18676, "Desc": "constant for the \" phoenician \" unicode character block ."}{"node_name": "LYDIAN", "type": "field", "idx": 18677, "Desc": "constant for the \" lydian \" unicode character block ."}{"node_name": "KHAROSHTHI", "type": "field", "idx": 18678, "Desc": "constant for the \" kharoshthi \" unicode character block ."}{"node_name": "OLD_SOUTH_ARABIAN", "type": "field", "idx": 18679, "Desc": "constant for the \" old south arabian \" unicode character block ."}{"node_name": "AVESTAN", "type": "field", "idx": 18680, "Desc": "constant for the \" avestan \" unicode character block ."}{"node_name": "INSCRIPTIONAL_PARTHIAN", "type": "field", "idx": 18681, "Desc": "constant for the \" inscriptional parthian \" unicode character block ."}{"node_name": "INSCRIPTIONAL_PAHLAVI", "type": "field", "idx": 18682, "Desc": "constant for the \" inscriptional pahlavi \" unicode character block ."}{"node_name": "OLD_TURKIC", "type": "field", "idx": 18683, "Desc": "constant for the \" old turkic \" unicode character block ."}{"node_name": "RUMI_NUMERAL_SYMBOLS", "type": "field", "idx": 18684, "Desc": "constant for the \" rumi numeral symbols \" unicode character block ."}{"node_name": "BRAHMI", "type": "field", "idx": 18685, "Desc": "constant for the \" brahmi \" unicode character block ."}{"node_name": "KAITHI", "type": "field", "idx": 18686, "Desc": "constant for the \" kaithi \" unicode character block ."}{"node_name": "CUNEIFORM", "type": "field", "idx": 18687, "Desc": "constant for the \" cuneiform \" unicode character block ."}{"node_name": "CUNEIFORM_NUMBERS_AND_PUNCTUATION", "type": "field", "idx": 18688, "Desc": "constant for the \" cuneiform numbers and punctuation \" unicode character block ."}{"node_name": "EGYPTIAN_HIEROGLYPHS", "type": "field", "idx": 18689, "Desc": "constant for the \" egyptian hieroglyphs \" unicode character block ."}{"node_name": "BAMUM_SUPPLEMENT", "type": "field", "idx": 18690, "Desc": "constant for the \" bamum supplement \" unicode character block ."}{"node_name": "KANA_SUPPLEMENT", "type": "field", "idx": 18691, "Desc": "constant for the \" kana supplement \" unicode character block ."}{"node_name": "ANCIENT_GREEK_MUSICAL_NOTATION", "type": "field", "idx": 18692, "Desc": "constant for the \" ancient greek musical notation \" unicode character block ."}{"node_name": "COUNTING_ROD_NUMERALS", "type": "field", "idx": 18693, "Desc": "constant for the \" counting rod numerals \" unicode character block ."}{"node_name": "MAHJONG_TILES", "type": "field", "idx": 18694, "Desc": "constant for the \" mahjong tiles \" unicode character block ."}{"node_name": "DOMINO_TILES", "type": "field", "idx": 18695, "Desc": "constant for the \" domino tiles \" unicode character block ."}{"node_name": "PLAYING_CARDS", "type": "field", "idx": 18696, "Desc": "constant for the \" playing cards \" unicode character block ."}{"node_name": "ENCLOSED_ALPHANUMERIC_SUPPLEMENT", "type": "field", "idx": 18697, "Desc": "constant for the \" enclosed alphanumeric supplement \" unicode character block ."}{"node_name": "ENCLOSED_IDEOGRAPHIC_SUPPLEMENT", "type": "field", "idx": 18698, "Desc": "constant for the \" enclosed ideographic supplement \" unicode character block ."}{"node_name": "MISCELLANEOUS_SYMBOLS_AND_PICTOGRAPHS", "type": "field", "idx": 18699, "Desc": "constant for the \" miscellaneous symbols and pictographs \" unicode character block ."}{"node_name": "EMOTICONS", "type": "field", "idx": 18700, "Desc": "constant for the \" emoticons \" unicode character block ."}{"node_name": "TRANSPORT_AND_MAP_SYMBOLS", "type": "field", "idx": 18701, "Desc": "constant for the \" transport and map symbols \" unicode character block ."}{"node_name": "ALCHEMICAL_SYMBOLS", "type": "field", "idx": 18702, "Desc": "constant for the \" alchemical symbols \" unicode character block ."}{"node_name": "CJK_UNIFIED_IDEOGRAPHS_EXTENSION_C", "type": "field", "idx": 18703, "Desc": "constant for the \" cjk unified ideographs extension c \" unicode character block ."}{"node_name": "CJK_UNIFIED_IDEOGRAPHS_EXTENSION_D", "type": "field", "idx": 18704, "Desc": "constant for the \" cjk unified ideographs extension d \" unicode character block ."}{"node_name": "ARABIC_EXTENDED_A", "type": "field", "idx": 18705, "Desc": "constant for the \" arabic extended-a \" unicode character block ."}{"node_name": "SUNDANESE_SUPPLEMENT", "type": "field", "idx": 18706, "Desc": "constant for the \" sundanese supplement \" unicode character block ."}{"node_name": "MEETEI_MAYEK_EXTENSIONS", "type": "field", "idx": 18707, "Desc": "constant for the \" meetei mayek extensions \" unicode character block ."}{"node_name": "MEROITIC_HIEROGLYPHS", "type": "field", "idx": 18708, "Desc": "constant for the \" meroitic hieroglyphs \" unicode character block ."}{"node_name": "MEROITIC_CURSIVE", "type": "field", "idx": 18709, "Desc": "constant for the \" meroitic cursive \" unicode character block ."}{"node_name": "SORA_SOMPENG", "type": "field", "idx": 18710, "Desc": "constant for the \" sora sompeng \" unicode character block ."}{"node_name": "CHAKMA", "type": "field", "idx": 18711, "Desc": "constant for the \" chakma \" unicode character block ."}{"node_name": "SHARADA", "type": "field", "idx": 18712, "Desc": "constant for the \" sharada \" unicode character block ."}{"node_name": "TAKRI", "type": "field", "idx": 18713, "Desc": "constant for the \" takri \" unicode character block ."}{"node_name": "MIAO", "type": "field", "idx": 18714, "Desc": "constant for the \" miao \" unicode character block ."}{"node_name": "ARABIC_MATHEMATICAL_ALPHABETIC_SYMBOLS", "type": "field", "idx": 18715, "Desc": "constant for the \" arabic mathematical alphabetic symbols \" unicode character block ."}{"node_name": "COMBINING_DIACRITICAL_MARKS_EXTENDED", "type": "field", "idx": 18716, "Desc": "constant for the \" combining diacritical marks extended \" unicode character block ."}{"node_name": "MYANMAR_EXTENDED_B", "type": "field", "idx": 18717, "Desc": "constant for the \" myanmar extended-b \" unicode character block ."}{"node_name": "LATIN_EXTENDED_E", "type": "field", "idx": 18718, "Desc": "constant for the \" latin extended-e \" unicode character block ."}{"node_name": "COPTIC_EPACT_NUMBERS", "type": "field", "idx": 18719, "Desc": "constant for the \" coptic epact numbers \" unicode character block ."}{"node_name": "OLD_PERMIC", "type": "field", "idx": 18720, "Desc": "constant for the \" old permic \" unicode character block ."}{"node_name": "ELBASAN", "type": "field", "idx": 18721, "Desc": "constant for the \" elbasan \" unicode character block ."}{"node_name": "CAUCASIAN_ALBANIAN", "type": "field", "idx": 18722, "Desc": "constant for the \" caucasian albanian \" unicode character block ."}{"node_name": "LINEAR_A", "type": "field", "idx": 18723, "Desc": "constant for the \" linear a \" unicode character block ."}{"node_name": "PALMYRENE", "type": "field", "idx": 18724, "Desc": "constant for the \" palmyrene \" unicode character block ."}{"node_name": "NABATAEAN", "type": "field", "idx": 18725, "Desc": "constant for the \" nabataean \" unicode character block ."}{"node_name": "OLD_NORTH_ARABIAN", "type": "field", "idx": 18726, "Desc": "constant for the \" old north arabian \" unicode character block ."}{"node_name": "MANICHAEAN", "type": "field", "idx": 18727, "Desc": "constant for the \" manichaean \" unicode character block ."}{"node_name": "PSALTER_PAHLAVI", "type": "field", "idx": 18728, "Desc": "constant for the \" psalter pahlavi \" unicode character block ."}{"node_name": "MAHAJANI", "type": "field", "idx": 18729, "Desc": "constant for the \" mahajani \" unicode character block ."}{"node_name": "SINHALA_ARCHAIC_NUMBERS", "type": "field", "idx": 18730, "Desc": "constant for the \" sinhala archaic numbers \" unicode character block ."}{"node_name": "KHOJKI", "type": "field", "idx": 18731, "Desc": "constant for the \" khojki \" unicode character block ."}{"node_name": "KHUDAWADI", "type": "field", "idx": 18732, "Desc": "constant for the \" khudawadi \" unicode character block ."}{"node_name": "GRANTHA", "type": "field", "idx": 18733, "Desc": "constant for the \" grantha \" unicode character block ."}{"node_name": "TIRHUTA", "type": "field", "idx": 18734, "Desc": "constant for the \" tirhuta \" unicode character block ."}{"node_name": "SIDDHAM", "type": "field", "idx": 18735, "Desc": "constant for the \" siddham \" unicode character block ."}{"node_name": "MODI", "type": "field", "idx": 18736, "Desc": "constant for the \" modi \" unicode character block ."}{"node_name": "WARANG_CITI", "type": "field", "idx": 18737, "Desc": "constant for the \" warang citi \" unicode character block ."}{"node_name": "PAU_CIN_HAU", "type": "field", "idx": 18738, "Desc": "constant for the \" pau cin hau \" unicode character block ."}{"node_name": "MRO", "type": "field", "idx": 18739, "Desc": "constant for the \" mro \" unicode character block ."}{"node_name": "BASSA_VAH", "type": "field", "idx": 18740, "Desc": "constant for the \" bassa vah \" unicode character block ."}{"node_name": "PAHAWH_HMONG", "type": "field", "idx": 18741, "Desc": "constant for the \" pahawh hmong \" unicode character block ."}{"node_name": "DUPLOYAN", "type": "field", "idx": 18742, "Desc": "constant for the \" duployan \" unicode character block ."}{"node_name": "SHORTHAND_FORMAT_CONTROLS", "type": "field", "idx": 18743, "Desc": "constant for the \" shorthand format controls \" unicode character block ."}{"node_name": "MENDE_KIKAKUI", "type": "field", "idx": 18744, "Desc": "constant for the \" mende kikakui \" unicode character block ."}{"node_name": "ORNAMENTAL_DINGBATS", "type": "field", "idx": 18745, "Desc": "constant for the \" ornamental dingbats \" unicode character block ."}{"node_name": "GEOMETRIC_SHAPES_EXTENDED", "type": "field", "idx": 18746, "Desc": "constant for the \" geometric shapes extended \" unicode character block ."}{"node_name": "SUPPLEMENTAL_ARROWS_C", "type": "field", "idx": 18747, "Desc": "constant for the \" supplemental arrows-c \" unicode character block ."}{"node_name": "CHEROKEE_SUPPLEMENT", "type": "field", "idx": 18748, "Desc": "constant for the \" cherokee supplement \" unicode character block ."}{"node_name": "HATRAN", "type": "field", "idx": 18749, "Desc": "constant for the \" hatran \" unicode character block ."}{"node_name": "OLD_HUNGARIAN", "type": "field", "idx": 18750, "Desc": "constant for the \" old hungarian \" unicode character block ."}{"node_name": "MULTANI", "type": "field", "idx": 18751, "Desc": "constant for the \" multani \" unicode character block ."}{"node_name": "AHOM", "type": "field", "idx": 18752, "Desc": "constant for the \" ahom \" unicode character block ."}{"node_name": "EARLY_DYNASTIC_CUNEIFORM", "type": "field", "idx": 18753, "Desc": "constant for the \" early dynastic cuneiform \" unicode character block ."}{"node_name": "ANATOLIAN_HIEROGLYPHS", "type": "field", "idx": 18754, "Desc": "constant for the \" anatolian hieroglyphs \" unicode character block ."}{"node_name": "SUTTON_SIGNWRITING", "type": "field", "idx": 18755, "Desc": "constant for the \" sutton signwriting \" unicode character block ."}{"node_name": "SUPPLEMENTAL_SYMBOLS_AND_PICTOGRAPHS", "type": "field", "idx": 18756, "Desc": "constant for the \" supplemental symbols and pictographs \" unicode character block ."}{"node_name": "CJK_UNIFIED_IDEOGRAPHS_EXTENSION_E", "type": "field", "idx": 18757, "Desc": "constant for the \" cjk unified ideographs extension e \" unicode character block ."}{"node_name": "SYRIAC_SUPPLEMENT", "type": "field", "idx": 18758, "Desc": "constant for the \" syriac supplement \" unicode character block ."}{"node_name": "CYRILLIC_EXTENDED_C", "type": "field", "idx": 18759, "Desc": "constant for the \" cyrillic extended-c \" unicode character block ."}{"node_name": "OSAGE", "type": "field", "idx": 18760, "Desc": "constant for the \" osage \" unicode character block ."}{"node_name": "NEWA", "type": "field", "idx": 18761, "Desc": "constant for the \" newa \" unicode character block ."}{"node_name": "MONGOLIAN_SUPPLEMENT", "type": "field", "idx": 18762, "Desc": "constant for the \" mongolian supplement \" unicode character block ."}{"node_name": "MARCHEN", "type": "field", "idx": 18763, "Desc": "constant for the \" marchen \" unicode character block ."}{"node_name": "IDEOGRAPHIC_SYMBOLS_AND_PUNCTUATION", "type": "field", "idx": 18764, "Desc": "constant for the \" ideographic symbols and punctuation \" unicode character block ."}{"node_name": "TANGUT", "type": "field", "idx": 18765, "Desc": "constant for the \" tangut \" unicode character block ."}{"node_name": "TANGUT_COMPONENTS", "type": "field", "idx": 18766, "Desc": "constant for the \" tangut components \" unicode character block ."}{"node_name": "KANA_EXTENDED_A", "type": "field", "idx": 18767, "Desc": "constant for the \" kana extended-a \" unicode character block ."}{"node_name": "GLAGOLITIC_SUPPLEMENT", "type": "field", "idx": 18768, "Desc": "constant for the \" glagolitic supplement \" unicode character block ."}{"node_name": "ADLAM", "type": "field", "idx": 18769, "Desc": "constant for the \" adlam \" unicode character block ."}{"node_name": "MASARAM_GONDI", "type": "field", "idx": 18770, "Desc": "constant for the \" masaram gondi \" unicode character block ."}{"node_name": "ZANABAZAR_SQUARE", "type": "field", "idx": 18771, "Desc": "constant for the \" zanabazar square \" unicode character block ."}{"node_name": "NUSHU", "type": "field", "idx": 18772, "Desc": "constant for the \" nushu \" unicode character block ."}{"node_name": "SOYOMBO", "type": "field", "idx": 18773, "Desc": "constant for the \" soyombo \" unicode character block ."}{"node_name": "BHAIKSUKI", "type": "field", "idx": 18774, "Desc": "constant for the \" bhaiksuki \" unicode character block ."}{"node_name": "CJK_UNIFIED_IDEOGRAPHS_EXTENSION_F", "type": "field", "idx": 18775, "Desc": "constant for the \" cjk unified ideographs extension f \" unicode character block ."}{"node_name": "GEORGIAN_EXTENDED", "type": "field", "idx": 18776, "Desc": "constant for the \" georgian extended \" unicode character block ."}{"node_name": "HANIFI_ROHINGYA", "type": "field", "idx": 18777, "Desc": "constant for the \" hanifi rohingya \" unicode character block ."}{"node_name": "OLD_SOGDIAN", "type": "field", "idx": 18778, "Desc": "constant for the \" old sogdian \" unicode character block ."}{"node_name": "SOGDIAN", "type": "field", "idx": 18779, "Desc": "constant for the \" sogdian \" unicode character block ."}{"node_name": "DOGRA", "type": "field", "idx": 18780, "Desc": "constant for the \" dogra \" unicode character block ."}{"node_name": "GUNJALA_GONDI", "type": "field", "idx": 18781, "Desc": "constant for the \" gunjala gondi \" unicode character block ."}{"node_name": "MAKASAR", "type": "field", "idx": 18782, "Desc": "constant for the \" makasar \" unicode character block ."}{"node_name": "MEDEFAIDRIN", "type": "field", "idx": 18783, "Desc": "constant for the \" medefaidrin \" unicode character block ."}{"node_name": "MAYAN_NUMERALS", "type": "field", "idx": 18784, "Desc": "constant for the \" mayan numerals \" unicode character block ."}{"node_name": "INDIC_SIYAQ_NUMBERS", "type": "field", "idx": 18785, "Desc": "constant for the \" indic siyaq numbers \" unicode character block ."}{"node_name": "CHESS_SYMBOLS", "type": "field", "idx": 18786, "Desc": "constant for the \" chess symbols \" unicode character block ."}{"node_name": "ELYMAIC", "type": "field", "idx": 18787, "Desc": "constant for the \" elymaic \" unicode character block ."}{"node_name": "NANDINAGARI", "type": "field", "idx": 18788, "Desc": "constant for the \" nandinagari \" unicode character block ."}{"node_name": "TAMIL_SUPPLEMENT", "type": "field", "idx": 18789, "Desc": "constant for the \" tamil supplement \" unicode character block ."}{"node_name": "EGYPTIAN_HIEROGLYPH_FORMAT_CONTROLS", "type": "field", "idx": 18790, "Desc": "constant for the \" egyptian hieroglyph format controls \" unicode character block ."}{"node_name": "SMALL_KANA_EXTENSION", "type": "field", "idx": 18791, "Desc": "constant for the \" small kana extension \" unicode character block ."}{"node_name": "NYIAKENG_PUACHUE_HMONG", "type": "field", "idx": 18792, "Desc": "constant for the \" nyiakeng puachue hmong \" unicode character block ."}{"node_name": "WANCHO", "type": "field", "idx": 18793, "Desc": "constant for the \" wancho \" unicode character block ."}{"node_name": "OTTOMAN_SIYAQ_NUMBERS", "type": "field", "idx": 18794, "Desc": "constant for the \" ottoman siyaq numbers \" unicode character block ."}{"node_name": "SYMBOLS_AND_PICTOGRAPHS_EXTENDED_A", "type": "field", "idx": 18795, "Desc": "constant for the \" symbols and pictographs extended-a \" unicode character block ."}{"node_name": "DEFAULT_NAME", "type": "field", "idx": 19086, "Desc": "invocation name to use when no name is needed , such as the name of a constructor , or the invocation name of a dynamic constant or dynamic callsite when the bootstrap is known to ignore the invocation name ."}{"node_name": "CD_Object", "type": "field", "idx": 19087, "Desc": "classdesc representing object"}{"node_name": "CD_String", "type": "field", "idx": 19088, "Desc": "classdesc representing string"}{"node_name": "CD_Class", "type": "field", "idx": 19089, "Desc": "classdesc representing class"}{"node_name": "CD_Number", "type": "field", "idx": 19090, "Desc": "classdesc representing number"}{"node_name": "CD_Integer", "type": "field", "idx": 19091, "Desc": "classdesc representing integer"}{"node_name": "CD_Long", "type": "field", "idx": 19092, "Desc": "classdesc representing long"}{"node_name": "CD_Float", "type": "field", "idx": 19093, "Desc": "classdesc representing float"}{"node_name": "CD_Double", "type": "field", "idx": 19094, "Desc": "classdesc representing double"}{"node_name": "CD_Short", "type": "field", "idx": 19095, "Desc": "classdesc representing short"}{"node_name": "CD_Byte", "type": "field", "idx": 19096, "Desc": "classdesc representing byte"}{"node_name": "CD_Character", "type": "field", "idx": 19097, "Desc": "classdesc representing character"}{"node_name": "CD_Boolean", "type": "field", "idx": 19098, "Desc": "classdesc representing boolean"}{"node_name": "CD_Void", "type": "field", "idx": 19099, "Desc": "classdesc representing void"}{"node_name": "CD_Throwable", "type": "field", "idx": 19100, "Desc": "classdesc representing throwable"}{"node_name": "CD_Exception", "type": "field", "idx": 19101, "Desc": "classdesc representing exception"}{"node_name": "CD_Enum", "type": "field", "idx": 19102, "Desc": "classdesc representing enum"}{"node_name": "CD_VarHandle", "type": "field", "idx": 19103, "Desc": "classdesc representing varhandle"}{"node_name": "CD_MethodHandles", "type": "field", "idx": 19104, "Desc": "classdesc representing methodhandles"}{"node_name": "CD_MethodHandles_Lookup", "type": "field", "idx": 19105, "Desc": "classdesc representing methodhandles.lookup"}{"node_name": "CD_MethodHandle", "type": "field", "idx": 19106, "Desc": "classdesc representing methodhandle"}{"node_name": "CD_MethodType", "type": "field", "idx": 19107, "Desc": "classdesc representing methodtype"}{"node_name": "CD_CallSite", "type": "field", "idx": 19108, "Desc": "classdesc representing callsite"}{"node_name": "CD_Collection", "type": "field", "idx": 19109, "Desc": "classdesc representing collection"}{"node_name": "CD_List", "type": "field", "idx": 19110, "Desc": "classdesc representing list"}{"node_name": "CD_Set", "type": "field", "idx": 19111, "Desc": "classdesc representing set"}{"node_name": "CD_Map", "type": "field", "idx": 19112, "Desc": "classdesc representing map"}{"node_name": "CD_ConstantDesc", "type": "field", "idx": 19113, "Desc": "classdesc representing constantdesc"}{"node_name": "CD_ClassDesc", "type": "field", "idx": 19114, "Desc": "classdesc representing classdesc"}{"node_name": "CD_EnumDesc", "type": "field", "idx": 19115, "Desc": "classdesc representing enum.enumdesc"}{"node_name": "CD_MethodTypeDesc", "type": "field", "idx": 19116, "Desc": "classdesc representing methodtypedesc"}{"node_name": "CD_MethodHandleDesc", "type": "field", "idx": 19117, "Desc": "classdesc representing methodhandledesc"}{"node_name": "CD_DirectMethodHandleDesc", "type": "field", "idx": 19118, "Desc": "classdesc representing directmethodhandledesc"}{"node_name": "CD_VarHandleDesc", "type": "field", "idx": 19119, "Desc": "classdesc representing varhandle.varhandledesc"}{"node_name": "CD_MethodHandleDesc_Kind", "type": "field", "idx": 19120, "Desc": "classdesc representing directmethodhandledesc.kind"}{"node_name": "CD_DynamicConstantDesc", "type": "field", "idx": 19121, "Desc": "classdesc representing dynamicconstantdesc"}{"node_name": "CD_DynamicCallSiteDesc", "type": "field", "idx": 19122, "Desc": "classdesc representing dynamiccallsitedesc"}{"node_name": "CD_ConstantBootstraps", "type": "field", "idx": 19123, "Desc": "classdesc representing constantbootstraps"}{"node_name": "BSM_PRIMITIVE_CLASS", "type": "field", "idx": 19124, "Desc": "methodhandledesc representing constantbootstraps.primitiveclass"}{"node_name": "BSM_ENUM_CONSTANT", "type": "field", "idx": 19125, "Desc": "methodhandledesc representing constantbootstraps.enumconstant"}{"node_name": "BSM_NULL_CONSTANT", "type": "field", "idx": 19126, "Desc": "methodhandledesc representing constantbootstraps.nullconstant"}{"node_name": "BSM_VARHANDLE_FIELD", "type": "field", "idx": 19127, "Desc": "methodhandledesc representing constantbootstraps.fieldvarhandle"}{"node_name": "BSM_VARHANDLE_STATIC_FIELD", "type": "field", "idx": 19128, "Desc": "methodhandledesc representing constantbootstraps.staticvarhandle"}{"node_name": "BSM_VARHANDLE_ARRAY", "type": "field", "idx": 19129, "Desc": "methodhandledesc representing constantbootstraps.arrayvarhandle"}{"node_name": "BSM_INVOKE", "type": "field", "idx": 19130, "Desc": "methodhandledesc representing constantbootstraps.invoke"}{"node_name": "CD_int", "type": "field", "idx": 19131, "Desc": "classdesc representing the primitive type int"}{"node_name": "CD_long", "type": "field", "idx": 19132, "Desc": "classdesc representing the primitive type long"}{"node_name": "CD_float", "type": "field", "idx": 19133, "Desc": "classdesc representing the primitive type float"}{"node_name": "CD_double", "type": "field", "idx": 19134, "Desc": "classdesc representing the primitive type double"}{"node_name": "CD_short", "type": "field", "idx": 19135, "Desc": "classdesc representing the primitive type short"}{"node_name": "CD_byte", "type": "field", "idx": 19136, "Desc": "classdesc representing the primitive type byte"}{"node_name": "CD_char", "type": "field", "idx": 19137, "Desc": "classdesc representing the primitive type char"}{"node_name": "CD_boolean", "type": "field", "idx": 19138, "Desc": "classdesc representing the primitive type boolean"}{"node_name": "CD_void", "type": "field", "idx": 19139, "Desc": "classdesc representing the primitive type void"}{"node_name": "NULL", "type": "field", "idx": 19140, "Desc": "nominal descriptor representing the constant null"}{"node_name": "refKind", "type": "field", "idx": 19159, "Desc": "the corresponding refkind value for this kind of method handle , as defined by methodhandleinfo"}{"node_name": "isInterface", "type": "field", "idx": 19160, "Desc": "is this an interface"}{"node_name": "POSITIVE_INFINITY", "type": "field", "idx": 19278, "Desc": "a constant holding the positive infinity of type double . it is equal to the value returned by double.longbitstodouble ( 0x7ff0000000000000l ) ."}{"node_name": "NEGATIVE_INFINITY", "type": "field", "idx": 19279, "Desc": "a constant holding the negative infinity of type double . it is equal to the value returned by double.longbitstodouble ( 0xfff0000000000000l ) ."}{"node_name": "NaN", "type": "field", "idx": 19280, "Desc": "a constant holding a not-a-number ( nan ) value of type double . it is equivalent to the value returned by double.longbitstodouble ( 0x7ff8000000000000l ) ."}{"node_name": "MAX_VALUE", "type": "field", "idx": 19281, "Desc": "a constant holding the largest positive finite value of type double , ( 2-2-52 ) \u00b721023 . it is equal to the hexadecimal floating-point literal 0x1.fffffffffffffp +1023 and also equal to double.longbitstodouble ( 0x7fefffffffffffffl ) ."}{"node_name": "MIN_NORMAL", "type": "field", "idx": 19282, "Desc": "a constant holding the smallest positive normal value of type double , 2-1022 . it is equal to the hexadecimal floating-point literal 0x1.0p-1022 and also equal to double.longbitstodouble ( 0x0010000000000000l ) ."}{"node_name": "MIN_VALUE", "type": "field", "idx": 19283, "Desc": "a constant holding the smallest positive nonzero value of type double , 2-1074 . it is equal to the hexadecimal floating-point literal 0x0.0000000000001p-1022 and also equal to double.longbitstodouble ( 0x1l ) ."}{"node_name": "MAX_EXPONENT", "type": "field", "idx": 19284, "Desc": "maximum exponent a finite double variable may have . it is equal to the value returned by math.getexponent ( double.max_value ) ."}{"node_name": "MIN_EXPONENT", "type": "field", "idx": 19285, "Desc": "minimum exponent a normalized double variable may have . it is equal to the value returned by math.getexponent ( double.min_normal ) ."}{"node_name": "SIZE", "type": "field", "idx": 19286, "Desc": "the number of bits used to represent a double value ."}{"node_name": "BYTES", "type": "field", "idx": 19287, "Desc": "the number of bytes used to represent a double value ."}{"node_name": "TYPE", "type": "field", "idx": 19288, "Desc": "the class instance representing the primitive type double ."}{"node_name": "POSITIVE_INFINITY", "type": "field", "idx": 19406, "Desc": "a constant holding the positive infinity of type float . it is equal to the value returned by float.intbitstofloat ( 0x7f800000 ) ."}{"node_name": "NEGATIVE_INFINITY", "type": "field", "idx": 19407, "Desc": "a constant holding the negative infinity of type float . it is equal to the value returned by float.intbitstofloat ( 0xff800000 ) ."}{"node_name": "NaN", "type": "field", "idx": 19408, "Desc": "a constant holding a not-a-number ( nan ) value of type float . it is equivalent to the value returned by float.intbitstofloat ( 0x7fc00000 ) ."}{"node_name": "MAX_VALUE", "type": "field", "idx": 19409, "Desc": "a constant holding the largest positive finite value of type float , ( 2-2-23 ) \u00b72127 . it is equal to the hexadecimal floating-point literal 0x1.fffffep +127f and also equal to float.intbitstofloat ( 0x7f7fffff ) ."}{"node_name": "MIN_NORMAL", "type": "field", "idx": 19410, "Desc": "a constant holding the smallest positive normal value of type float , 2-126 . it is equal to the hexadecimal floating-point literal 0x1.0p-126f and also equal to float.intbitstofloat ( 0x00800000 ) ."}{"node_name": "MIN_VALUE", "type": "field", "idx": 19411, "Desc": "a constant holding the smallest positive nonzero value of type float , 2-149 . it is equal to the hexadecimal floating-point literal 0x0.000002p-126f and also equal to float.intbitstofloat ( 0x1 ) ."}{"node_name": "MAX_EXPONENT", "type": "field", "idx": 19412, "Desc": "maximum exponent a finite float variable may have . it is equal to the value returned by math.getexponent ( float.max_value ) ."}{"node_name": "MIN_EXPONENT", "type": "field", "idx": 19413, "Desc": "minimum exponent a normalized float variable may have . it is equal to the value returned by math.getexponent ( float.min_normal ) ."}{"node_name": "SIZE", "type": "field", "idx": 19414, "Desc": "the number of bits used to represent a float value ."}{"node_name": "BYTES", "type": "field", "idx": 19415, "Desc": "the number of bytes used to represent a float value ."}{"node_name": "TYPE", "type": "field", "idx": 19416, "Desc": "the class instance representing the primitive type float ."}{"node_name": "MIN_VALUE", "type": "field", "idx": 19606, "Desc": "a constant holding the minimum value an int can have , -231 ."}{"node_name": "MAX_VALUE", "type": "field", "idx": 19607, "Desc": "a constant holding the maximum value an int can have , 231-1 ."}{"node_name": "TYPE", "type": "field", "idx": 19608, "Desc": "the class instance representing the primitive type int ."}{"node_name": "SIZE", "type": "field", "idx": 19609, "Desc": "the number of bits used to represent an int value in two's complement binary form ."}{"node_name": "BYTES", "type": "field", "idx": 19610, "Desc": "the number of bytes used to represent an int value in two's complement binary form ."}{"node_name": "FLAG_SERIALIZABLE", "type": "field", "idx": 19815, "Desc": "flag for alternate metafactories indicating the lambda object must be serializable"}{"node_name": "FLAG_MARKERS", "type": "field", "idx": 19816, "Desc": "flag for alternate metafactories indicating the lambda object implements other marker interfaces besides serializable"}{"node_name": "FLAG_BRIDGES", "type": "field", "idx": 19817, "Desc": "flag for alternate metafactories indicating the lambda object requires additional bridge methods"}{"node_name": "REF_getField", "type": "field", "idx": 19867, "Desc": "a direct method handle reference kind , as defined in the table above ."}{"node_name": "REF_getStatic", "type": "field", "idx": 19868, "Desc": "a direct method handle reference kind , as defined in the table above ."}{"node_name": "REF_putField", "type": "field", "idx": 19869, "Desc": "a direct method handle reference kind , as defined in the table above ."}{"node_name": "REF_putStatic", "type": "field", "idx": 19870, "Desc": "a direct method handle reference kind , as defined in the table above ."}{"node_name": "REF_invokeVirtual", "type": "field", "idx": 19871, "Desc": "a direct method handle reference kind , as defined in the table above ."}{"node_name": "REF_invokeStatic", "type": "field", "idx": 19872, "Desc": "a direct method handle reference kind , as defined in the table above ."}{"node_name": "REF_invokeSpecial", "type": "field", "idx": 19873, "Desc": "a direct method handle reference kind , as defined in the table above ."}{"node_name": "REF_newInvokeSpecial", "type": "field", "idx": 19874, "Desc": "a direct method handle reference kind , as defined in the table above ."}{"node_name": "REF_invokeInterface", "type": "field", "idx": 19875, "Desc": "a direct method handle reference kind , as defined in the table above ."}{"node_name": "PUBLIC", "type": "field", "idx": 20029, "Desc": "a single-bit mask representing public access , which may contribute to the result of lookupmodes . the value , 0x01 , happens to be the same as the value of the public modifier bit ."}{"node_name": "PRIVATE", "type": "field", "idx": 20030, "Desc": "a single-bit mask representing private access , which may contribute to the result of lookupmodes . the value , 0x02 , happens to be the same as the value of the private modifier bit ."}{"node_name": "PROTECTED", "type": "field", "idx": 20031, "Desc": "a single-bit mask representing protected access , which may contribute to the result of lookupmodes . the value , 0x04 , happens to be the same as the value of the protected modifier bit ."}{"node_name": "PACKAGE", "type": "field", "idx": 20032, "Desc": "a single-bit mask representing package access ( default access ) , which may contribute to the result of lookupmodes . the value is 0x08 , which does not correspond meaningfully to any particular modifier bit ."}{"node_name": "MODULE", "type": "field", "idx": 20033, "Desc": "a single-bit mask representing module access ( default access ) , which may contribute to the result of lookupmodes . the value is 0x10 , which does not correspond meaningfully to any particular modifier bit . in conjunction with the public modifier bit , a lookup with this lookup mode can access all public types in the module of the lookup class and public types in packages exported by other modules to the module of the lookup class ."}{"node_name": "UNCONDITIONAL", "type": "field", "idx": 20034, "Desc": "a single-bit mask representing unconditional access which may contribute to the result of lookupmodes . the value is 0x20 , which does not correspond meaningfully to any particular modifier bit . a lookup with this lookup mode assumes readability . in conjunction with the public modifier bit , a lookup with this lookup mode can access all public members of public types of all modules where the type is in a package that is exported unconditionally ."}{"node_name": "MIN_VALUE", "type": "field", "idx": 20391, "Desc": "a constant holding the minimum value a long can have , -263 ."}{"node_name": "MAX_VALUE", "type": "field", "idx": 20392, "Desc": "a constant holding the maximum value a long can have , 263-1 ."}{"node_name": "TYPE", "type": "field", "idx": 20393, "Desc": "the class instance representing the primitive type long ."}{"node_name": "SIZE", "type": "field", "idx": 20394, "Desc": "the number of bits used to represent a long value in two's complement binary form ."}{"node_name": "BYTES", "type": "field", "idx": 20395, "Desc": "the number of bytes used to represent a long value in two's complement binary form ."}{"node_name": "CLASS_LOADING_MXBEAN_NAME", "type": "field", "idx": 20537, "Desc": "string representation of the objectname for the classloadingmxbean ."}{"node_name": "COMPILATION_MXBEAN_NAME", "type": "field", "idx": 20538, "Desc": "string representation of the objectname for the compilationmxbean ."}{"node_name": "MEMORY_MXBEAN_NAME", "type": "field", "idx": 20539, "Desc": "string representation of the objectname for the memorymxbean ."}{"node_name": "OPERATING_SYSTEM_MXBEAN_NAME", "type": "field", "idx": 20540, "Desc": "string representation of the objectname for the operatingsystemmxbean ."}{"node_name": "RUNTIME_MXBEAN_NAME", "type": "field", "idx": 20541, "Desc": "string representation of the objectname for the runtimemxbean ."}{"node_name": "THREAD_MXBEAN_NAME", "type": "field", "idx": 20542, "Desc": "string representation of the objectname for the threadmxbean ."}{"node_name": "GARBAGE_COLLECTOR_MXBEAN_DOMAIN_TYPE", "type": "field", "idx": 20543, "Desc": "the domain name and the type key property in the objectname for a garbagecollectormxbean . the unique objectname for a garbagecollectormxbean can be formed by appending this string with \" , name= collector's name \" ."}{"node_name": "MEMORY_MANAGER_MXBEAN_DOMAIN_TYPE", "type": "field", "idx": 20544, "Desc": "the domain name and the type key property in the objectname for a memorymanagermxbean . the unique objectname for a memorymanagermxbean can be formed by appending this string with \" , name= manager's name \" ."}{"node_name": "MEMORY_POOL_MXBEAN_DOMAIN_TYPE", "type": "field", "idx": 20545, "Desc": "the domain name and the type key property in the objectname for a memorypoolmxbean . the unique objectname for a memorypoolmxbean can be formed by appending this string with , name =p ool's name ."}{"node_name": "MEMORY_THRESHOLD_EXCEEDED", "type": "field", "idx": 20590, "Desc": "notification type denoting that the memory usage of a memory pool has reached or exceeded its usage threshold value . this notification is emitted by memorymxbean . subsequent crossing of the usage threshold value does not cause further notification until the memory usage has returned to become less than the usage threshold value . the value of this notification type is java.management.memory.threshold.exceeded ."}{"node_name": "MEMORY_COLLECTION_THRESHOLD_EXCEEDED", "type": "field", "idx": 20591, "Desc": "notification type denoting that the memory usage of a memory pool is greater than or equal to its collection usage threshold after the java virtual machine has expended effort in recycling unused objects in that memory pool . this notification is emitted by memorymxbean . the value of this notification type is java.management.memory.collection.threshold.exceeded ."}{"node_name": "E", "type": "field", "idx": 20760, "Desc": "the double value that is closer than any other to e , the base of the natural logarithms ."}{"node_name": "PI", "type": "field", "idx": 20761, "Desc": "the double value that is closer than any other to pi , the ratio of the circumference of a circle to its diameter ."}{"node_name": "PIPE", "type": "field", "idx": 21433, "Desc": "indicates that subprocess i / o will be connected to the current java process over a pipe . this is the default handling of subprocess standard i / o . it will always be true that redirect.pipe.file() == null && redirect.pipe.type() == redirect.type.pipe"}{"node_name": "INHERIT", "type": "field", "idx": 21434, "Desc": "indicates that subprocess i / o source or destination will be the same as those of the current process . this is the normal behavior of most operating system command interpreters ( shells ) . it will always be true that redirect.inherit.file() == null && redirect.inherit.type() == redirect.type.inherit"}{"node_name": "DISCARD", "type": "field", "idx": 21435, "Desc": "indicates that subprocess output will be discarded . a typical implementation discards the output by writing to an operating system specific \" null file \" . it will always be true that redirect.discard.file() is the filename appropriate for the operating system and may be null && redirect.discard.type() == redirect.type.write"}{"node_name": "PUBLIC", "type": "field", "idx": 21792, "Desc": "identifies the set of all public members of a class or interface , including inherited members ."}{"node_name": "DECLARED", "type": "field", "idx": 21793, "Desc": "identifies the set of declared members of a class or interface . inherited members are not included ."}{"node_name": "PUBLIC", "type": "field", "idx": 21828, "Desc": "the int value representing the public modifier ."}{"node_name": "PRIVATE", "type": "field", "idx": 21829, "Desc": "the int value representing the private modifier ."}{"node_name": "PROTECTED", "type": "field", "idx": 21830, "Desc": "the int value representing the protected modifier ."}{"node_name": "STATIC", "type": "field", "idx": 21831, "Desc": "the int value representing the static modifier ."}{"node_name": "FINAL", "type": "field", "idx": 21832, "Desc": "the int value representing the final modifier ."}{"node_name": "SYNCHRONIZED", "type": "field", "idx": 21833, "Desc": "the int value representing the synchronized modifier ."}{"node_name": "VOLATILE", "type": "field", "idx": 21834, "Desc": "the int value representing the volatile modifier ."}{"node_name": "TRANSIENT", "type": "field", "idx": 21835, "Desc": "the int value representing the transient modifier ."}{"node_name": "NATIVE", "type": "field", "idx": 21836, "Desc": "the int value representing the native modifier ."}{"node_name": "INTERFACE", "type": "field", "idx": 21837, "Desc": "the int value representing the interface modifier ."}{"node_name": "ABSTRACT", "type": "field", "idx": 21838, "Desc": "the int value representing the abstract modifier ."}{"node_name": "STRICT", "type": "field", "idx": 21839, "Desc": "the int value representing the strictfp modifier ."}{"node_name": "h", "type": "field", "idx": 21901, "Desc": "the invocation handler for this proxy instance ."}{"node_name": "MIN_VALUE", "type": "field", "idx": 22096, "Desc": "a constant holding the minimum value a short can have , -215 ."}{"node_name": "MAX_VALUE", "type": "field", "idx": 22097, "Desc": "a constant holding the maximum value a short can have , 215-1 ."}{"node_name": "TYPE", "type": "field", "idx": 22098, "Desc": "the class instance representing the primitive type short ."}{"node_name": "SIZE", "type": "field", "idx": 22099, "Desc": "the number of bits used to represent a short value in two's complement binary form ."}{"node_name": "BYTES", "type": "field", "idx": 22100, "Desc": "the number of bytes used to represent a short value in two's complement binary form ."}{"node_name": "E", "type": "field", "idx": 22202, "Desc": "the double value that is closer than any other to e , the base of the natural logarithms ."}{"node_name": "PI", "type": "field", "idx": 22203, "Desc": "the double value that is closer than any other to pi , the ratio of the circumference of a circle to its diameter ."}{"node_name": "CASE_INSENSITIVE_ORDER", "type": "field", "idx": 22389, "Desc": "a comparator that orders string objects as by comparetoignorecase . this comparator is serializable . note that this comparator does not take locale into account , and will result in an unsatisfactory ordering for certain locales . the collator class provides locale-sensitive comparison ."}{"node_name": "in", "type": "field", "idx": 22885, "Desc": "the \" standard \" input stream . this stream is already open and ready to supply input data . typically this stream corresponds to keyboard input or another input source specified by the host environment or user ."}{"node_name": "out", "type": "field", "idx": 22886, "Desc": "the \" standard \" output stream . this stream is already open and ready to accept output data . typically this stream corresponds to display output or another output destination specified by the host environment or user . for simple stand-alone java applications , a typical way to write a line of output data is : system.out.println ( data ) see the println methods in class printstream ."}{"node_name": "err", "type": "field", "idx": 22887, "Desc": "the \" standard \" error output stream . this stream is already open and ready to accept output data . typically this stream corresponds to display output or another output destination specified by the host environment or user . by convention , this output stream is used to display error messages or other information that should come to the immediate attention of a user even if the principal output stream , the value of the variable out , has been redirected to a file or other destination that is typically not continuously monitored ."}{"node_name": "MIN_PRIORITY", "type": "field", "idx": 22993, "Desc": "the minimum priority that a thread can have ."}{"node_name": "NORM_PRIORITY", "type": "field", "idx": 22994, "Desc": "the default priority that is assigned to a thread ."}{"node_name": "MAX_PRIORITY", "type": "field", "idx": 22995, "Desc": "the maximum priority that a thread can have ."}{"node_name": "TYPE", "type": "field", "idx": 23205, "Desc": "the class object representing the pseudo-type corresponding to the keyword void ."}{"node_name": "ZERO", "type": "field", "idx": 23207, "Desc": "the value 0 , with a scale of 0 ."}{"node_name": "ONE", "type": "field", "idx": 23208, "Desc": "the value 1 , with a scale of 0 ."}{"node_name": "TEN", "type": "field", "idx": 23209, "Desc": "the value 10 , with a scale of 0 ."}{"node_name": "ZERO", "type": "field", "idx": 23362, "Desc": "the biginteger constant zero ."}{"node_name": "ONE", "type": "field", "idx": 23363, "Desc": "the biginteger constant one ."}{"node_name": "TWO", "type": "field", "idx": 23364, "Desc": "the biginteger constant two ."}{"node_name": "TEN", "type": "field", "idx": 23365, "Desc": "the biginteger constant ten ."}{"node_name": "UNLIMITED", "type": "field", "idx": 23474, "Desc": "a mathcontext object whose settings have the values required for unlimited precision arithmetic . the values of the settings are : precision=0 roundingmode=half_up"}{"node_name": "DECIMAL32", "type": "field", "idx": 23475, "Desc": "a mathcontext object with a precision setting matching the ieee 754r decimal32 format , 7 digits , and a rounding mode of half_even , the ieee 754r default ."}{"node_name": "DECIMAL64", "type": "field", "idx": 23476, "Desc": "a mathcontext object with a precision setting matching the ieee 754r decimal64 format , 16 digits , and a rounding mode of half_even , the ieee 754r default ."}{"node_name": "DECIMAL128", "type": "field", "idx": 23477, "Desc": "a mathcontext object with a precision setting matching the ieee 754r decimal128 format , 34 digits , and a rounding mode of half_even , the ieee 754r default ."}{"node_name": "ACCEPT_ALL", "type": "field", "idx": 23602, "Desc": "one pre-defined policy which accepts all cookies ."}{"node_name": "ACCEPT_NONE", "type": "field", "idx": 23603, "Desc": "one pre-defined policy which accepts no cookies ."}{"node_name": "ACCEPT_ORIGINAL_SERVER", "type": "field", "idx": 23604, "Desc": "one pre-defined policy which only accepts cookies from original server ."}{"node_name": "localPort", "type": "field", "idx": 23729, "Desc": "the local port number ."}{"node_name": "fd", "type": "field", "idx": 23730, "Desc": "the file descriptor object ."}{"node_name": "NO_PROXY", "type": "field", "idx": 23776, "Desc": "a proxy selector that always return proxy.no_proxy implying a direct connection . this is a convenience object that can be passed to proxy ( proxyselector ) in order to build an instance of httpclient that uses no proxy ."}{"node_name": "NORMAL_CLOSURE", "type": "field", "idx": 24030, "Desc": "the websocket close message status code ( 1000 ) , indicating normal closure , meaning that the purpose for which the connection was established has been fulfilled ."}{"node_name": "method", "type": "field", "idx": 24141, "Desc": "the http method ( get , post , put , etc . ) ."}{"node_name": "chunkLength", "type": "field", "idx": 24142, "Desc": "the chunk-length when using chunked encoding streaming mode for output . a value of -1 means chunked encoding is disabled for output ."}{"node_name": "fixedContentLength", "type": "field", "idx": 24143, "Desc": "the fixed content-length when using fixed-length streaming mode . a value of -1 means fixed-length streaming mode is disabled for output . note : fixedcontentlengthlong is recommended instead of fixedContentLength , as it allows larger content lengths to be set ."}{"node_name": "fixedContentLengthLong", "type": "field", "idx": 24144, "Desc": "the fixed content-length when using fixed-length streaming mode . a value of -1 means fixed-length streaming mode is disabled for output ."}{"node_name": "responseCode", "type": "field", "idx": 24145, "Desc": "an int representing the three digit http status-code . 1xx : informational 2xx : success 3xx : redirection 4xx : client error 5xx : server error"}{"node_name": "responseMessage", "type": "field", "idx": 24146, "Desc": "the http response message ."}{"node_name": "instanceFollowRedirects", "type": "field", "idx": 24147, "Desc": "if true , the protocol will automatically follow redirects . if false , the protocol will not automatically follow redirects . instanceFollowRedirects is set by the setinstancefollowredirects method . its value is returned by the getinstancefollowredirects method . its default value is based on the value of the static followredirects at httpurlconnection construction time ."}{"node_name": "HTTP_OK", "type": "field", "idx": 24148, "Desc": "http status-code 200 : ok ."}{"node_name": "HTTP_CREATED", "type": "field", "idx": 24149, "Desc": "http status-code 201 : created ."}{"node_name": "HTTP_ACCEPTED", "type": "field", "idx": 24150, "Desc": "http status-code 202 : accepted ."}{"node_name": "HTTP_NOT_AUTHORITATIVE", "type": "field", "idx": 24151, "Desc": "http status-code 203 : non-authoritative information ."}{"node_name": "HTTP_NO_CONTENT", "type": "field", "idx": 24152, "Desc": "http status-code 204 : no content ."}{"node_name": "HTTP_RESET", "type": "field", "idx": 24153, "Desc": "http status-code 205 : reset content ."}{"node_name": "HTTP_PARTIAL", "type": "field", "idx": 24154, "Desc": "http status-code 206 : partial content ."}{"node_name": "HTTP_MULT_CHOICE", "type": "field", "idx": 24155, "Desc": "http status-code 300 : multiple choices ."}{"node_name": "HTTP_MOVED_PERM", "type": "field", "idx": 24156, "Desc": "http status-code 301 : moved permanently ."}{"node_name": "HTTP_MOVED_TEMP", "type": "field", "idx": 24157, "Desc": "http status-code 302 : temporary redirect ."}{"node_name": "HTTP_SEE_OTHER", "type": "field", "idx": 24158, "Desc": "http status-code 303 : see other ."}{"node_name": "HTTP_NOT_MODIFIED", "type": "field", "idx": 24159, "Desc": "http status-code 304 : not modified ."}{"node_name": "HTTP_USE_PROXY", "type": "field", "idx": 24160, "Desc": "http status-code 305 : use proxy ."}{"node_name": "HTTP_BAD_REQUEST", "type": "field", "idx": 24161, "Desc": "http status-code 400 : bad request ."}{"node_name": "HTTP_UNAUTHORIZED", "type": "field", "idx": 24162, "Desc": "http status-code 401 : unauthorized ."}{"node_name": "HTTP_PAYMENT_REQUIRED", "type": "field", "idx": 24163, "Desc": "http status-code 402 : payment required ."}{"node_name": "HTTP_FORBIDDEN", "type": "field", "idx": 24164, "Desc": "http status-code 403 : forbidden ."}{"node_name": "HTTP_NOT_FOUND", "type": "field", "idx": 24165, "Desc": "http status-code 404 : not found ."}{"node_name": "HTTP_BAD_METHOD", "type": "field", "idx": 24166, "Desc": "http status-code 405 : method not allowed ."}{"node_name": "HTTP_NOT_ACCEPTABLE", "type": "field", "idx": 24167, "Desc": "http status-code 406 : not acceptable ."}{"node_name": "HTTP_PROXY_AUTH", "type": "field", "idx": 24168, "Desc": "http status-code 407 : proxy authentication required ."}{"node_name": "HTTP_CLIENT_TIMEOUT", "type": "field", "idx": 24169, "Desc": "http status-code 408 : request time-out ."}{"node_name": "HTTP_CONFLICT", "type": "field", "idx": 24170, "Desc": "http status-code 409 : conflict ."}{"node_name": "HTTP_GONE", "type": "field", "idx": 24171, "Desc": "http status-code 410 : gone ."}{"node_name": "HTTP_LENGTH_REQUIRED", "type": "field", "idx": 24172, "Desc": "http status-code 411 : length required ."}{"node_name": "HTTP_PRECON_FAILED", "type": "field", "idx": 24173, "Desc": "http status-code 412 : precondition failed ."}{"node_name": "HTTP_ENTITY_TOO_LARGE", "type": "field", "idx": 24174, "Desc": "http status-code 413 : request entity too large ."}{"node_name": "HTTP_REQ_TOO_LONG", "type": "field", "idx": 24175, "Desc": "http status-code 414 : request-uri too large ."}{"node_name": "HTTP_UNSUPPORTED_TYPE", "type": "field", "idx": 24176, "Desc": "http status-code 415 : unsupported media type ."}{"node_name": "HTTP_INTERNAL_ERROR", "type": "field", "idx": 24177, "Desc": "http status-code 500 : internal server error ."}{"node_name": "HTTP_NOT_IMPLEMENTED", "type": "field", "idx": 24178, "Desc": "http status-code 501 : not implemented ."}{"node_name": "HTTP_BAD_GATEWAY", "type": "field", "idx": 24179, "Desc": "http status-code 502 : bad gateway ."}{"node_name": "HTTP_UNAVAILABLE", "type": "field", "idx": 24180, "Desc": "http status-code 503 : service unavailable ."}{"node_name": "HTTP_GATEWAY_TIMEOUT", "type": "field", "idx": 24181, "Desc": "http status-code 504 : gateway timeout ."}{"node_name": "HTTP_VERSION", "type": "field", "idx": 24182, "Desc": "http status-code 505 : http version not supported ."}{"node_name": "ALLOW_UNASSIGNED", "type": "field", "idx": 24213, "Desc": "flag to allow processing of unassigned code points"}{"node_name": "USE_STD3_ASCII_RULES", "type": "field", "idx": 24214, "Desc": "flag to turn on the check against std-3 ascii rules"}{"node_name": "jarFileURLConnection", "type": "field", "idx": 24334, "Desc": "the connection to the jar file url , if the connection has been initiated . this should be set by connect ."}{"node_name": "NO_PROXY", "type": "field", "idx": 24431, "Desc": "a proxy setting that represents a direct connection , basically telling the protocol handler not to use any proxying . used , for instance , to create sockets bypassing any other global proxy settings ( like socks ): socket s = new socket ( proxy.no_proxy );"}{"node_name": "fd", "type": "field", "idx": 24624, "Desc": "the file descriptor object for this socket ."}{"node_name": "address", "type": "field", "idx": 24625, "Desc": "the ip address of the remote end of this socket ."}{"node_name": "port", "type": "field", "idx": 24626, "Desc": "the port number on the remote host to which this socket is connected ."}{"node_name": "localport", "type": "field", "idx": 24627, "Desc": "the local port number to which this socket is connected ."}{"node_name": "TCP_NODELAY", "type": "field", "idx": 24677, "Desc": "disable nagle's algorithm for this connection . written data to the network is not buffered pending acknowledgement of previously written data . valid for tcp only : socketimpl ."}{"node_name": "SO_BINDADDR", "type": "field", "idx": 24678, "Desc": "fetch the local address binding of a socket ( this option cannot be \" set \" only \" gotten \" , since sockets are bound at creation time , and so the locally bound address cannot be changed ) . the default local address of a socket is inaddr_any , meaning any local address on a multi-homed host . a multi-homed host can use this option to accept connections to only one of its addresses ( in the case of a serversocket or datagramsocket ) , or to specify its return address to the peer ( for a socket or datagramsocket ) . the parameter of this option is an inetaddress . this option must be specified in the constructor . valid for : socketimpl , datagramsocketimpl"}{"node_name": "SO_REUSEADDR", "type": "field", "idx": 24679, "Desc": "sets so_reuseaddr for a socket . this is used only for multicastsockets in java , and it is set by default for multicastsockets . valid for : datagramsocketimpl"}{"node_name": "SO_REUSEPORT", "type": "field", "idx": 24680, "Desc": "sets so_reuseport for a socket . this option enables and disables the ability to have multiple sockets listen to the same address and port . valid for : socketimpl , datagramsocketimpl"}{"node_name": "SO_BROADCAST", "type": "field", "idx": 24681, "Desc": "sets so_broadcast for a socket . this option enables and disables the ability of the process to send broadcast messages . it is supported for only datagram sockets and only on networks that support the concept of a broadcast message ( e.g. ethernet , token ring , etc . ) , and it is set by default for datagramsockets ."}{"node_name": "IP_MULTICAST_IF", "type": "field", "idx": 24682, "Desc": "set which outgoing interface on which to send multicast packets . useful on hosts with multiple network interfaces , where applications want to use other than the system default . takes / returns an inetaddress . valid for multicast : datagramsocketimpl"}{"node_name": "IP_MULTICAST_IF2", "type": "field", "idx": 24683, "Desc": "same as above . this option is introduced so that the behaviour with ip_multicast_if will be kept the same as before , while this new option can support setting outgoing interfaces with either ipv4 and ipv6 addresses . note : make sure there is no conflict with this"}{"node_name": "IP_MULTICAST_LOOP", "type": "field", "idx": 24684, "Desc": "this option enables or disables local loopback of multicast datagrams . this option is enabled by default for multicast sockets ."}{"node_name": "IP_TOS", "type": "field", "idx": 24685, "Desc": "this option sets the type-of-service or traffic class field in the ip header for a tcp or udp socket ."}{"node_name": "SO_LINGER", "type": "field", "idx": 24686, "Desc": "specify a linger-on-close timeout . this option disables / enables immediate return from a close() of a tcp socket . enabling this option with a non-zero integer timeout means that a close() will block pending the transmission and acknowledgement of all data written to the peer , at which point the socket is closed gracefully . upon reaching the linger timeout , the socket is closed forcefully , with a tcp rst . enabling the option with a timeout of zero does a forceful close immediately . if the specified timeout value exceeds 65,535 it will be reduced to 65,535 . valid only for tcp : socketimpl"}{"node_name": "SO_TIMEOUT", "type": "field", "idx": 24687, "Desc": "set a timeout on blocking socket operations : serversocket.accept() ; socketinputstream.read() ; datagramsocket.receive() ; the option must be set prior to entering a blocking operation to take effect . if the timeout expires and the operation would continue to block , java.io.interruptedioexception is raised . the socket is not closed in this case . valid for all sockets : socketimpl , datagramsocketimpl"}{"node_name": "SO_SNDBUF", "type": "field", "idx": 24688, "Desc": "set a hint the size of the underlying buffers used by the platform for outgoing network i / o . when used in set , this is a suggestion to the kernel from the application about the size of buffers to use for the data to be sent over the socket . when used in get , this must return the size of the buffer actually used by the platform when sending out data on this socket . valid for all sockets : socketimpl , datagramsocketimpl"}{"node_name": "SO_RCVBUF", "type": "field", "idx": 24689, "Desc": "set a hint the size of the underlying buffers used by the platform for incoming network i / o . when used in set , this is a suggestion to the kernel from the application about the size of buffers to use for the data to be received over the socket . when used in get , this must return the size of the buffer actually used by the platform when receiving in data on this socket . valid for all sockets : socketimpl , datagramsocketimpl"}{"node_name": "SO_KEEPALIVE", "type": "field", "idx": 24690, "Desc": "when the keepalive option is set for a tcp socket and no data has been exchanged across the socket in either direction for 2 hours ( note : the actual value is implementation dependent ) , tcp automatically sends a keepalive probe to the peer . this probe is a tcp segment to which the peer must respond . one of three responses is expected : 1 . the peer responds with the expected ack . the application is not notified ( since everything is ok ) . tcp will send another probe following another 2 hours of inactivity . 2 . the peer responds with an rst , which tells the local tcp that the peer host has crashed and rebooted . the socket is closed . 3 . there is no response from the peer . the socket is closed . the purpose of this option is to detect if the peer host crashes . valid only for tcp socket : socketimpl"}{"node_name": "SO_OOBINLINE", "type": "field", "idx": 24691, "Desc": "when the oobinline option is set , any tcp urgent data received on the socket will be received through the socket input stream . when the option is disabled ( which is the default ) urgent data is silently discarded ."}{"node_name": "SO_BROADCAST", "type": "field", "idx": 24719, "Desc": "allow transmission of broadcast datagrams . the value of this socket option is a boolean that represents whether the option is enabled or disabled . the option is specific to datagram-oriented sockets sending to ipv4 broadcast addresses . when the socket option is enabled then the socket can be used to send broadcast datagrams . the initial value of this socket option is false . the socket option may be enabled or disabled at any time . some operating systems may require that the java virtual machine be started with implementation specific privileges to enable this option or send broadcast datagrams ."}{"node_name": "SO_KEEPALIVE", "type": "field", "idx": 24720, "Desc": "keep connection alive . the value of this socket option is a boolean that represents whether the option is enabled or disabled . when the so_keepalive option is enabled the operating system may use a keep-alive mechanism to periodically probe the other end of a connection when the connection is otherwise idle . the exact semantics of the keep alive mechanism is system dependent and therefore unspecified . the initial value of this socket option is false . the socket option may be enabled or disabled at any time ."}{"node_name": "SO_SNDBUF", "type": "field", "idx": 24721, "Desc": "the size of the socket send buffer . the value of this socket option is an integer that is the size of the socket send buffer in bytes . the socket send buffer is an output buffer used by the networking implementation . it may need to be increased for high-volume connections . the value of the socket option is a hint to the implementation to size the buffer and the actual size may differ . the socket option can be queried to retrieve the actual size . for datagram-oriented sockets , the size of the send buffer may limit the size of the datagrams that may be sent by the socket . whether datagrams larger than the buffer size are sent or discarded is system dependent . the initial / default size of the socket send buffer and the range of allowable values is system dependent although a negative size is not allowed . an attempt to set the socket send buffer to larger than its maximum size causes it to be set to its maximum size . an implementation allows this socket option to be set before the socket is bound or connected . whether an implementation allows the socket send buffer to be changed after the socket is bound is system dependent ."}{"node_name": "SO_RCVBUF", "type": "field", "idx": 24722, "Desc": "the size of the socket receive buffer . the value of this socket option is an integer that is the size of the socket receive buffer in bytes . the socket receive buffer is an input buffer used by the networking implementation . it may need to be increased for high-volume connections or decreased to limit the possible backlog of incoming data . the value of the socket option is a hint to the implementation to size the buffer and the actual size may differ . for datagram-oriented sockets , the size of the receive buffer may limit the size of the datagrams that can be received . whether datagrams larger than the buffer size can be received is system dependent . increasing the socket receive buffer may be important for cases where datagrams arrive in bursts faster than they can be processed . in the case of stream-oriented sockets and the tcp / ip protocol , the size of the socket receive buffer may be used when advertising the size of the tcp receive window to the remote peer . the initial / default size of the socket receive buffer and the range of allowable values is system dependent although a negative size is not allowed . an attempt to set the socket receive buffer to larger than its maximum size causes it to be set to its maximum size . an implementation allows this socket option to be set before the socket is bound or connected . whether an implementation allows the socket receive buffer to be changed after the socket is bound is system dependent ."}{"node_name": "SO_REUSEADDR", "type": "field", "idx": 24723, "Desc": "re-use address . the value of this socket option is a boolean that represents whether the option is enabled or disabled . the exact semantics of this socket option are socket type and system dependent . in the case of stream-oriented sockets , this socket option will usually determine whether the socket can be bound to a socket address when a previous connection involving that socket address is in the time_wait state . on implementations where the semantics differ , and the socket option is not required to be enabled in order to bind the socket when a previous connection is in this state , then the implementation may choose to ignore this option . for datagram-oriented sockets the socket option is used to allow multiple programs bind to the same address . this option should be enabled when the socket is to be used for internet protocol ( ip ) multicasting . an implementation allows this socket option to be set before the socket is bound or connected . changing the value of this socket option after the socket is bound has no effect . the default value of this socket option is system dependent ."}{"node_name": "SO_REUSEPORT", "type": "field", "idx": 24724, "Desc": "re-use port . the value of this socket option is a boolean that represents whether the option is enabled or disabled . the exact semantics of this socket option are socket type and system dependent . in the case of stream-oriented sockets , this socket option usually allows multiple listening sockets to be bound to both same address and same port . for datagram-oriented sockets the socket option usually allows multiple udp sockets to be bound to the same address and port . an implementation allows this socket option to be set before the socket is bound or connected . changing the value of this socket option after the socket is bound has no effect ."}{"node_name": "SO_LINGER", "type": "field", "idx": 24725, "Desc": "linger on close if data is present . the value of this socket option is an integer that controls the action taken when unsent data is queued on the socket and a method to close the socket is invoked . if the value of the socket option is zero or greater , then it represents a timeout value , in seconds , known as the linger interval . the linger interval is the timeout for the close method to block while the operating system attempts to transmit the unsent data or it decides that it is unable to transmit the data . if the value of the socket option is less than zero then the option is disabled . in that case the close method does not wait until unsent data is transmitted ; if possible the operating system will transmit any unsent data before the connection is closed . this socket option is intended for use with sockets that are configured in blocking mode only . the behavior of the close method when this option is enabled on a non-blocking socket is not defined . the initial value of this socket option is a negative value , meaning that the option is disabled . the option may be enabled , or the linger interval changed , at any time . the maximum value of the linger interval is system dependent . setting the linger interval to a value that is greater than its maximum value causes the linger interval to be set to its maximum value ."}{"node_name": "IP_TOS", "type": "field", "idx": 24726, "Desc": "the type of service ( tos ) octet in the internet protocol ( ip ) header . the value of this socket option is an integer representing the value of the tos octet in ip packets sent by sockets to an ipv4 socket . the interpretation of the tos octet is network specific and is not defined by this class . further information on the tos octet can be found in rfc 1349 and rfc 2474 . the value of the socket option is a hint . an implementation may ignore the value , or ignore specific values . the initial / default value of the tos field in the tos octet is implementation specific but will typically be 0 . for datagram-oriented sockets the option may be configured at any time after the socket has been bound . the new value of the octet is used when sending subsequent datagrams . it is system dependent whether this option can be queried or changed prior to binding the socket . the behavior of this socket option on a stream-oriented socket , or an ipv6 socket , is not defined in this release ."}{"node_name": "IP_MULTICAST_IF", "type": "field", "idx": 24727, "Desc": "the network interface for internet protocol ( ip ) multicast datagrams . the value of this socket option is a networkinterface that represents the outgoing interface for multicast datagrams sent by the datagram-oriented socket . for ipv6 sockets then it is system dependent whether setting this option also sets the outgoing interface for multicast datagrams sent to ipv4 addresses . the initial / default value of this socket option may be null to indicate that outgoing interface will be selected by the operating system , typically based on the network routing tables . an implementation allows this socket option to be set after the socket is bound . whether the socket option can be queried or changed prior to binding the socket is system dependent ."}{"node_name": "IP_MULTICAST_TTL", "type": "field", "idx": 24728, "Desc": "the time-to-live for internet protocol ( ip ) multicast datagrams . the value of this socket option is an integer in the range 0 <= value <= 255 . it is used to control the scope of multicast datagrams sent by the datagram-oriented socket . in the case of an ipv4 socket the option is the time-to-live ( ttl ) on multicast datagrams sent by the socket . datagrams with a ttl of zero are not transmitted on the network but may be delivered locally . in the case of an ipv6 socket the option is the hop limit which is number of hops that the datagram can pass through before expiring on the network . for ipv6 sockets it is system dependent whether the option also sets the time-to-live on multicast datagrams sent to ipv4 addresses . the initial / default value of the time-to-live setting is typically 1 . an implementation allows this socket option to be set after the socket is bound . whether the socket option can be queried or changed prior to binding the socket is system dependent ."}{"node_name": "IP_MULTICAST_LOOP", "type": "field", "idx": 24729, "Desc": "loopback for internet protocol ( ip ) multicast datagrams . the value of this socket option is a boolean that controls the loopback of multicast datagrams . the value of the socket option represents if the option is enabled or disabled . the exact semantics of this socket options are system dependent . in particular , it is system dependent whether the loopback applies to multicast datagrams sent from the socket or received by the socket . for ipv6 sockets then it is system dependent whether the option also applies to multicast datagrams sent to ipv4 addresses . the initial / default value of this socket option is true . an implementation allows this socket option to be set after the socket is bound . whether the socket option can be queried or changed prior to binding the socket is system dependent ."}{"node_name": "TCP_NODELAY", "type": "field", "idx": 24730, "Desc": "disable the nagle algorithm . the value of this socket option is a boolean that represents whether the option is enabled or disabled . the socket option is specific to stream-oriented sockets using the tcp / ip protocol . tcp / ip uses an algorithm known as the nagle algorithm to coalesce short segments and improve network efficiency . the default value of this socket option is false . the socket option should only be enabled in cases where it is known that the coalescing impacts performance . the socket option may be enabled at any time . in other words , the nagle algorithm can be disabled . once the option is enabled , it is system dependent whether it can be subsequently disabled . if it cannot , then invoking the setoption method to disable the option has no effect ."}{"node_name": "url", "type": "field", "idx": 24907, "Desc": "the url represents the remote object on the world wide web to which this connection is opened . the value of url can be accessed by the geturl method . the default value of this variable is the value of the url argument in the urlconnection constructor ."}{"node_name": "doInput", "type": "field", "idx": 24908, "Desc": "this variable is set by the setdoinput method . its value is returned by the getdoinput method . a url connection can be used for input and / or output . setting the doinput flag to true indicates that the application intends to read data from the url connection . the default value of doInput is true ."}{"node_name": "doOutput", "type": "field", "idx": 24909, "Desc": "this variable is set by the setdooutput method . its value is returned by the getdooutput method . a url connection can be used for input and / or output . setting the dooutput flag to true indicates that the application intends to write data to the url connection . the default value of doOutput is false ."}{"node_name": "allowUserInteraction", "type": "field", "idx": 24910, "Desc": "if true , this url is being examined in a context in which it makes sense to allow user interactions such as popping up an authentication dialog . if false , then no user interaction is allowed . the value of allowUserInteraction can be set by the setallowuserinteraction method . its value is returned by the getallowuserinteraction method . its default value is the value of the argument in the last invocation of the setdefaultallowuserinteraction method ."}{"node_name": "useCaches", "type": "field", "idx": 24911, "Desc": "if true , the protocol is allowed to use caching whenever it can . if false , the protocol must always try to get a fresh copy of the object . useCaches is set by the setusecaches method . its value is returned by the getusecaches method . its default value is the value given in the last invocation of the setdefaultusecaches method . the default setting may be overridden per protocol with setdefaultusecaches ( string , boolean ) ."}{"node_name": "ifModifiedSince", "type": "field", "idx": 24912, "Desc": "some protocols support skipping the fetching of the object unless the object has been modified more recently than a certain time . a nonzero value gives a time as the number of milliseconds since january 1 , 1970 , gmt . the object is fetched only if it has been modified more recently than that time . this variable is set by the setifmodifiedsince method . its value is returned by the getifmodifiedsince method . the default value of ifModifiedSince is 0 , indicating that the fetching must always occur ."}{"node_name": "connected", "type": "field", "idx": 24913, "Desc": "if false , this connection object has not created a communications link to the specified url . if true , the communications link has been established ."}{"node_name": "BIG_ENDIAN", "type": "field", "idx": 25235, "Desc": "constant denoting big-endian byte order . in this order , the bytes of a multibyte value are ordered from most significant to least significant ."}{"node_name": "LITTLE_ENDIAN", "type": "field", "idx": 25236, "Desc": "constant denoting little-endian byte order . in this order , the bytes of a multibyte value are ordered from least significant to most significant ."}{"node_name": "READ_ONLY", "type": "field", "idx": 25569, "Desc": "mode for a read-only mapping ."}{"node_name": "READ_WRITE", "type": "field", "idx": 25570, "Desc": "mode for a read / write mapping ."}{"node_name": "PRIVATE", "type": "field", "idx": 25571, "Desc": "mode for a private ( copy-on-write ) mapping ."}{"node_name": "OP_READ", "type": "field", "idx": 25713, "Desc": "operation-set bit for read operations . suppose that a selection key's interest set contains op_read at the start of a selection operation . if the selector detects that the corresponding channel is ready for reading , has reached end-of-stream , has been remotely shut down for further reading , or has an error pending , then it will add op_read to the key's ready-operation set ."}{"node_name": "OP_WRITE", "type": "field", "idx": 25714, "Desc": "operation-set bit for write operations . suppose that a selection key's interest set contains op_write at the start of a selection operation . if the selector detects that the corresponding channel is ready for writing , has been remotely shut down for further writing , or has an error pending , then it will add op_write to the key's ready set ."}{"node_name": "OP_CONNECT", "type": "field", "idx": 25715, "Desc": "operation-set bit for socket-connect operations . suppose that a selection key's interest set contains op_connect at the start of a selection operation . if the selector detects that the corresponding socket channel is ready to complete its connection sequence , or has an error pending , then it will add op_connect to the key's ready set ."}{"node_name": "OP_ACCEPT", "type": "field", "idx": 25716, "Desc": "operation-set bit for socket-accept operations . suppose that a selection key's interest set contains op_accept at the start of a selection operation . if the selector detects that the corresponding server-socket channel is ready to accept another connection , or has an error pending , then it will add op_accept to the key's ready set ."}{"node_name": "UNDERFLOW", "type": "field", "idx": 26118, "Desc": "result object indicating underflow , meaning that either the input buffer has been completely consumed or , if the input buffer is not yet empty , that additional input is required ."}{"node_name": "OVERFLOW", "type": "field", "idx": 26119, "Desc": "result object indicating overflow , meaning that there is insufficient room in the output buffer ."}{"node_name": "IGNORE", "type": "field", "idx": 26133, "Desc": "action indicating that a coding error is to be handled by dropping the erroneous input and resuming the coding operation ."}{"node_name": "REPLACE", "type": "field", "idx": 26134, "Desc": "action indicating that a coding error is to be handled by dropping the erroneous input , appending the coder's replacement value to the output buffer , and resuming the coding operation ."}{"node_name": "REPORT", "type": "field", "idx": 26135, "Desc": "action indicating that a coding error is to be reported , either by returning a coderresult object or by throwing a charactercodingexception , whichever is appropriate for the method implementing the coding process ."}{"node_name": "US_ASCII", "type": "field", "idx": 26152, "Desc": "seven-bit ascii , also known as iso646-us , also known as the basic latin block of the unicode character set ."}{"node_name": "ISO_8859_1", "type": "field", "idx": 26153, "Desc": "iso latin alphabet no . 1 , also known as iso-latin-1 ."}{"node_name": "UTF_8", "type": "field", "idx": 26154, "Desc": "eight-bit ucs transformation format ."}{"node_name": "UTF_16BE", "type": "field", "idx": 26155, "Desc": "sixteen-bit ucs transformation format , big-endian byte order ."}{"node_name": "UTF_16LE", "type": "field", "idx": 26156, "Desc": "sixteen-bit ucs transformation format , little-endian byte order ."}{"node_name": "UTF_16", "type": "field", "idx": 26157, "Desc": "sixteen-bit ucs transformation format , byte order identified by an optional byte-order mark ."}{"node_name": "LIST_DIRECTORY", "type": "field", "idx": 26290, "Desc": "permission to list the entries of a directory ( equal to read_data )"}{"node_name": "ADD_FILE", "type": "field", "idx": 26291, "Desc": "permission to add a new file to a directory ( equal to write_data )"}{"node_name": "ADD_SUBDIRECTORY", "type": "field", "idx": 26292, "Desc": "permission to create a subdirectory to a directory ( equal to append_data )"}{"node_name": "OVERFLOW", "type": "field", "idx": 27012, "Desc": "a special event to indicate that events may have been lost or discarded . the context for this event is implementation specific and may be null . the event count may be greater than 1 ."}{"node_name": "ENTRY_CREATE", "type": "field", "idx": 27013, "Desc": "directory entry created . when a directory is registered for this event then the watchkey is queued when it is observed that an entry is created in the directory or renamed into the directory . the event count for this event is always 1 ."}{"node_name": "ENTRY_DELETE", "type": "field", "idx": 27014, "Desc": "directory entry deleted . when a directory is registered for this event then the watchkey is queued when it is observed that an entry is deleted or renamed out of the directory . the event count for this event is always 1 ."}{"node_name": "ENTRY_MODIFY", "type": "field", "idx": 27015, "Desc": "directory entry modified . when a directory is registered for this event then the watchkey is queued when it is observed that an entry in the directory has been modified . the event count for this event is 1 or greater ."}{"node_name": "detail", "type": "field", "idx": 27467, "Desc": "the cause of the activation exception . detail predates the general-purpose exception chaining facility . the throwable.getcause() method is now the preferred means of obtaining this information ."}{"node_name": "SYSTEM_PORT", "type": "field", "idx": 27558, "Desc": "the port to lookup the activation system ."}{"node_name": "REGISTRY_PORT", "type": "field", "idx": 27683, "Desc": "well known port for registry ."}{"node_name": "detail", "type": "field", "idx": 27698, "Desc": "the cause of the remote exception . detail predates the general-purpose exception chaining facility . the throwable.getcause() method is now the preferred means of obtaining this information ."}{"node_name": "REGISTRY_ID", "type": "field", "idx": 27718, "Desc": "object number for well-known objid of the registry ."}{"node_name": "ACTIVATOR_ID", "type": "field", "idx": 27719, "Desc": "object number for well-known objid of the activator ."}{"node_name": "DGC_ID", "type": "field", "idx": 27720, "Desc": "object number for well-known objid of the distributed garbage collector ."}{"node_name": "ref", "type": "field", "idx": 27735, "Desc": "the object's remote reference ."}{"node_name": "packagePrefix", "type": "field", "idx": 27754, "Desc": "initialize the server package prefix : assumes that the implementation of server ref classes ( e.g. , unicastref , unicastserverref ) are located in the package defined by the prefix ."}{"node_name": "detail", "type": "field", "idx": 27834, "Desc": "the cause of the exception . detail predates the general-purpose exception chaining facility . the throwable.getcause() method is now the preferred means of obtaining this information ."}{"node_name": "digest", "type": "field", "idx": 28840, "Desc": "the message digest associated with this stream ."}{"node_name": "digest", "type": "field", "idx": 28856, "Desc": "the message digest associated with this stream ."}{"node_name": "UNSUPPORTED_EMPTY_COLLECTION", "type": "field", "idx": 29444, "Desc": "a read-only empty permissioncollection instance ."}{"node_name": "UNINITIALIZED", "type": "field", "idx": 29726, "Desc": "possible state value , signifying that this signature object has not yet been initialized ."}{"node_name": "SIGN", "type": "field", "idx": 29727, "Desc": "possible state value , signifying that this signature object has been initialized for signing ."}{"node_name": "VERIFY", "type": "field", "idx": 29728, "Desc": "possible state value , signifying that this signature object has been initialized for verification ."}{"node_name": "state", "type": "field", "idx": 29729, "Desc": "current state of this signature object ."}{"node_name": "appRandom", "type": "field", "idx": 29787, "Desc": "application-specified source of randomness ."}{"node_name": "POINT_INFINITY", "type": "field", "idx": 29911, "Desc": "this defines the point at infinity ."}{"node_name": "SHA1", "type": "field", "idx": 29973, "Desc": "the mgf1parameterspec which uses \" sha-1 \" message digest"}{"node_name": "SHA224", "type": "field", "idx": 29974, "Desc": "the mgf1parameterspec which uses \" sha-224 \" message digest"}{"node_name": "SHA256", "type": "field", "idx": 29975, "Desc": "the mgf1parameterspec which uses \" sha-256 \" message digest"}{"node_name": "SHA384", "type": "field", "idx": 29976, "Desc": "the mgf1parameterspec which uses \" sha-384 \" message digest"}{"node_name": "SHA512", "type": "field", "idx": 29977, "Desc": "the mgf1parameterspec which uses sha-512 message digest"}{"node_name": "SHA512_224", "type": "field", "idx": 29978, "Desc": "the mgf1parameterspec which uses sha-512 / 224 message digest"}{"node_name": "SHA512_256", "type": "field", "idx": 29979, "Desc": "the mgf1parameterspec which uses sha-512 / 256 message digest"}{"node_name": "X25519", "type": "field", "idx": 29984, "Desc": "the x25519 parameters"}{"node_name": "X448", "type": "field", "idx": 29985, "Desc": "the x448 parameters"}{"node_name": "TRAILER_FIELD_BC", "type": "field", "idx": 29998, "Desc": "the trailerfieldbc constant as defined in pkcs #1"}{"node_name": "DEFAULT", "type": "field", "idx": 29999, "Desc": "the pss parameter set with all default values"}{"node_name": "F0", "type": "field", "idx": 30014, "Desc": "the public-exponent value f0 = 3 ."}{"node_name": "F4", "type": "field", "idx": 30015, "Desc": "the public exponent-value f4 = 65537 ."}{"node_name": "TRANSACTION_NONE", "type": "field", "idx": 30640, "Desc": "a constant indicating that transactions are not supported ."}{"node_name": "TRANSACTION_READ_UNCOMMITTED", "type": "field", "idx": 30641, "Desc": "a constant indicating that dirty reads , non-repeatable reads and phantom reads can occur . this level allows a row changed by one transaction to be read by another transaction before any changes in that row have been committed ( a \" dirty read \") . if any of the changes are rolled back , the second transaction will have retrieved an invalid row ."}{"node_name": "TRANSACTION_READ_COMMITTED", "type": "field", "idx": 30642, "Desc": "a constant indicating that dirty reads are prevented ; non-repeatable reads and phantom reads can occur . this level only prohibits a transaction from reading a row with uncommitted changes in it ."}{"node_name": "TRANSACTION_REPEATABLE_READ", "type": "field", "idx": 30643, "Desc": "a constant indicating that dirty reads and non-repeatable reads are prevented ; phantom reads can occur . this level prohibits a transaction from reading a row with uncommitted changes in it , and it also prohibits the situation where one transaction reads a row , a second transaction alters the row , and the first transaction rereads the row , getting different values the second time ( a \" non-repeatable read \") ."}{"node_name": "TRANSACTION_SERIALIZABLE", "type": "field", "idx": 30644, "Desc": "a constant indicating that dirty reads , non-repeatable reads and phantom reads are prevented . this level includes the prohibitions in transaction_repeatable_read and further prohibits the situation where one transaction reads all rows that satisfy a where condition , a second transaction inserts a row that satisfies that where condition , and the first transaction rereads for the same condition , retrieving the additional \" phantom \" row in the second read ."}{"node_name": "procedureResultUnknown", "type": "field", "idx": 30772, "Desc": "indicates that it is not known whether the procedure returns a result . a possible value for column procedure_type in the resultset object returned by the method getprocedures ."}{"node_name": "procedureNoResult", "type": "field", "idx": 30773, "Desc": "indicates that the procedure does not return a result . a possible value for column procedure_type in the resultset object returned by the method getprocedures ."}{"node_name": "procedureReturnsResult", "type": "field", "idx": 30774, "Desc": "indicates that the procedure returns a result . a possible value for column procedure_type in the resultset object returned by the method getprocedures ."}{"node_name": "procedureColumnUnknown", "type": "field", "idx": 30775, "Desc": "indicates that type of the column is unknown . a possible value for the column column_type in the resultset returned by the method getprocedurecolumns ."}{"node_name": "procedureColumnIn", "type": "field", "idx": 30776, "Desc": "indicates that the column stores in parameters . a possible value for the column column_type in the resultset returned by the method getprocedurecolumns ."}{"node_name": "procedureColumnInOut", "type": "field", "idx": 30777, "Desc": "indicates that the column stores inout parameters . a possible value for the column column_type in the resultset returned by the method getprocedurecolumns ."}{"node_name": "procedureColumnOut", "type": "field", "idx": 30778, "Desc": "indicates that the column stores out parameters . a possible value for the column column_type in the resultset returned by the method getprocedurecolumns ."}{"node_name": "procedureColumnReturn", "type": "field", "idx": 30779, "Desc": "indicates that the column stores return values . a possible value for the column column_type in the resultset returned by the method getprocedurecolumns ."}{"node_name": "procedureColumnResult", "type": "field", "idx": 30780, "Desc": "indicates that the column stores results . a possible value for the column column_type in the resultset returned by the method getprocedurecolumns ."}{"node_name": "procedureNoNulls", "type": "field", "idx": 30781, "Desc": "indicates that null values are not allowed . a possible value for the column nullable in the resultset object returned by the method getprocedurecolumns ."}{"node_name": "procedureNullable", "type": "field", "idx": 30782, "Desc": "indicates that null values are allowed . a possible value for the column nullable in the resultset object returned by the method getprocedurecolumns ."}{"node_name": "procedureNullableUnknown", "type": "field", "idx": 30783, "Desc": "indicates that whether null values are allowed is unknown . a possible value for the column nullable in the resultset object returned by the method getprocedurecolumns ."}{"node_name": "columnNoNulls", "type": "field", "idx": 30784, "Desc": "indicates that the column might not allow null values . a possible value for the column nullable in the resultset returned by the method getcolumns ."}{"node_name": "columnNullable", "type": "field", "idx": 30785, "Desc": "indicates that the column definitely allows null values . a possible value for the column nullable in the resultset returned by the method getcolumns ."}{"node_name": "columnNullableUnknown", "type": "field", "idx": 30786, "Desc": "indicates that the nullability of columns is unknown . a possible value for the column nullable in the resultset returned by the method getcolumns ."}{"node_name": "bestRowTemporary", "type": "field", "idx": 30787, "Desc": "indicates that the scope of the best row identifier is very temporary , lasting only while the row is being used . a possible value for the column scope in the resultset object returned by the method getbestrowidentifier ."}{"node_name": "bestRowTransaction", "type": "field", "idx": 30788, "Desc": "indicates that the scope of the best row identifier is the remainder of the current transaction . a possible value for the column scope in the resultset object returned by the method getbestrowidentifier ."}{"node_name": "bestRowSession", "type": "field", "idx": 30789, "Desc": "indicates that the scope of the best row identifier is the remainder of the current session . a possible value for the column scope in the resultset object returned by the method getbestrowidentifier ."}{"node_name": "bestRowUnknown", "type": "field", "idx": 30790, "Desc": "indicates that the best row identifier may or may not be a pseudo column . a possible value for the column pseudo_column in the resultset object returned by the method getbestrowidentifier ."}{"node_name": "bestRowNotPseudo", "type": "field", "idx": 30791, "Desc": "indicates that the best row identifier is not a pseudo column . a possible value for the column pseudo_column in the resultset object returned by the method getbestrowidentifier ."}{"node_name": "bestRowPseudo", "type": "field", "idx": 30792, "Desc": "indicates that the best row identifier is a pseudo column . a possible value for the column pseudo_column in the resultset object returned by the method getbestrowidentifier ."}{"node_name": "versionColumnUnknown", "type": "field", "idx": 30793, "Desc": "indicates that this version column may or may not be a pseudo column . a possible value for the column pseudo_column in the resultset object returned by the method getversioncolumns ."}{"node_name": "versionColumnNotPseudo", "type": "field", "idx": 30794, "Desc": "indicates that this version column is not a pseudo column . a possible value for the column pseudo_column in the resultset object returned by the method getversioncolumns ."}{"node_name": "versionColumnPseudo", "type": "field", "idx": 30795, "Desc": "indicates that this version column is a pseudo column . a possible value for the column pseudo_column in the resultset object returned by the method getversioncolumns ."}{"node_name": "importedKeyCascade", "type": "field", "idx": 30796, "Desc": "for the column update_rule , indicates that when the primary key is updated , the foreign key ( imported key ) is changed to agree with it . for the column delete_rule , it indicates that when the primary key is deleted , rows that imported that key are deleted . a possible value for the columns update_rule and delete_rule in the resultset objects returned by the methods getimportedkeys , getexportedkeys , and getcrossreference ."}{"node_name": "importedKeyRestrict", "type": "field", "idx": 30797, "Desc": "for the column update_rule , indicates that a primary key may not be updated if it has been imported by another table as a foreign key . for the column delete_rule , indicates that a primary key may not be deleted if it has been imported by another table as a foreign key . a possible value for the columns update_rule and delete_rule in the resultset objects returned by the methods getimportedkeys , getexportedkeys , and getcrossreference ."}{"node_name": "importedKeySetNull", "type": "field", "idx": 30798, "Desc": "for the columns update_rule and delete_rule , indicates that when the primary key is updated or deleted , the foreign key ( imported key ) is changed to null . a possible value for the columns update_rule and delete_rule in the resultset objects returned by the methods getimportedkeys , getexportedkeys , and getcrossreference ."}{"node_name": "importedKeyNoAction", "type": "field", "idx": 30799, "Desc": "for the columns update_rule and delete_rule , indicates that if the primary key has been imported , it cannot be updated or deleted . a possible value for the columns update_rule and delete_rule in the resultset objects returned by the methods getimportedkeys , getexportedkeys , and getcrossreference ."}{"node_name": "importedKeySetDefault", "type": "field", "idx": 30800, "Desc": "for the columns update_rule and delete_rule , indicates that if the primary key is updated or deleted , the foreign key ( imported key ) is set to the default value . a possible value for the columns update_rule and delete_rule in the resultset objects returned by the methods getimportedkeys , getexportedkeys , and getcrossreference ."}{"node_name": "importedKeyInitiallyDeferred", "type": "field", "idx": 30801, "Desc": "indicates deferrability . see sql-92 for a definition . a possible value for the column deferrability in the resultset objects returned by the methods getimportedkeys , getexportedkeys , and getcrossreference ."}{"node_name": "importedKeyInitiallyImmediate", "type": "field", "idx": 30802, "Desc": "indicates deferrability . see sql-92 for a definition . a possible value for the column deferrability in the resultset objects returned by the methods getimportedkeys , getexportedkeys , and getcrossreference ."}{"node_name": "importedKeyNotDeferrable", "type": "field", "idx": 30803, "Desc": "indicates deferrability . see sql-92 for a definition . a possible value for the column deferrability in the resultset objects returned by the methods getimportedkeys , getexportedkeys , and getcrossreference ."}{"node_name": "typeNoNulls", "type": "field", "idx": 30804, "Desc": "indicates that a null value is not allowed for this data type . a possible value for column nullable in the resultset object returned by the method gettypeinfo ."}{"node_name": "typeNullable", "type": "field", "idx": 30805, "Desc": "indicates that a null value is allowed for this data type . a possible value for column nullable in the resultset object returned by the method gettypeinfo ."}{"node_name": "typeNullableUnknown", "type": "field", "idx": 30806, "Desc": "indicates that it is not known whether a null value is allowed for this data type . a possible value for column nullable in the resultset object returned by the method gettypeinfo ."}{"node_name": "typePredNone", "type": "field", "idx": 30807, "Desc": "indicates that where search clauses are not supported for this type . a possible value for column searchable in the resultset object returned by the method gettypeinfo ."}{"node_name": "typePredChar", "type": "field", "idx": 30808, "Desc": "indicates that the data type can be only be used in where search clauses that use like predicates . a possible value for column searchable in the resultset object returned by the method gettypeinfo ."}{"node_name": "typePredBasic", "type": "field", "idx": 30809, "Desc": "indicates that the data type can be only be used in where search clauses that do not use like predicates . a possible value for column searchable in the resultset object returned by the method gettypeinfo ."}{"node_name": "typeSearchable", "type": "field", "idx": 30810, "Desc": "indicates that all where search clauses can be based on this type . a possible value for column searchable in the resultset object returned by the method gettypeinfo ."}{"node_name": "tableIndexStatistic", "type": "field", "idx": 30811, "Desc": "indicates that this column contains table statistics that are returned in conjunction with a table's index descriptions . a possible value for column type in the resultset object returned by the method getindexinfo ."}{"node_name": "tableIndexClustered", "type": "field", "idx": 30812, "Desc": "indicates that this table index is a clustered index . a possible value for column type in the resultset object returned by the method getindexinfo ."}{"node_name": "tableIndexHashed", "type": "field", "idx": 30813, "Desc": "indicates that this table index is a hashed index . a possible value for column type in the resultset object returned by the method getindexinfo ."}{"node_name": "tableIndexOther", "type": "field", "idx": 30814, "Desc": "indicates that this table index is not a clustered index , a hashed index , or table statistics ; it is something other than these . a possible value for column type in the resultset object returned by the method getindexinfo ."}{"node_name": "attributeNoNulls", "type": "field", "idx": 30815, "Desc": "indicates that null values might not be allowed . a possible value for the column nullable in the resultset object returned by the method getattributes ."}{"node_name": "attributeNullable", "type": "field", "idx": 30816, "Desc": "indicates that null values are definitely allowed . a possible value for the column nullable in the resultset object returned by the method getattributes ."}{"node_name": "attributeNullableUnknown", "type": "field", "idx": 30817, "Desc": "indicates that whether null values are allowed is not known . a possible value for the column nullable in the resultset object returned by the method getattributes ."}{"node_name": "sqlStateXOpen", "type": "field", "idx": 30818, "Desc": "a possible return value for the method databasemetadata.getsqlstatetype which is used to indicate whether the value returned by the method sqlexception.getsqlstate is an x / open ( now know as open group ) sql cli sqlstate value ."}{"node_name": "sqlStateSQL", "type": "field", "idx": 30819, "Desc": "a possible return value for the method databasemetadata.getsqlstatetype which is used to indicate whether the value returned by the method sqlexception.getsqlstate is an sqlstate value ."}{"node_name": "sqlStateSQL99", "type": "field", "idx": 30820, "Desc": "a possible return value for the method databasemetadata.getsqlstatetype which is used to indicate whether the value returned by the method sqlexception.getsqlstate is an sql99 sqlstate value . note : this constant remains only for compatibility reasons . developers should use the constant sqlstatesql instead ."}{"node_name": "functionColumnUnknown", "type": "field", "idx": 30821, "Desc": "indicates that type of the parameter or column is unknown . a possible value for the column column_type in the resultset returned by the method getfunctioncolumns ."}{"node_name": "functionColumnIn", "type": "field", "idx": 30822, "Desc": "indicates that the parameter or column is an in parameter . a possible value for the column column_type in the resultset returned by the method getfunctioncolumns ."}{"node_name": "functionColumnInOut", "type": "field", "idx": 30823, "Desc": "indicates that the parameter or column is an inout parameter . a possible value for the column column_type in the resultset returned by the method getfunctioncolumns ."}{"node_name": "functionColumnOut", "type": "field", "idx": 30824, "Desc": "indicates that the parameter or column is an out parameter . a possible value for the column column_type in the resultset returned by the method getfunctioncolumns ."}{"node_name": "functionReturn", "type": "field", "idx": 30825, "Desc": "indicates that the parameter or column is a return value . a possible value for the column column_type in the resultset returned by the method getfunctioncolumns ."}{"node_name": "functionColumnResult", "type": "field", "idx": 30826, "Desc": "indicates that the parameter or column is a column in a result set . a possible value for the column column_type in the resultset returned by the method getfunctioncolumns ."}{"node_name": "functionNoNulls", "type": "field", "idx": 30827, "Desc": "indicates that null values are not allowed . a possible value for the column nullable in the resultset object returned by the method getfunctioncolumns ."}{"node_name": "functionNullable", "type": "field", "idx": 30828, "Desc": "indicates that null values are allowed . a possible value for the column nullable in the resultset object returned by the method getfunctioncolumns ."}{"node_name": "functionNullableUnknown", "type": "field", "idx": 30829, "Desc": "indicates that whether null values are allowed is unknown . a possible value for the column nullable in the resultset object returned by the method getfunctioncolumns ."}{"node_name": "functionResultUnknown", "type": "field", "idx": 30830, "Desc": "indicates that it is not known whether the function returns a result or a table . a possible value for column function_type in the resultset object returned by the method getfunctions ."}{"node_name": "functionNoTable", "type": "field", "idx": 30831, "Desc": "indicates that the function does not return a table . a possible value for column function_type in the resultset object returned by the method getfunctions ."}{"node_name": "functionReturnsTable", "type": "field", "idx": 30832, "Desc": "indicates that the function returns a table . a possible value for column function_type in the resultset object returned by the method getfunctions ."}{"node_name": "name", "type": "field", "idx": 31179, "Desc": "the name of the property ."}{"node_name": "description", "type": "field", "idx": 31180, "Desc": "a brief description of the property , which may be null ."}{"node_name": "required", "type": "field", "idx": 31181, "Desc": "the required field is true if a value must be supplied for this property during driver.connect and false otherwise ."}{"node_name": "value", "type": "field", "idx": 31182, "Desc": "the value field specifies the current value of the property , based on a combination of the information supplied to the method getpropertyinfo , the java environment , and the driver-supplied default values . value may be null if no value is known ."}{"node_name": "choices", "type": "field", "idx": 31183, "Desc": "an array of possible values if the value for choices driverpropertyinfo.value may be selected from a particular set of values ; otherwise null ."}{"node_name": "parameterNoNulls", "type": "field", "idx": 31198, "Desc": "the constant indicating that a parameter will not allow null values ."}{"node_name": "parameterNullable", "type": "field", "idx": 31199, "Desc": "the constant indicating that a parameter will allow null values ."}{"node_name": "parameterNullableUnknown", "type": "field", "idx": 31200, "Desc": "the constant indicating that the nullability of a parameter is unknown ."}{"node_name": "parameterModeUnknown", "type": "field", "idx": 31201, "Desc": "the constant indicating that the mode of the parameter is unknown ."}{"node_name": "parameterModeIn", "type": "field", "idx": 31202, "Desc": "the constant indicating that the parameter's mode is in ."}{"node_name": "parameterModeInOut", "type": "field", "idx": 31203, "Desc": "the constant indicating that the parameter's mode is inout ."}{"node_name": "parameterModeOut", "type": "field", "idx": 31204, "Desc": "the constant indicating that the parameter's mode is out ."}{"node_name": "FETCH_FORWARD", "type": "field", "idx": 31410, "Desc": "the constant indicating that the rows in a result set will be processed in a forward direction ; first-to-last . this constant is used by the method setfetchdirection as a hint to the driver , which the driver may ignore ."}{"node_name": "FETCH_REVERSE", "type": "field", "idx": 31411, "Desc": "the constant indicating that the rows in a result set will be processed in a reverse direction ; last-to-first . this constant is used by the method setfetchdirection as a hint to the driver , which the driver may ignore ."}{"node_name": "FETCH_UNKNOWN", "type": "field", "idx": 31412, "Desc": "the constant indicating that the order in which rows in a result set will be processed is unknown . this constant is used by the method setfetchdirection as a hint to the driver , which the driver may ignore ."}{"node_name": "TYPE_FORWARD_ONLY", "type": "field", "idx": 31413, "Desc": "the constant indicating the type for a resultset object whose cursor may move only forward ."}{"node_name": "TYPE_SCROLL_INSENSITIVE", "type": "field", "idx": 31414, "Desc": "the constant indicating the type for a resultset object that is scrollable but generally not sensitive to changes to the data that underlies the resultset ."}{"node_name": "TYPE_SCROLL_SENSITIVE", "type": "field", "idx": 31415, "Desc": "the constant indicating the type for a resultset object that is scrollable and generally sensitive to changes to the data that underlies the resultset ."}{"node_name": "CONCUR_READ_ONLY", "type": "field", "idx": 31416, "Desc": "the constant indicating the concurrency mode for a resultset object that may not be updated ."}{"node_name": "CONCUR_UPDATABLE", "type": "field", "idx": 31417, "Desc": "the constant indicating the concurrency mode for a resultset object that may be updated ."}{"node_name": "HOLD_CURSORS_OVER_COMMIT", "type": "field", "idx": 31418, "Desc": "the constant indicating that open resultset objects with this holdability will remain open when the current transaction is committed ."}{"node_name": "CLOSE_CURSORS_AT_COMMIT", "type": "field", "idx": 31419, "Desc": "the constant indicating that open resultset objects with this holdability will be closed when the current transaction is committed ."}{"node_name": "columnNoNulls", "type": "field", "idx": 31887, "Desc": "the constant indicating that a column does not allow null values ."}{"node_name": "columnNullable", "type": "field", "idx": 31888, "Desc": "the constant indicating that a column allows null values ."}{"node_name": "columnNullableUnknown", "type": "field", "idx": 31889, "Desc": "the constant indicating that the nullability of a column's values is unknown ."}{"node_name": "CLOSE_CURRENT_RESULT", "type": "field", "idx": 32463, "Desc": "the constant indicating that the current resultset object should be closed when calling getmoreresults ."}{"node_name": "KEEP_CURRENT_RESULT", "type": "field", "idx": 32464, "Desc": "the constant indicating that the current resultset object should not be closed when calling getmoreresults ."}{"node_name": "CLOSE_ALL_RESULTS", "type": "field", "idx": 32465, "Desc": "the constant indicating that all resultset objects that have previously been kept open should be closed when calling getmoreresults ."}{"node_name": "SUCCESS_NO_INFO", "type": "field", "idx": 32466, "Desc": "the constant indicating that a batch statement executed successfully but that no count of the number of rows it affected is available ."}{"node_name": "EXECUTE_FAILED", "type": "field", "idx": 32467, "Desc": "the constant indicating that an error occurred while executing a batch statement ."}{"node_name": "RETURN_GENERATED_KEYS", "type": "field", "idx": 32468, "Desc": "the constant indicating that generated keys should be made available for retrieval ."}{"node_name": "NO_GENERATED_KEYS", "type": "field", "idx": 32469, "Desc": "the constant indicating that generated keys should not be made available for retrieval ."}{"node_name": "BIT", "type": "field", "idx": 32611, "Desc": "the constant in the java programming language , sometimes referred to as a type code , that identifies the generic sql type bit ."}{"node_name": "TINYINT", "type": "field", "idx": 32612, "Desc": "the constant in the java programming language , sometimes referred to as a type code , that identifies the generic sql type tinyint ."}{"node_name": "SMALLINT", "type": "field", "idx": 32613, "Desc": "the constant in the java programming language , sometimes referred to as a type code , that identifies the generic sql type smallint ."}{"node_name": "INTEGER", "type": "field", "idx": 32614, "Desc": "the constant in the java programming language , sometimes referred to as a type code , that identifies the generic sql type integer ."}{"node_name": "BIGINT", "type": "field", "idx": 32615, "Desc": "the constant in the java programming language , sometimes referred to as a type code , that identifies the generic sql type bigint ."}{"node_name": "FLOAT", "type": "field", "idx": 32616, "Desc": "the constant in the java programming language , sometimes referred to as a type code , that identifies the generic sql type float ."}{"node_name": "REAL", "type": "field", "idx": 32617, "Desc": "the constant in the java programming language , sometimes referred to as a type code , that identifies the generic sql type real ."}{"node_name": "DOUBLE", "type": "field", "idx": 32618, "Desc": "the constant in the java programming language , sometimes referred to as a type code , that identifies the generic sql type double ."}{"node_name": "NUMERIC", "type": "field", "idx": 32619, "Desc": "the constant in the java programming language , sometimes referred to as a type code , that identifies the generic sql type numeric ."}{"node_name": "DECIMAL", "type": "field", "idx": 32620, "Desc": "the constant in the java programming language , sometimes referred to as a type code , that identifies the generic sql type decimal ."}{"node_name": "CHAR", "type": "field", "idx": 32621, "Desc": "the constant in the java programming language , sometimes referred to as a type code , that identifies the generic sql type char ."}{"node_name": "VARCHAR", "type": "field", "idx": 32622, "Desc": "the constant in the java programming language , sometimes referred to as a type code , that identifies the generic sql type varchar ."}{"node_name": "LONGVARCHAR", "type": "field", "idx": 32623, "Desc": "the constant in the java programming language , sometimes referred to as a type code , that identifies the generic sql type longvarchar ."}{"node_name": "DATE", "type": "field", "idx": 32624, "Desc": "the constant in the java programming language , sometimes referred to as a type code , that identifies the generic sql type date ."}{"node_name": "TIME", "type": "field", "idx": 32625, "Desc": "the constant in the java programming language , sometimes referred to as a type code , that identifies the generic sql type time ."}{"node_name": "TIMESTAMP", "type": "field", "idx": 32626, "Desc": "the constant in the java programming language , sometimes referred to as a type code , that identifies the generic sql type timestamp ."}{"node_name": "BINARY", "type": "field", "idx": 32627, "Desc": "the constant in the java programming language , sometimes referred to as a type code , that identifies the generic sql type binary ."}{"node_name": "VARBINARY", "type": "field", "idx": 32628, "Desc": "the constant in the java programming language , sometimes referred to as a type code , that identifies the generic sql type varbinary ."}{"node_name": "LONGVARBINARY", "type": "field", "idx": 32629, "Desc": "the constant in the java programming language , sometimes referred to as a type code , that identifies the generic sql type longvarbinary ."}{"node_name": "NULL", "type": "field", "idx": 32630, "Desc": "the constant in the java programming language that identifies the generic sql value null ."}{"node_name": "OTHER", "type": "field", "idx": 32631, "Desc": "the constant in the java programming language that indicates that the sql type is database-specific and gets mapped to a java object that can be accessed via the methods getobject and setobject ."}{"node_name": "JAVA_OBJECT", "type": "field", "idx": 32632, "Desc": "the constant in the java programming language , sometimes referred to as a type code , that identifies the generic sql type java_object ."}{"node_name": "DISTINCT", "type": "field", "idx": 32633, "Desc": "the constant in the java programming language , sometimes referred to as a type code , that identifies the generic sql type distinct ."}{"node_name": "STRUCT", "type": "field", "idx": 32634, "Desc": "the constant in the java programming language , sometimes referred to as a type code , that identifies the generic sql type struct ."}{"node_name": "ARRAY", "type": "field", "idx": 32635, "Desc": "the constant in the java programming language , sometimes referred to as a type code , that identifies the generic sql type array ."}{"node_name": "BLOB", "type": "field", "idx": 32636, "Desc": "the constant in the java programming language , sometimes referred to as a type code , that identifies the generic sql type blob ."}{"node_name": "CLOB", "type": "field", "idx": 32637, "Desc": "the constant in the java programming language , sometimes referred to as a type code , that identifies the generic sql type clob ."}{"node_name": "REF", "type": "field", "idx": 32638, "Desc": "the constant in the java programming language , sometimes referred to as a type code , that identifies the generic sql type ref ."}{"node_name": "DATALINK", "type": "field", "idx": 32639, "Desc": "the constant in the java programming language , sometimes referred to as a type code , that identifies the generic sql type datalink ."}{"node_name": "BOOLEAN", "type": "field", "idx": 32640, "Desc": "the constant in the java programming language , sometimes referred to as a type code , that identifies the generic sql type boolean ."}{"node_name": "ROWID", "type": "field", "idx": 32641, "Desc": "the constant in the java programming language , sometimes referred to as a type code , that identifies the generic sql type rowid"}{"node_name": "NCHAR", "type": "field", "idx": 32642, "Desc": "the constant in the java programming language , sometimes referred to as a type code , that identifies the generic sql type nchar"}{"node_name": "NVARCHAR", "type": "field", "idx": 32643, "Desc": "the constant in the java programming language , sometimes referred to as a type code , that identifies the generic sql type nvarchar ."}{"node_name": "LONGNVARCHAR", "type": "field", "idx": 32644, "Desc": "the constant in the java programming language , sometimes referred to as a type code , that identifies the generic sql type longnvarchar ."}{"node_name": "NCLOB", "type": "field", "idx": 32645, "Desc": "the constant in the java programming language , sometimes referred to as a type code , that identifies the generic sql type nclob ."}{"node_name": "SQLXML", "type": "field", "idx": 32646, "Desc": "the constant in the java programming language , sometimes referred to as a type code , that identifies the generic sql type xml ."}{"node_name": "REF_CURSOR", "type": "field", "idx": 32647, "Desc": "the constant in the java programming language , sometimes referred to as a type code , that identifies the generic sql type ref cursor ."}{"node_name": "TIME_WITH_TIMEZONE", "type": "field", "idx": 32648, "Desc": "the constant in the java programming language , sometimes referred to as a type code , that identifies the generic sql type time with timezone ."}{"node_name": "TIMESTAMP_WITH_TIMEZONE", "type": "field", "idx": 32649, "Desc": "the constant in the java programming language , sometimes referred to as a type code , that identifies the generic sql type timestamp with timezone ."}{"node_name": "LANGUAGE", "type": "field", "idx": 32661, "Desc": "attribute key for the language of some text . values are instances of locale ."}{"node_name": "READING", "type": "field", "idx": 32662, "Desc": "attribute key for the reading of some text . in languages where the written form and the pronunciation of a word are only loosely related ( such as japanese ) , it is often necessary to store the reading ( pronunciation ) along with the written form . values are instances of annotation holding instances of string ."}{"node_name": "INPUT_METHOD_SEGMENT", "type": "field", "idx": 32663, "Desc": "attribute key for input method segments . input methods often break up text into segments , which usually correspond to words . values are instances of annotation holding a null reference ."}{"node_name": "DIRECTION_LEFT_TO_RIGHT", "type": "field", "idx": 32724, "Desc": "constant indicating base direction is left-to-right ."}{"node_name": "DIRECTION_RIGHT_TO_LEFT", "type": "field", "idx": 32725, "Desc": "constant indicating base direction is right-to-left ."}{"node_name": "DIRECTION_DEFAULT_LEFT_TO_RIGHT", "type": "field", "idx": 32726, "Desc": "constant indicating that the base direction depends on the first strong directional character in the text according to the unicode bidirectional algorithm . if no strong directional character is present , the base direction is left-to-right ."}{"node_name": "DIRECTION_DEFAULT_RIGHT_TO_LEFT", "type": "field", "idx": 32727, "Desc": "constant indicating that the base direction depends on the first strong directional character in the text according to the unicode bidirectional algorithm . if no strong directional character is present , the base direction is right-to-left ."}{"node_name": "DONE", "type": "field", "idx": 32770, "Desc": "done is returned by previous() , next() , next ( int ) , preceding ( int ) and following ( int ) when either the first or last text boundary has been reached ."}{"node_name": "DONE", "type": "field", "idx": 32805, "Desc": "constant that is returned when the iterator has reached either the end or the beginning of the text . the value is ' \\\\uffff ' , the \" not a character \" value which should not occur in any valid unicode string ."}{"node_name": "NULLORDER", "type": "field", "idx": 32854, "Desc": "null order which indicates the end of string is reached by the cursor ."}{"node_name": "PRIMARY", "type": "field", "idx": 32881, "Desc": "collator strength value . when set , only primary differences are considered significant during comparison . the assignment of strengths to language features is locale dependent . a common example is for different base letters ( \" a \" vs \" b \") to be considered a primary difference ."}{"node_name": "SECONDARY", "type": "field", "idx": 32882, "Desc": "collator strength value . when set , only secondary and above differences are considered significant during comparison . the assignment of strengths to language features is locale dependent . a common example is for different accented forms of the same base letter ( \" a \" vs \" \u00a4 \") to be considered a secondary difference ."}{"node_name": "TERTIARY", "type": "field", "idx": 32883, "Desc": "collator strength value . when set , only tertiary and above differences are considered significant during comparison . the assignment of strengths to language features is locale dependent . a common example is for case differences ( \" a \" vs \" a \") to be considered a tertiary difference ."}{"node_name": "IDENTICAL", "type": "field", "idx": 32884, "Desc": "collator strength value . when set , all differences are considered significant during comparison . the assignment of strengths to language features is locale dependent . a common example is for control characters ( \" \\u0001 \" vs \" \\u0002 \") to be considered equal at the primary , secondary , and tertiary levels but different at the identical level . additionally , differences between pre-composed accents such as \" \\u00c0 \" ( a-grave ) and combining accents such as \" a\\u0300 \" ( a , combining-grave ) will be considered significant at the identical level if decomposition is set to no_decomposition ."}{"node_name": "NO_DECOMPOSITION", "type": "field", "idx": 32885, "Desc": "decomposition mode value . with no_decomposition set , accented characters will not be decomposed for collation . this is the default setting and provides the fastest collation but will only produce correct results for languages that do not use accents ."}{"node_name": "CANONICAL_DECOMPOSITION", "type": "field", "idx": 32886, "Desc": "decomposition mode value . with canonical_decomposition set , characters that are canonical variants according to unicode standard will be decomposed for collation . this should be used to get correct collation of accented characters . canonical_decomposition corresponds to normalization form d as described in unicode technical report #15 ."}{"node_name": "FULL_DECOMPOSITION", "type": "field", "idx": 32887, "Desc": "decomposition mode value . with full_decomposition set , both unicode canonical variants and unicode compatibility variants will be decomposed for collation . this causes not only accented characters to be collated , but also characters that have special formats to be collated with their norminal form . for example , the half-width and full-width ascii and katakana characters are then collated together . full_decomposition is the most complete and therefore the slowest decomposition mode . full_decomposition corresponds to normalization form kd as described in unicode technical report #15 ."}{"node_name": "ERA", "type": "field", "idx": 32964, "Desc": "constant identifying the era field ."}{"node_name": "YEAR", "type": "field", "idx": 32965, "Desc": "constant identifying the year field ."}{"node_name": "MONTH", "type": "field", "idx": 32966, "Desc": "constant identifying the month field ."}{"node_name": "DAY_OF_MONTH", "type": "field", "idx": 32967, "Desc": "constant identifying the day of month field ."}{"node_name": "HOUR_OF_DAY1", "type": "field", "idx": 32968, "Desc": "constant identifying the hour of day field , where the legal values are 1 to 24 ."}{"node_name": "HOUR_OF_DAY0", "type": "field", "idx": 32969, "Desc": "constant identifying the hour of day field , where the legal values are 0 to 23 ."}{"node_name": "MINUTE", "type": "field", "idx": 32970, "Desc": "constant identifying the minute field ."}{"node_name": "SECOND", "type": "field", "idx": 32971, "Desc": "constant identifying the second field ."}{"node_name": "MILLISECOND", "type": "field", "idx": 32972, "Desc": "constant identifying the millisecond field ."}{"node_name": "DAY_OF_WEEK", "type": "field", "idx": 32973, "Desc": "constant identifying the day of week field ."}{"node_name": "DAY_OF_YEAR", "type": "field", "idx": 32974, "Desc": "constant identifying the day of year field ."}{"node_name": "DAY_OF_WEEK_IN_MONTH", "type": "field", "idx": 32975, "Desc": "constant identifying the day of week field ."}{"node_name": "WEEK_OF_YEAR", "type": "field", "idx": 32976, "Desc": "constant identifying the week of year field ."}{"node_name": "WEEK_OF_MONTH", "type": "field", "idx": 32977, "Desc": "constant identifying the week of month field ."}{"node_name": "AM_PM", "type": "field", "idx": 32978, "Desc": "constant identifying the time of day indicator ( e.g. \" a.m. \" or \" p.m. \") field ."}{"node_name": "HOUR1", "type": "field", "idx": 32979, "Desc": "constant identifying the hour field , where the legal values are 1 to 12 ."}{"node_name": "HOUR0", "type": "field", "idx": 32980, "Desc": "constant identifying the hour field , where the legal values are 0 to 11 ."}{"node_name": "TIME_ZONE", "type": "field", "idx": 32981, "Desc": "constant identifying the time zone field ."}{"node_name": "calendar", "type": "field", "idx": 32990, "Desc": "the calendar instance used for calculating the date-time fields and the instant of time . calendar is used for both formatting and parsing . subclasses should initialize calendar to a calendar appropriate for the locale associated with this dateformat ."}{"node_name": "numberFormat", "type": "field", "idx": 32991, "Desc": "the number formatter that dateformat uses to format numbers in dates and times . subclasses should initialize this to a number format appropriate for the locale associated with this dateformat ."}{"node_name": "ERA_FIELD", "type": "field", "idx": 32992, "Desc": "useful constant for era field alignment . used in fieldposition of date / time formatting ."}{"node_name": "YEAR_FIELD", "type": "field", "idx": 32993, "Desc": "useful constant for year field alignment . used in fieldposition of date / time formatting ."}{"node_name": "MONTH_FIELD", "type": "field", "idx": 32994, "Desc": "useful constant for month field alignment . used in fieldposition of date / time formatting ."}{"node_name": "DATE_FIELD", "type": "field", "idx": 32995, "Desc": "useful constant for date field alignment . used in fieldposition of date / time formatting ."}{"node_name": "HOUR_OF_DAY1_FIELD", "type": "field", "idx": 32996, "Desc": "useful constant for one-based hour_of_day field alignment . used in fieldposition of date / time formatting . hour_of_day1_field is used for the one-based 24-hour clock . for example , 23:59 + 01:00 results in 24:59 ."}{"node_name": "HOUR_OF_DAY0_FIELD", "type": "field", "idx": 32997, "Desc": "useful constant for zero-based hour_of_day field alignment . used in fieldposition of date / time formatting . hour_of_day0_field is used for the zero-based 24-hour clock . for example , 23:59 + 01:00 results in 00:59 ."}{"node_name": "MINUTE_FIELD", "type": "field", "idx": 32998, "Desc": "useful constant for minute field alignment . used in fieldposition of date / time formatting ."}{"node_name": "SECOND_FIELD", "type": "field", "idx": 32999, "Desc": "useful constant for second field alignment . used in fieldposition of date / time formatting ."}{"node_name": "MILLISECOND_FIELD", "type": "field", "idx": 33000, "Desc": "useful constant for millisecond field alignment . used in fieldposition of date / time formatting ."}{"node_name": "DAY_OF_WEEK_FIELD", "type": "field", "idx": 33001, "Desc": "useful constant for day_of_week field alignment . used in fieldposition of date / time formatting ."}{"node_name": "DAY_OF_YEAR_FIELD", "type": "field", "idx": 33002, "Desc": "useful constant for day_of_year field alignment . used in fieldposition of date / time formatting ."}{"node_name": "DAY_OF_WEEK_IN_MONTH_FIELD", "type": "field", "idx": 33003, "Desc": "useful constant for day_of_week_in_month field alignment . used in fieldposition of date / time formatting ."}{"node_name": "WEEK_OF_YEAR_FIELD", "type": "field", "idx": 33004, "Desc": "useful constant for week_of_year field alignment . used in fieldposition of date / time formatting ."}{"node_name": "WEEK_OF_MONTH_FIELD", "type": "field", "idx": 33005, "Desc": "useful constant for week_of_month field alignment . used in fieldposition of date / time formatting ."}{"node_name": "AM_PM_FIELD", "type": "field", "idx": 33006, "Desc": "useful constant for am_pm field alignment . used in fieldposition of date / time formatting ."}{"node_name": "HOUR1_FIELD", "type": "field", "idx": 33007, "Desc": "useful constant for one-based hour field alignment . used in fieldposition of date / time formatting . hour1_field is used for the one-based 12-hour clock . for example , 11:30 pm + 1 hour results in 12:30 am ."}{"node_name": "HOUR0_FIELD", "type": "field", "idx": 33008, "Desc": "useful constant for zero-based hour field alignment . used in fieldposition of date / time formatting . hour0_field is used for the zero-based 12-hour clock . for example , 11:30 pm + 1 hour results in 00:30 am ."}{"node_name": "TIMEZONE_FIELD", "type": "field", "idx": 33009, "Desc": "useful constant for timezone field alignment . used in fieldposition of date / time formatting ."}{"node_name": "FULL", "type": "field", "idx": 33010, "Desc": "constant for full style pattern ."}{"node_name": "LONG", "type": "field", "idx": 33011, "Desc": "constant for long style pattern ."}{"node_name": "MEDIUM", "type": "field", "idx": 33012, "Desc": "constant for medium style pattern ."}{"node_name": "SHORT", "type": "field", "idx": 33013, "Desc": "constant for short style pattern ."}{"node_name": "DEFAULT", "type": "field", "idx": 33014, "Desc": "constant for default style pattern . its value is medium ."}{"node_name": "ARGUMENT", "type": "field", "idx": 33284, "Desc": "constant identifying a portion of a message that was generated from an argument passed into formattocharacteriterator . the value associated with the key will be an integer indicating the index in the arguments array of the argument from which the text was generated ."}{"node_name": "INTEGER", "type": "field", "idx": 33349, "Desc": "constant identifying the integer field ."}{"node_name": "FRACTION", "type": "field", "idx": 33350, "Desc": "constant identifying the fraction field ."}{"node_name": "EXPONENT", "type": "field", "idx": 33351, "Desc": "constant identifying the exponent field ."}{"node_name": "DECIMAL_SEPARATOR", "type": "field", "idx": 33352, "Desc": "constant identifying the decimal separator field ."}{"node_name": "SIGN", "type": "field", "idx": 33353, "Desc": "constant identifying the sign field ."}{"node_name": "GROUPING_SEPARATOR", "type": "field", "idx": 33354, "Desc": "constant identifying the grouping separator field ."}{"node_name": "EXPONENT_SYMBOL", "type": "field", "idx": 33355, "Desc": "constant identifying the exponent symbol field ."}{"node_name": "PERCENT", "type": "field", "idx": 33356, "Desc": "constant identifying the percent field ."}{"node_name": "PERMILLE", "type": "field", "idx": 33357, "Desc": "constant identifying the permille field ."}{"node_name": "CURRENCY", "type": "field", "idx": 33358, "Desc": "constant identifying the currency field ."}{"node_name": "EXPONENT_SIGN", "type": "field", "idx": 33359, "Desc": "constant identifying the exponent sign field ."}{"node_name": "PREFIX", "type": "field", "idx": 33360, "Desc": "constant identifying the prefix field ."}{"node_name": "SUFFIX", "type": "field", "idx": 33361, "Desc": "constant identifying the suffix field ."}{"node_name": "INTEGER_FIELD", "type": "field", "idx": 33366, "Desc": "field constant used to construct a fieldposition object . signifies that the position of the integer part of a formatted number should be returned ."}{"node_name": "FRACTION_FIELD", "type": "field", "idx": 33367, "Desc": "field constant used to construct a fieldposition object . signifies that the position of the fraction part of a formatted number should be returned ."}{"node_name": "INSTANCE", "type": "field", "idx": 33886, "Desc": "singleton instance of the islamic umm al-qura calendar of saudi arabia . other hijrah chronology variants may be available from chronology.getavailablechronologies() ."}{"node_name": "INSTANCE", "type": "field", "idx": 33982, "Desc": "singleton instance of the iso chronology ."}{"node_name": "INSTANCE", "type": "field", "idx": 34044, "Desc": "singleton instance for japanese chronology ."}{"node_name": "MEIJI", "type": "field", "idx": 34133, "Desc": "the singleton instance for the ' meiji ' era ( 1868-01-01 - 1912-07-29 ) which has the value -1 ."}{"node_name": "TAISHO", "type": "field", "idx": 34134, "Desc": "the singleton instance for the ' taisho ' era ( 1912-07-30 - 1926-12-24 ) which has the value 0 ."}{"node_name": "SHOWA", "type": "field", "idx": 34135, "Desc": "the singleton instance for the ' showa ' era ( 1926-12-25 - 1989-01-07 ) which has the value 1 ."}{"node_name": "HEISEI", "type": "field", "idx": 34136, "Desc": "the singleton instance for the ' heisei ' era ( 1989-01-08 - 2019-04-30 ) which has the value 2 ."}{"node_name": "REIWA", "type": "field", "idx": 34137, "Desc": "the singleton instance for the ' reiwa ' era ( 2019-05-01 - ) which has the value 3 . the end date of this era is not specified , unless the japanese government defines it ."}{"node_name": "INSTANCE", "type": "field", "idx": 34150, "Desc": "singleton instance for the minguo chronology ."}{"node_name": "INSTANCE", "type": "field", "idx": 34242, "Desc": "singleton instance of the buddhist chronology ."}{"node_name": "ZERO", "type": "field", "idx": 34397, "Desc": "constant for a duration of zero ."}{"node_name": "ISO_LOCAL_DATE", "type": "field", "idx": 34501, "Desc": "the iso date formatter that formats or parses a date without an offset , such as ' 2011-12-03 ' . this returns an immutable formatter capable of formatting and parsing the iso-8601 extended local date format . the format consists of : four digits or more for the year . years in the range 0000 to 9999 will be pre-padded by zero to ensure four digits . years outside that range will have a prefixed positive or negative symbol . a dash two digits for the month-of-year . this is pre-padded by zero to ensure two digits . a dash two digits for the day-of-month . this is pre-padded by zero to ensure two digits . the returned formatter has a chronology of iso set to ensure dates in other calendar systems are correctly converted . it has no override zone and uses the strict resolver style ."}{"node_name": "ISO_OFFSET_DATE", "type": "field", "idx": 34502, "Desc": "the iso date formatter that formats or parses a date with an offset , such as ' 2011-12-03 + 01:00 ' . this returns an immutable formatter capable of formatting and parsing the iso-8601 extended offset date format . the format consists of : the iso_local_date the offset id . if the offset has seconds then they will be handled even though this is not part of the iso-8601 standard . parsing is case insensitive . the returned formatter has a chronology of iso set to ensure dates in other calendar systems are correctly converted . it has no override zone and uses the strict resolver style ."}{"node_name": "ISO_DATE", "type": "field", "idx": 34503, "Desc": "the iso date formatter that formats or parses a date with the offset if available , such as ' 2011-12-03 ' or ' 2011-12-03 + 01:00 ' . this returns an immutable formatter capable of formatting and parsing the iso-8601 extended date format . the format consists of : the iso_local_date if the offset is not available then the format is complete . the offset id . if the offset has seconds then they will be handled even though this is not part of the iso-8601 standard . parsing is case insensitive . as this formatter has an optional element , it may be necessary to parse using parsebest ( java.lang.charsequence , java.time.temporal.temporalquery < ? > ... ) . the returned formatter has a chronology of iso set to ensure dates in other calendar systems are correctly converted . it has no override zone and uses the strict resolver style ."}{"node_name": "ISO_LOCAL_TIME", "type": "field", "idx": 34504, "Desc": "the iso time formatter that formats or parses a time without an offset , such as ' 10:15 ' or ' 10:15 : 30 ' . this returns an immutable formatter capable of formatting and parsing the iso-8601 extended local time format . the format consists of : two digits for the hour-of-day . this is pre-padded by zero to ensure two digits . a colon two digits for the minute-of-hour . this is pre-padded by zero to ensure two digits . if the second-of-minute is not available then the format is complete . a colon two digits for the second-of-minute . this is pre-padded by zero to ensure two digits . if the nano-of-second is zero or not available then the format is complete . a decimal point one to nine digits for the nano-of-second . as many digits will be output as required . the returned formatter has no override chronology or zone . it uses the strict resolver style ."}{"node_name": "ISO_OFFSET_TIME", "type": "field", "idx": 34505, "Desc": "the iso time formatter that formats or parses a time with an offset , such as ' 10:15 + 01:00 ' or ' 10:15 : 30+ 01:00 ' . this returns an immutable formatter capable of formatting and parsing the iso-8601 extended offset time format . the format consists of : the iso_local_time the offset id . if the offset has seconds then they will be handled even though this is not part of the iso-8601 standard . parsing is case insensitive . the returned formatter has no override chronology or zone . it uses the strict resolver style ."}{"node_name": "ISO_TIME", "type": "field", "idx": 34506, "Desc": "the iso time formatter that formats or parses a time , with the offset if available , such as ' 10:15 ' , ' 10:15 : 30 ' or ' 10:15 : 30+ 01:00 ' . this returns an immutable formatter capable of formatting and parsing the iso-8601 extended offset time format . the format consists of : the iso_local_time if the offset is not available then the format is complete . the offset id . if the offset has seconds then they will be handled even though this is not part of the iso-8601 standard . parsing is case insensitive . as this formatter has an optional element , it may be necessary to parse using parsebest ( java.lang.charsequence , java.time.temporal.temporalquery < ? > ... ) . the returned formatter has no override chronology or zone . it uses the strict resolver style ."}{"node_name": "ISO_LOCAL_DATE_TIME", "type": "field", "idx": 34507, "Desc": "the iso date-time formatter that formats or parses a date-time without an offset , such as ' 2011-12-03t10 : 15:30 ' . this returns an immutable formatter capable of formatting and parsing the iso-8601 extended offset date-time format . the format consists of : the iso_local_date the letter ' t ' . parsing is case insensitive . the iso_local_time the returned formatter has a chronology of iso set to ensure dates in other calendar systems are correctly converted . it has no override zone and uses the strict resolver style ."}{"node_name": "ISO_OFFSET_DATE_TIME", "type": "field", "idx": 34508, "Desc": "the iso date-time formatter that formats or parses a date-time with an offset , such as ' 2011-12-03t10 : 15:30 + 01:00 ' . this returns an immutable formatter capable of formatting and parsing the iso-8601 extended offset date-time format . the format consists of : the iso_local_date_time the offset id . if the offset has seconds then they will be handled even though this is not part of the iso-8601 standard . the offset parsing is lenient , which allows the minutes and seconds to be optional . parsing is case insensitive . the returned formatter has a chronology of iso set to ensure dates in other calendar systems are correctly converted . it has no override zone and uses the strict resolver style ."}{"node_name": "ISO_ZONED_DATE_TIME", "type": "field", "idx": 34509, "Desc": "the iso-like date-time formatter that formats or parses a date-time with offset and zone , such as ' 2011-12-03t10 : 15:30 + 01:00 [ europe / paris ]' . this returns an immutable formatter capable of formatting and parsing a format that extends the iso-8601 extended offset date-time format to add the time-zone . the section in square brackets is not part of the iso-8601 standard . the format consists of : the iso_offset_date_time if the zone id is not available or is a zoneoffset then the format is complete . an open square bracket ' [ ' . the zone id . this is not part of the iso-8601 standard . parsing is case sensitive . a close square bracket ']' . the returned formatter has a chronology of iso set to ensure dates in other calendar systems are correctly converted . it has no override zone and uses the strict resolver style ."}{"node_name": "ISO_DATE_TIME", "type": "field", "idx": 34510, "Desc": "the iso-like date-time formatter that formats or parses a date-time with the offset and zone if available , such as ' 2011-12-03t10 : 15:30 ' , ' 2011-12-03t10 : 15:30 + 01:00 ' or ' 2011-12-03t10 : 15:30 + 01:00 [ europe / paris ]' . this returns an immutable formatter capable of formatting and parsing the iso-8601 extended local or offset date-time format , as well as the extended non-iso form specifying the time-zone . the format consists of : the iso_local_date_time if the offset is not available to format or parse then the format is complete . the offset id . if the offset has seconds then they will be handled even though this is not part of the iso-8601 standard . if the zone id is not available or is a zoneoffset then the format is complete . an open square bracket ' [ ' . the zone id . this is not part of the iso-8601 standard . parsing is case sensitive . a close square bracket ']' . as this formatter has an optional element , it may be necessary to parse using parsebest ( java.lang.charsequence , java.time.temporal.temporalquery < ? > ... ) . the returned formatter has a chronology of iso set to ensure dates in other calendar systems are correctly converted . it has no override zone and uses the strict resolver style ."}{"node_name": "ISO_ORDINAL_DATE", "type": "field", "idx": 34511, "Desc": "the iso date formatter that formats or parses the ordinal date without an offset , such as ' 2012-337 ' . this returns an immutable formatter capable of formatting and parsing the iso-8601 extended ordinal date format . the format consists of : four digits or more for the year . years in the range 0000 to 9999 will be pre-padded by zero to ensure four digits . years outside that range will have a prefixed positive or negative symbol . a dash three digits for the day-of-year . this is pre-padded by zero to ensure three digits . if the offset is not available to format or parse then the format is complete . the offset id . if the offset has seconds then they will be handled even though this is not part of the iso-8601 standard . parsing is case insensitive . as this formatter has an optional element , it may be necessary to parse using parsebest ( java.lang.charsequence , java.time.temporal.temporalquery < ? > ... ) . the returned formatter has a chronology of iso set to ensure dates in other calendar systems are correctly converted . it has no override zone and uses the strict resolver style ."}{"node_name": "ISO_WEEK_DATE", "type": "field", "idx": 34512, "Desc": "the iso date formatter that formats or parses the week-based date without an offset , such as ' 2012-w48-6 ' . this returns an immutable formatter capable of formatting and parsing the iso-8601 extended week-based date format . the format consists of : four digits or more for the week-based-year . years in the range 0000 to 9999 will be pre-padded by zero to ensure four digits . years outside that range will have a prefixed positive or negative symbol . a dash the letter ' w ' . parsing is case insensitive . two digits for the week-of-week-based-year . this is pre-padded by zero to ensure three digits . a dash one digit for the day-of-week . the value run from monday ( 1 ) to sunday ( 7 ) . if the offset is not available to format or parse then the format is complete . the offset id . if the offset has seconds then they will be handled even though this is not part of the iso-8601 standard . parsing is case insensitive . as this formatter has an optional element , it may be necessary to parse using parsebest ( java.lang.charsequence , java.time.temporal.temporalquery < ? > ... ) . the returned formatter has a chronology of iso set to ensure dates in other calendar systems are correctly converted . it has no override zone and uses the strict resolver style ."}{"node_name": "ISO_INSTANT", "type": "field", "idx": 34513, "Desc": "the iso instant formatter that formats or parses an instant in utc , such as ' 2011-12-03t10 : 15:30 z ' . this returns an immutable formatter capable of formatting and parsing the iso-8601 instant format . when formatting , the instant will always be suffixed by ' z ' to indicate utc . the second-of-minute is always output . the nano-of-second outputs zero , three , six or nine digits as necessary . when parsing , the behaviour of datetimeformatterbuilder.appendoffsetid() will be used to parse the offset , converting the instant to utc as necessary . the time to at least the seconds field is required . fractional seconds from zero to nine are parsed . the localized decimal style is not used . this is a special case formatter intended to allow a human readable form of an instant . the instant class is designed to only represent a point in time and internally stores a value in nanoseconds from a fixed epoch of 1970-01-01z . as such , an instant cannot be formatted as a date or time without providing some form of time-zone . this formatter allows the instant to be formatted , by providing a suitable conversion using zoneoffset.utc . the format consists of : the iso_offset_date_time where the instant is converted from chronofield.instant_seconds and chronofield.nano_of_second using the utc offset . parsing is case insensitive . the returned formatter has no override chronology or zone . it uses the strict resolver style ."}{"node_name": "BASIC_ISO_DATE", "type": "field", "idx": 34514, "Desc": "the iso date formatter that formats or parses a date without an offset , such as ' 20111203 ' . this returns an immutable formatter capable of formatting and parsing the iso-8601 basic local date format . the format consists of : four digits for the year . only years in the range 0000 to 9999 are supported . two digits for the month-of-year . this is pre-padded by zero to ensure two digits . two digits for the day-of-month . this is pre-padded by zero to ensure two digits . if the offset is not available to format or parse then the format is complete . the offset id without colons . if the offset has seconds then they will be handled even though this is not part of the iso-8601 standard . the offset parsing is lenient , which allows the minutes and seconds to be optional . parsing is case insensitive . as this formatter has an optional element , it may be necessary to parse using parsebest ( java.lang.charsequence , java.time.temporal.temporalquery < ? > ... ) . the returned formatter has a chronology of iso set to ensure dates in other calendar systems are correctly converted . it has no override zone and uses the strict resolver style ."}{"node_name": "RFC_1123_DATE_TIME", "type": "field", "idx": 34515, "Desc": "the rfc-1123 date-time formatter , such as ' tue , 3 jun 2008 11:05 : 30 gmt ' . this returns an immutable formatter capable of formatting and parsing most of the rfc-1123 format . rfc-1123 updates rfc-822 changing the year from two digits to four . this implementation requires a four digit year . this implementation also does not handle north american or military zone names , only ' gmt ' and offset amounts . the format consists of : if the day-of-week is not available to format or parse then jump to day-of-month . three letter day-of-week in english . a comma a space one or two digits for the day-of-month . a space three letter month-of-year in english . a space four digits for the year . only years in the range 0000 to 9999 are supported . a space two digits for the hour-of-day . this is pre-padded by zero to ensure two digits . a colon two digits for the minute-of-hour . this is pre-padded by zero to ensure two digits . if the second-of-minute is not available then jump to the next space . a colon two digits for the second-of-minute . this is pre-padded by zero to ensure two digits . a space the offset id without colons or seconds . an offset of zero uses \" gmt \" . north american zone names and military zone names are not handled . parsing is case insensitive . the returned formatter has a chronology of iso set to ensure dates in other calendar systems are correctly converted . it has no override zone and uses the smart resolver style ."}{"node_name": "STANDARD", "type": "field", "idx": 34685, "Desc": "the standard set of non-localized decimal style symbols . this uses standard ascii characters for zero , positive , negative and a dot for the decimal point ."}{"node_name": "EPOCH", "type": "field", "idx": 34726, "Desc": "constant for the 1970-01-01t00 : 00:00 z epoch instant ."}{"node_name": "MIN", "type": "field", "idx": 34727, "Desc": "the minimum supported instant , ' - 1000000000-01-01t00 : 00z ' . this could be used by an application as a \" far past \" instant . this is one year earlier than the minimum localdatetime . this provides sufficient values to handle the range of zoneoffset which affect the instant in addition to the local date-time . the value is also chosen such that the value of the year fits in an int ."}{"node_name": "MAX", "type": "field", "idx": 34728, "Desc": "the maximum supported instant , ' 1000000000-12-31t23 : 59:59 .999999999z ' . this could be used by an application as a \" far future \" instant . this is one year later than the maximum localdatetime . this provides sufficient values to handle the range of zoneoffset which affect the instant in addition to the local date-time . the value is also chosen such that the value of the year fits in an int ."}{"node_name": "MIN", "type": "field", "idx": 34807, "Desc": "the minimum supported localdate , ' - 999999999-01-01 ' . this could be used by an application as a \" far past \" date ."}{"node_name": "MAX", "type": "field", "idx": 34808, "Desc": "the maximum supported localdate , ' + 999999999-12-31 ' . this could be used by an application as a \" far future \" date ."}{"node_name": "EPOCH", "type": "field", "idx": 34809, "Desc": "the epoch year localdate , ' 1970-01-01 ' ."}{"node_name": "MIN", "type": "field", "idx": 34949, "Desc": "the minimum supported localdatetime , ' - 999999999-01-01t00 : 00:00 ' . this is the local date-time of midnight at the start of the minimum date . this combines localdate.min and localtime.min . this could be used by an application as a \" far past \" date-time ."}{"node_name": "MAX", "type": "field", "idx": 34950, "Desc": "the maximum supported localdatetime , ' + 999999999-12-31t23 : 59:59 .999999999 ' . this is the local date-time just before midnight at the end of the maximum date . this combines localdate.max and localtime.max . this could be used by an application as a \" far future \" date-time ."}{"node_name": "MIN", "type": "field", "idx": 35128, "Desc": "the minimum supported localtime , ' 00:00 ' . this is the time of midnight at the start of the day ."}{"node_name": "MAX", "type": "field", "idx": 35129, "Desc": "the maximum supported localtime , ' 23:59 : 59.999999999 ' . this is the time just before midnight at the end of the day ."}{"node_name": "MIDNIGHT", "type": "field", "idx": 35130, "Desc": "the time of midnight at the start of the day , ' 00:00 ' ."}{"node_name": "NOON", "type": "field", "idx": 35131, "Desc": "the time of noon in the middle of the day , ' 12:00 ' ."}{"node_name": "MIN", "type": "field", "idx": 35338, "Desc": "the minimum supported offsetdatetime , ' - 999999999-01-01t00 : 00:00 + 18:00 ' . this is the local date-time of midnight at the start of the minimum date in the maximum offset ( larger offsets are earlier on the time-line ) . this combines localdatetime.min and zoneoffset.max . this could be used by an application as a \" far past \" date-time ."}{"node_name": "MAX", "type": "field", "idx": 35339, "Desc": "the maximum supported offsetdatetime , ' + 999999999-12-31t23 : 59:59 .999999999 - 18:00 ' . this is the local date-time just before midnight at the end of the maximum date in the minimum offset ( larger negative offsets are later on the time-line ) . this combines localdatetime.max and zoneoffset.min . this could be used by an application as a \" far future \" date-time ."}{"node_name": "MIN", "type": "field", "idx": 35495, "Desc": "the minimum supported offsettime , ' 00:00 : 00+ 18:00 ' . this is the time of midnight at the start of the day in the maximum offset ( larger offsets are earlier on the time-line ) . this combines localtime.min and zoneoffset.max . this could be used by an application as a \" far past \" date ."}{"node_name": "MAX", "type": "field", "idx": 35496, "Desc": "the maximum supported offsettime , ' 23:59 : 59.999999999-18 : 00 ' . this is the time just before midnight at the end of the day in the minimum offset ( larger negative offsets are later on the time-line ) . this combines localtime.max and zoneoffset.min . this could be used by an application as a \" far future \" date ."}{"node_name": "ZERO", "type": "field", "idx": 35608, "Desc": "a constant for a period of zero ."}{"node_name": "DAY_OF_QUARTER", "type": "field", "idx": 35692, "Desc": "DAY_OF_QUARTER that represents the day-of-quarter . DAY_OF_QUARTER allows the day-of-quarter value to be queried and set . the day-of-quarter has values from 1 to 90 in q1 of a standard year , from 1 to 91 in q1 of a leap year , from 1 to 91 in q2 and from 1 to 92 in q3 and q4 . the day-of-quarter can only be calculated if the day-of-year , month-of-year and year are available . when setting DAY_OF_QUARTER , the value is allowed to be partially lenient , taking any value from 1 to 92 . if the quarter has less than 92 days , then day 92 , and potentially day 91 , is in the following quarter . in the resolving phase of parsing , a date can be created from a year , quarter-of-year and day-of-quarter . in strict mode , all three fields are validated against their range of valid values . the day-of-quarter field is validated from 1 to 90 , 91 or 92 depending on the year and quarter . in smart mode , all three fields are validated against their range of valid values . the day-of-quarter field is validated between 1 and 92 , ignoring the actual range based on the year and quarter . if the day-of-quarter exceeds the actual range by one day , then the resulting date is one day later . if the day-of-quarter exceeds the actual range by two days , then the resulting date is two days later . in lenient mode , only the year is validated against the range of valid values . the resulting date is calculated equivalent to the following three stage approach . first , create a date on the first of january in the requested year . then take the quarter-of-year , subtract one , and add the amount in quarters to the date . finally , take the day-of-quarter , subtract one , and add the amount in days to the date . this unit is an immutable and thread-safe singleton ."}{"node_name": "QUARTER_OF_YEAR", "type": "field", "idx": 35693, "Desc": "QUARTER_OF_YEAR that represents the quarter-of-year . QUARTER_OF_YEAR allows the quarter-of-year value to be queried and set . the quarter-of-year has values from 1 to 4 . the quarter-of-year can only be calculated if the month-of-year is available . in the resolving phase of parsing , a date can be created from a year , quarter-of-year and day-of-quarter . see day_of_quarter for details . this unit is an immutable and thread-safe singleton ."}{"node_name": "WEEK_OF_WEEK_BASED_YEAR", "type": "field", "idx": 35694, "Desc": "WEEK_OF_WEEK_BASED_YEAR that represents the week-of-week-based-year . WEEK_OF_WEEK_BASED_YEAR allows the week of the week-based-year value to be queried and set . the week-of-week-based-year has values from 1 to 52 , or 53 if the week-based-year has 53 weeks . in the resolving phase of parsing , a date can be created from a week-based-year , week-of-week-based-year and day-of-week . in strict mode , all three fields are validated against their range of valid values . the week-of-week-based-year field is validated from 1 to 52 or 53 depending on the week-based-year . in smart mode , all three fields are validated against their range of valid values . the week-of-week-based-year field is validated between 1 and 53 , ignoring the week-based-year . if the week-of-week-based-year is 53 , but the week-based-year only has 52 weeks , then the resulting date is in week 1 of the following week-based-year . in lenient mode , only the week-based-year is validated against the range of valid values . if the day-of-week is outside the range 1 to 7 , then the resulting date is adjusted by a suitable number of weeks to reduce the day-of-week to the range 1 to 7 . if the week-of-week-based-year value is outside the range 1 to 52 , then any excess weeks are added or subtracted from the resulting date . this unit is an immutable and thread-safe singleton ."}{"node_name": "WEEK_BASED_YEAR", "type": "field", "idx": 35695, "Desc": "WEEK_BASED_YEAR that represents the week-based-year . WEEK_BASED_YEAR allows the week-based-year value to be queried and set . WEEK_BASED_YEAR has a range that matches localdate.max and localdate.min . in the resolving phase of parsing , a date can be created from a week-based-year , week-of-week-based-year and day-of-week . see week_of_week_based_year for details . this unit is an immutable and thread-safe singleton ."}{"node_name": "WEEK_BASED_YEARS", "type": "field", "idx": 35696, "Desc": "the unit that represents week-based-years for the purpose of addition and subtraction . this allows a number of week-based-years to be added to , or subtracted from , a date . the unit is equal to either 52 or 53 weeks . the estimated duration of a week-based-year is the same as that of a standard iso year at 365.2425 days . the rules for addition add the number of week-based-years to the existing value for the week-based-year field . if the resulting week-based-year only has 52 weeks , then the date will be in week 1 of the following week-based-year . this unit is an immutable and thread-safe singleton ."}{"node_name": "QUARTER_YEARS", "type": "field", "idx": 35697, "Desc": "unit that represents the concept of a quarter-year . for the iso calendar system , it is equal to 3 months . the estimated duration of a quarter-year is one quarter of 365.2425 days . this unit is an immutable and thread-safe singleton ."}{"node_name": "JULIAN_DAY", "type": "field", "idx": 35699, "Desc": "julian day field . this is an integer-based version of the julian day number . julian day is a well-known system that represents the count of whole days since day 0 , which is defined to be january 1 , 4713 bce in the julian calendar , and - 4713-11-24 gregorian . JULIAN_DAY has \" julianday \" as ' name ' , and ' days ' as ' baseunit ' . JULIAN_DAY always refers to the local date-time , ignoring the offset or zone . for date-times , ' julian_day.getfrom() ' assumes the same value from midnight until just before the next midnight . when ' julian_day.adjustinto() ' is applied to a date-time , the time of day portion remains unaltered . ' julian_day.adjustinto() ' and ' julian_day.getfrom() ' only apply to temporal objects that can be converted into chronofield.epoch_day . an unsupportedtemporaltypeexception is thrown for any other type of object . in the resolving phase of parsing , a date can be created from a julian day field . in strict mode and smart mode the julian day value is validated against the range of valid values . in lenient mode no validation occurs . astronomical and scientific notes the standard astronomical definition uses a fraction to indicate the time-of-day , where each day is counted from midday to midday . for example , a fraction of 0 represents midday , a fraction of 0.25 represents 18:00 , a fraction of 0.5 represents midnight and a fraction of 0.75 represents 06:00 . by contrast , this implementation has no fractional part , and counts days from midnight to midnight . this implementation uses an integer and days starting at midnight . the integer value for the julian day number is the astronomical julian day value at midday of the date in question . this amounts to the astronomical julian day , rounded to an integer jdn = floor ( jd + 0.5 ) . | iso date | julian day number | astronomical julian day | | 1970-01-01t00 : 00 | 2,440,588 | 2,440,587 .5 | | 1970-01-01t06 : 00 | 2,440,588 | 2,440,587 .75 | | 1970-01-01t12 : 00 | 2,440,588 | 2,440,588 .0 | | 1970-01-01t18 : 00 | 2,440,588 | 2,440,588 .25 | | 1970-01-02t00 : 00 | 2,440,589 | 2,440,588 .5 | | 1970-01-02t06 : 00 | 2,440,589 | 2,440,588 .75 | | 1970-01-02t12 : 00 | 2,440,589 | 2,440,589 .0 | julian days are sometimes taken to imply universal time or utc , but this implementation always uses the julian day number for the local date , regardless of the offset or time-zone ."}{"node_name": "MODIFIED_JULIAN_DAY", "type": "field", "idx": 35700, "Desc": "modified julian day field . this is an integer-based version of the modified julian day number . modified julian day ( mjd ) is a well-known system that counts days continuously . it is defined relative to astronomical julian day as mjd = jd - 2400000.5 . each modified julian day runs from midnight to midnight . MODIFIED_JULIAN_DAY always refers to the local date-time , ignoring the offset or zone . for date-times , ' modified_julian_day.getfrom() ' assumes the same value from midnight until just before the next midnight . when ' modified_julian_day.adjustinto() ' is applied to a date-time , the time of day portion remains unaltered . ' modified_julian_day.adjustinto() ' and ' modified_julian_day.getfrom() ' only apply to temporal objects that can be converted into chronofield.epoch_day . an unsupportedtemporaltypeexception is thrown for any other type of object . this implementation is an integer version of mjd with the decimal part rounded to floor . in the resolving phase of parsing , a date can be created from a modified julian day field . in strict mode and smart mode the modified julian day value is validated against the range of valid values . in lenient mode no validation occurs . astronomical and scientific notes | iso date | modified julian day | decimal mjd | | 1970-01-01t00 : 00 | 40,587 | 40,587 .0 | | 1970-01-01t06 : 00 | 40,587 | 40,587 .25 | | 1970-01-01t12 : 00 | 40,587 | 40,587 .5 | | 1970-01-01t18 : 00 | 40,587 | 40,587 .75 | | 1970-01-02t00 : 00 | 40,588 | 40,588 .0 | | 1970-01-02t06 : 00 | 40,588 | 40,588 .25 | | 1970-01-02t12 : 00 | 40,588 | 40,588 .5 | modified julian days are sometimes taken to imply universal time or utc , but this implementation always uses the modified julian day for the local date , regardless of the offset or time-zone ."}{"node_name": "RATA_DIE", "type": "field", "idx": 35701, "Desc": "rata die field . rata die counts whole days continuously starting day 1 at midnight at the beginning of 0001-01-01 ( iso ) . RATA_DIE always refers to the local date-time , ignoring the offset or zone . for date-times , ' rata_die.getfrom() ' assumes the same value from midnight until just before the next midnight . when ' rata_die.adjustinto() ' is applied to a date-time , the time of day portion remains unaltered . ' rata_die.adjustinto() ' and ' rata_die.getfrom() ' only apply to temporal objects that can be converted into chronofield.epoch_day . an unsupportedtemporaltypeexception is thrown for any other type of object . in the resolving phase of parsing , a date can be created from a rata die field . in strict mode and smart mode the rata die value is validated against the range of valid values . in lenient mode no validation occurs ."}{"node_name": "ISO", "type": "field", "idx": 35856, "Desc": "the iso-8601 definition , where a week starts on monday and the first week has a minimum of 4 days . the iso-8601 standard defines a calendar system based on weeks . it uses the week-based-year and week-of-week-based-year concepts to split up the passage of days instead of the standard year / month / day . note that the first week may start in the previous calendar year . note also that the first few days of a calendar year may be in the week-based-year corresponding to the previous calendar year ."}{"node_name": "SUNDAY_START", "type": "field", "idx": 35857, "Desc": "the common definition of a week that starts on sunday and the first week has a minimum of 1 day . defined as starting on sunday and with a minimum of 1 day in the month . this week definition is in use in the us and other european countries ."}{"node_name": "WEEK_BASED_YEARS", "type": "field", "idx": 35858, "Desc": "the unit that represents week-based-years for the purpose of addition and subtraction . this allows a number of week-based-years to be added to , or subtracted from , a date . the unit is equal to either 52 or 53 weeks . the estimated duration of a week-based-year is the same as that of a standard iso year at 365.2425 days . the rules for addition add the number of week-based-years to the existing value for the week-based-year field retaining the week-of-week-based-year and day-of-week , unless the week number it too large for the target year . in that case , the week is set to the last week of the year with the same day-of-week . this unit is an immutable and thread-safe singleton ."}{"node_name": "MIN_VALUE", "type": "field", "idx": 35876, "Desc": "the minimum supported year , ' - 999,999,999 ' ."}{"node_name": "MAX_VALUE", "type": "field", "idx": 35877, "Desc": "the maximum supported year , ' + 999,999,999 ' ."}{"node_name": "SHORT_IDS", "type": "field", "idx": 36312, "Desc": "a map of zone overrides to enable the short time-zone names to be used . use of short zone ids has been deprecated in java.util.timezone . this map allows the ids to continue to be used via the of ( string , map ) factory method . this map contains a mapping of the ids that is in line with tzdb 2005r and later , where ' est ' , ' mst ' and ' hst ' map to ids which do not include daylight savings . this maps as follows : est - - 05:00 hst - - 10:00 mst - - 07:00 act - australia / darwin aet - australia / sydney agt - america / argentina / buenos_aires art - africa / cairo ast - america / anchorage bet - america / sao_paulo bst - asia / dhaka cat - africa / harare cnt - america / st_johns cst - america / chicago ctt - asia / shanghai eat - africa / addis_ababa ect - europe / paris iet - america / indiana / indianapolis ist - asia / kolkata jst - asia / tokyo mit - pacific / apia net - asia / yerevan nst - pacific / auckland plt - asia / karachi pnt - america / phoenix prt - america / puerto_rico pst - america / los_angeles sst - pacific / guadalcanal vst - asia / ho_chi_minh the map is unmodifiable ."}{"node_name": "UTC", "type": "field", "idx": 36336, "Desc": "the time-zone offset for utc , with an id of ' z ' ."}{"node_name": "MIN", "type": "field", "idx": 36337, "Desc": "constant for the minimum supported offset ."}{"node_name": "MAX", "type": "field", "idx": 36338, "Desc": "constant for the maximum supported offset ."}{"node_name": "modCount", "type": "field", "idx": 36399, "Desc": "the number of times this list has been structurally modified . structural modifications are those that change the size of the list , or otherwise perturb it in such a fashion that iterations in progress may yield incorrect results . modCount is used by the iterator and list iterator implementation returned by the iterator and listiterator methods . if the value of modCount changes unexpectedly , the iterator ( or list iterator ) will throw a concurrentmodificationexception in response to the next , remove , previous , set or add operations . this provides fail-fast behavior , rather than non-deterministic behavior in the face of concurrent modification during iteration . use of modCount by subclasses is optional . if a subclass wishes to provide fail-fast iterators ( and list iterators ) , then it merely has to increment modCount in its add ( int , e ) and remove ( int ) methods ( and any other methods that it overrides that result in structural modifications to the list ) . a single call to add ( int , e ) or remove ( int ) must add no more than one to modCount , or the iterators ( and list iterators ) will throw bogus concurrentmodificationexceptions . if an implementation does not wish to provide fail-fast iterators , modCount may be ignored ."}{"node_name": "ERA", "type": "field", "idx": 37609, "Desc": "field number for get and set indicating the era , e.g. , ad or bc in the julian calendar . this is a calendar-specific value ; see subclass documentation ."}{"node_name": "YEAR", "type": "field", "idx": 37610, "Desc": "field number for get and set indicating the year . this is a calendar-specific value ; see subclass documentation ."}{"node_name": "MONTH", "type": "field", "idx": 37611, "Desc": "field number for get and set indicating the month . this is a calendar-specific value . the first month of the year in the gregorian and julian calendars is january which is 0 ; the last depends on the number of months in a year ."}{"node_name": "WEEK_OF_YEAR", "type": "field", "idx": 37612, "Desc": "field number for get and set indicating the week number within the current year . the first week of the year , as defined by getfirstdayofweek() and getminimaldaysinfirstweek() , has value 1 . subclasses define the value of week_of_year for days before the first week of the year ."}{"node_name": "WEEK_OF_MONTH", "type": "field", "idx": 37613, "Desc": "field number for get and set indicating the week number within the current month . the first week of the month , as defined by getfirstdayofweek() and getminimaldaysinfirstweek() , has value 1 . subclasses define the value of week_of_month for days before the first week of the month ."}{"node_name": "DATE", "type": "field", "idx": 37614, "Desc": "field number for get and set indicating the day of the month . this is a synonym for day_of_month . the first day of the month has value 1 ."}{"node_name": "DAY_OF_MONTH", "type": "field", "idx": 37615, "Desc": "field number for get and set indicating the day of the month . this is a synonym for date . the first day of the month has value 1 ."}{"node_name": "DAY_OF_YEAR", "type": "field", "idx": 37616, "Desc": "field number for get and set indicating the day number within the current year . the first day of the year has value 1 ."}{"node_name": "DAY_OF_WEEK", "type": "field", "idx": 37617, "Desc": "field number for get and set indicating the day of the week . DAY_OF_WEEK takes values sunday , monday , tuesday , wednesday , thursday , friday , and saturday ."}{"node_name": "DAY_OF_WEEK_IN_MONTH", "type": "field", "idx": 37618, "Desc": "field number for get and set indicating the ordinal number of the day of the week within the current month . together with the day_of_week field , this uniquely specifies a day within a month . unlike week_of_month and week_of_year , DAY_OF_WEEK_IN_MONTH's value does not depend on getfirstdayofweek() or getminimaldaysinfirstweek() . day_of_month 1 through 7 always correspond to day_of_week_in_month 1 ; 8 through 14 correspond to day_of_week_in_month 2 , and so on . day_of_week_in_month 0 indicates the week before day_of_week_in_month 1 . negative values count back from the end of the month , so the last sunday of a month is specified as day_of_week = sunday , day_of_week_in_month = -1 . because negative values count backward they will usually be aligned differently within the month than positive values . for example , if a month has 31 days , day_of_week_in_month -1 will overlap day_of_week_in_month 5 and the end of 4 ."}{"node_name": "AM_PM", "type": "field", "idx": 37619, "Desc": "field number for get and set indicating whether the hour is before or after noon . e.g. , at 10:04 : 15.250 pm the am_pm is pm ."}{"node_name": "HOUR", "type": "field", "idx": 37620, "Desc": "field number for get and set indicating the hour of the morning or afternoon . hour is used for the 12-hour clock ( 0 - 11 ) . noon and midnight are represented by 0 , not by 12 . e.g. , at 10:04 : 15.250 pm the hour is 10 ."}{"node_name": "HOUR_OF_DAY", "type": "field", "idx": 37621, "Desc": "field number for get and set indicating the hour of the day . hour_of_day is used for the 24-hour clock . e.g. , at 10:04 : 15.250 pm the hour_of_day is 22 ."}{"node_name": "MINUTE", "type": "field", "idx": 37622, "Desc": "field number for get and set indicating the minute within the hour . e.g. , at 10:04 : 15.250 pm the minute is 4 ."}{"node_name": "SECOND", "type": "field", "idx": 37623, "Desc": "field number for get and set indicating the second within the minute . e.g. , at 10:04 : 15.250 pm the second is 15 ."}{"node_name": "MILLISECOND", "type": "field", "idx": 37624, "Desc": "field number for get and set indicating the millisecond within the second . e.g. , at 10:04 : 15.250 pm the millisecond is 250 ."}{"node_name": "ZONE_OFFSET", "type": "field", "idx": 37625, "Desc": "field number for get and set indicating the raw offset from gmt in milliseconds . ZONE_OFFSET reflects the correct gmt offset value of the time zone of this calendar if the timezone implementation subclass supports historical gmt offset changes ."}{"node_name": "DST_OFFSET", "type": "field", "idx": 37626, "Desc": "field number for get and set indicating the daylight saving offset in milliseconds . DST_OFFSET reflects the correct daylight saving offset value of the time zone of this calendar if the timezone implementation subclass supports historical daylight saving time schedule changes ."}{"node_name": "FIELD_COUNT", "type": "field", "idx": 37627, "Desc": "the number of distinct fields recognized by get and set . field numbers range from 0 .. field_count-1 ."}{"node_name": "SUNDAY", "type": "field", "idx": 37628, "Desc": "value of the day_of_week field indicating sunday ."}{"node_name": "MONDAY", "type": "field", "idx": 37629, "Desc": "value of the day_of_week field indicating monday ."}{"node_name": "TUESDAY", "type": "field", "idx": 37630, "Desc": "value of the day_of_week field indicating tuesday ."}{"node_name": "WEDNESDAY", "type": "field", "idx": 37631, "Desc": "value of the day_of_week field indicating wednesday ."}{"node_name": "THURSDAY", "type": "field", "idx": 37632, "Desc": "value of the day_of_week field indicating thursday ."}{"node_name": "FRIDAY", "type": "field", "idx": 37633, "Desc": "value of the day_of_week field indicating friday ."}{"node_name": "SATURDAY", "type": "field", "idx": 37634, "Desc": "value of the day_of_week field indicating saturday ."}{"node_name": "JANUARY", "type": "field", "idx": 37635, "Desc": "value of the month field indicating the first month of the year in the gregorian and julian calendars ."}{"node_name": "FEBRUARY", "type": "field", "idx": 37636, "Desc": "value of the month field indicating the second month of the year in the gregorian and julian calendars ."}{"node_name": "MARCH", "type": "field", "idx": 37637, "Desc": "value of the month field indicating the third month of the year in the gregorian and julian calendars ."}{"node_name": "APRIL", "type": "field", "idx": 37638, "Desc": "value of the month field indicating the fourth month of the year in the gregorian and julian calendars ."}{"node_name": "MAY", "type": "field", "idx": 37639, "Desc": "value of the month field indicating the fifth month of the year in the gregorian and julian calendars ."}{"node_name": "JUNE", "type": "field", "idx": 37640, "Desc": "value of the month field indicating the sixth month of the year in the gregorian and julian calendars ."}{"node_name": "JULY", "type": "field", "idx": 37641, "Desc": "value of the month field indicating the seventh month of the year in the gregorian and julian calendars ."}{"node_name": "AUGUST", "type": "field", "idx": 37642, "Desc": "value of the month field indicating the eighth month of the year in the gregorian and julian calendars ."}{"node_name": "SEPTEMBER", "type": "field", "idx": 37643, "Desc": "value of the month field indicating the ninth month of the year in the gregorian and julian calendars ."}{"node_name": "OCTOBER", "type": "field", "idx": 37644, "Desc": "value of the month field indicating the tenth month of the year in the gregorian and julian calendars ."}{"node_name": "NOVEMBER", "type": "field", "idx": 37645, "Desc": "value of the month field indicating the eleventh month of the year in the gregorian and julian calendars ."}{"node_name": "DECEMBER", "type": "field", "idx": 37646, "Desc": "value of the month field indicating the twelfth month of the year in the gregorian and julian calendars ."}{"node_name": "UNDECIMBER", "type": "field", "idx": 37647, "Desc": "value of the month field indicating the thirteenth month of the year . although gregoriancalendar does not use this value , lunar calendars do ."}{"node_name": "AM", "type": "field", "idx": 37648, "Desc": "value of the am_pm field indicating the period of the day from midnight to just before noon ."}{"node_name": "PM", "type": "field", "idx": 37649, "Desc": "value of the am_pm field indicating the period of the day from noon to just before midnight ."}{"node_name": "ALL_STYLES", "type": "field", "idx": 37650, "Desc": "a style specifier for getdisplaynames indicating names in all styles , such as \" january \" and \" jan \" ."}{"node_name": "SHORT", "type": "field", "idx": 37651, "Desc": "a style specifier for getdisplayname and getdisplaynames equivalent to short_format ."}{"node_name": "LONG", "type": "field", "idx": 37652, "Desc": "a style specifier for getdisplayname and getdisplaynames equivalent to long_format ."}{"node_name": "NARROW_FORMAT", "type": "field", "idx": 37653, "Desc": "a style specifier for getdisplayname and getdisplaynames indicating a narrow name used for format . narrow names are typically single character strings , such as \" m \" for monday ."}{"node_name": "NARROW_STANDALONE", "type": "field", "idx": 37654, "Desc": "a style specifier for getdisplayname and getdisplaynames indicating a narrow name independently . narrow names are typically single character strings , such as \" m \" for monday ."}{"node_name": "SHORT_FORMAT", "type": "field", "idx": 37655, "Desc": "a style specifier for getdisplayname and getdisplaynames indicating a short name used for format ."}{"node_name": "LONG_FORMAT", "type": "field", "idx": 37656, "Desc": "a style specifier for getdisplayname and getdisplaynames indicating a long name used for format ."}{"node_name": "SHORT_STANDALONE", "type": "field", "idx": 37657, "Desc": "a style specifier for getdisplayname and getdisplaynames indicating a short name used independently , such as a month abbreviation as calendar headers ."}{"node_name": "LONG_STANDALONE", "type": "field", "idx": 37658, "Desc": "a style specifier for getdisplayname and getdisplaynames indicating a long name used independently , such as a month name as calendar headers ."}{"node_name": "fields", "type": "field", "idx": 37659, "Desc": "the calendar field values for the currently set time for this calendar . this is an array of field_count integers , with index values era through dst_offset ."}{"node_name": "isSet", "type": "field", "idx": 37660, "Desc": "the flags which tell if a specified calendar field for the calendar is set . a new object has no fields set . after the first call to a method which generates isSets , they all remain set after that . this is an array of field_count booleans , with index values era through dst_offset ."}{"node_name": "time", "type": "field", "idx": 37661, "Desc": "the currently set time for this calendar , expressed in milliseconds after january 1 , 1970 , 0:00 : 00 gmt ."}{"node_name": "isTimeSet", "type": "field", "idx": 37662, "Desc": "true if then the value of time is valid . the time is made invalid by a change to an item of field [ ] ."}{"node_name": "areFieldsSet", "type": "field", "idx": 37663, "Desc": "true if fields [ ] are in sync with the currently set time . if false , then the next attempt to get the value of a field will force a recomputation of all fields from the current value of time ."}{"node_name": "EMPTY_SET", "type": "field", "idx": 37810, "Desc": "the empty set ( immutable ) . this set is serializable ."}{"node_name": "EMPTY_LIST", "type": "field", "idx": 37811, "Desc": "the empty list ( immutable ) . this list is serializable ."}{"node_name": "EMPTY_MAP", "type": "field", "idx": 37812, "Desc": "the empty map ( immutable ) . this map is serializable ."}{"node_name": "defaultForkJoinWorkerThreadFactory", "type": "field", "idx": 39991, "Desc": "creates a new forkjoinworkerthread . this factory is used unless overridden in forkjoinpool constructors ."}{"node_name": "source", "type": "field", "idx": 41328, "Desc": "the object on which the event initially occurred ."}{"node_name": "LEFT_JUSTIFY", "type": "field", "idx": 41346, "Desc": "left-justifies the output . spaces ( ' \\u0020 ') will be added at the end of the converted value as required to fill the minimum width of LEFT_JUSTIFY . if this flag is not set then the output will be right-justified . this flag corresponds to ' - ' ( ' \\u002d ') in the format specifier ."}{"node_name": "UPPERCASE", "type": "field", "idx": 41347, "Desc": "converts the output to upper case according to the rules of the locale given during creation of the formatter argument of the formatto() method . the output should be equivalent the following invocation of string.touppercase ( java.util.locale ) out.touppercase() this flag corresponds to ' s ' ( ' \\u0053 ') in the format specifier ."}{"node_name": "ALTERNATE", "type": "field", "idx": 41348, "Desc": "requires the output to use an alternate form . the definition of the form is specified by the formattable . this flag corresponds to ' # ' ( ' \\u0023 ') in the format specifier ."}{"node_name": "BC", "type": "field", "idx": 41617, "Desc": "value of the era field indicating the period before the common era ( before christ ) , also known as bce . the sequence of years at the transition from bc to ad is ..., 2 bc , 1 bc , 1 ad , 2 ad ,..."}{"node_name": "AD", "type": "field", "idx": 41618, "Desc": "value of the era field indicating the common era ( anno domini ) , also known as ce . the sequence of years at the transition from bc to ad is ..., 2 bc , 1 bc , 1 ad , 2 ad ,..."}{"node_name": "map", "type": "field", "idx": 41893, "Desc": "the attribute name-value mappings ."}{"node_name": "MANIFEST_VERSION", "type": "field", "idx": 41930, "Desc": "name object for manifest-version manifest attribute . this attribute indicates the version number of the manifest standard to which a jar file's manifest conforms ."}{"node_name": "SIGNATURE_VERSION", "type": "field", "idx": 41931, "Desc": "name object for signature-version manifest attribute used when signing jar files ."}{"node_name": "CONTENT_TYPE", "type": "field", "idx": 41932, "Desc": "name object for content-type manifest attribute ."}{"node_name": "CLASS_PATH", "type": "field", "idx": 41933, "Desc": "name object for class-path manifest attribute ."}{"node_name": "MAIN_CLASS", "type": "field", "idx": 41934, "Desc": "name object for main-class manifest attribute used for launching applications packaged in jar files . the main-class attribute is used in conjunction with the -jar command-line option of the java application launcher ."}{"node_name": "SEALED", "type": "field", "idx": 41935, "Desc": "name object for sealed manifest attribute used for sealing ."}{"node_name": "EXTENSION_LIST", "type": "field", "idx": 41936, "Desc": "name object for extension-list manifest attribute used for the extension mechanism that is no longer supported ."}{"node_name": "EXTENSION_NAME", "type": "field", "idx": 41937, "Desc": "name object for extension-name manifest attribute . used for the extension mechanism that is no longer supported ."}{"node_name": "IMPLEMENTATION_TITLE", "type": "field", "idx": 41938, "Desc": "name object for implementation-title manifest attribute used for package versioning ."}{"node_name": "IMPLEMENTATION_VERSION", "type": "field", "idx": 41939, "Desc": "name object for implementation-version manifest attribute used for package versioning ."}{"node_name": "IMPLEMENTATION_VENDOR", "type": "field", "idx": 41940, "Desc": "name object for implementation-vendor manifest attribute used for package versioning ."}{"node_name": "SPECIFICATION_TITLE", "type": "field", "idx": 41941, "Desc": "name object for specification-title manifest attribute used for package versioning ."}{"node_name": "SPECIFICATION_VERSION", "type": "field", "idx": 41942, "Desc": "name object for specification-version manifest attribute used for package versioning ."}{"node_name": "SPECIFICATION_VENDOR", "type": "field", "idx": 41943, "Desc": "name object for specification-vendor manifest attribute used for package versioning ."}{"node_name": "MULTI_RELEASE", "type": "field", "idx": 41944, "Desc": "name object for multi-release manifest attribute that indicates this is a multi-release jar file ."}{"node_name": "LOCSIG", "type": "field", "idx": 41952, "Desc": ""}{"node_name": "EXTSIG", "type": "field", "idx": 41953, "Desc": ""}{"node_name": "CENSIG", "type": "field", "idx": 41954, "Desc": ""}{"node_name": "ENDSIG", "type": "field", "idx": 41955, "Desc": ""}{"node_name": "LOCHDR", "type": "field", "idx": 41956, "Desc": ""}{"node_name": "EXTHDR", "type": "field", "idx": 41957, "Desc": ""}{"node_name": "CENHDR", "type": "field", "idx": 41958, "Desc": ""}{"node_name": "ENDHDR", "type": "field", "idx": 41959, "Desc": ""}{"node_name": "LOCVER", "type": "field", "idx": 41960, "Desc": ""}{"node_name": "LOCFLG", "type": "field", "idx": 41961, "Desc": ""}{"node_name": "LOCHOW", "type": "field", "idx": 41962, "Desc": ""}{"node_name": "LOCTIM", "type": "field", "idx": 41963, "Desc": ""}{"node_name": "LOCCRC", "type": "field", "idx": 41964, "Desc": ""}{"node_name": "LOCSIZ", "type": "field", "idx": 41965, "Desc": ""}{"node_name": "LOCLEN", "type": "field", "idx": 41966, "Desc": ""}{"node_name": "LOCNAM", "type": "field", "idx": 41967, "Desc": ""}{"node_name": "LOCEXT", "type": "field", "idx": 41968, "Desc": ""}{"node_name": "EXTCRC", "type": "field", "idx": 41969, "Desc": ""}{"node_name": "EXTSIZ", "type": "field", "idx": 41970, "Desc": ""}{"node_name": "EXTLEN", "type": "field", "idx": 41971, "Desc": ""}{"node_name": "CENVEM", "type": "field", "idx": 41972, "Desc": ""}{"node_name": "CENVER", "type": "field", "idx": 41973, "Desc": ""}{"node_name": "CENFLG", "type": "field", "idx": 41974, "Desc": ""}{"node_name": "CENHOW", "type": "field", "idx": 41975, "Desc": ""}{"node_name": "CENTIM", "type": "field", "idx": 41976, "Desc": ""}{"node_name": "CENCRC", "type": "field", "idx": 41977, "Desc": ""}{"node_name": "CENSIZ", "type": "field", "idx": 41978, "Desc": ""}{"node_name": "CENLEN", "type": "field", "idx": 41979, "Desc": ""}{"node_name": "CENNAM", "type": "field", "idx": 41980, "Desc": ""}{"node_name": "CENEXT", "type": "field", "idx": 41981, "Desc": ""}{"node_name": "CENCOM", "type": "field", "idx": 41982, "Desc": ""}{"node_name": "CENDSK", "type": "field", "idx": 41983, "Desc": ""}{"node_name": "CENATT", "type": "field", "idx": 41984, "Desc": ""}{"node_name": "CENATX", "type": "field", "idx": 41985, "Desc": ""}{"node_name": "CENOFF", "type": "field", "idx": 41986, "Desc": ""}{"node_name": "ENDSUB", "type": "field", "idx": 41987, "Desc": ""}{"node_name": "ENDTOT", "type": "field", "idx": 41988, "Desc": ""}{"node_name": "ENDSIZ", "type": "field", "idx": 41989, "Desc": ""}{"node_name": "ENDOFF", "type": "field", "idx": 41990, "Desc": ""}{"node_name": "ENDCOM", "type": "field", "idx": 41991, "Desc": ""}{"node_name": "MANIFEST_NAME", "type": "field", "idx": 42007, "Desc": "the jar manifest file name ."}{"node_name": "LOCSIG", "type": "field", "idx": 42008, "Desc": ""}{"node_name": "EXTSIG", "type": "field", "idx": 42009, "Desc": ""}{"node_name": "CENSIG", "type": "field", "idx": 42010, "Desc": ""}{"node_name": "ENDSIG", "type": "field", "idx": 42011, "Desc": ""}{"node_name": "LOCHDR", "type": "field", "idx": 42012, "Desc": ""}{"node_name": "EXTHDR", "type": "field", "idx": 42013, "Desc": ""}{"node_name": "CENHDR", "type": "field", "idx": 42014, "Desc": ""}{"node_name": "ENDHDR", "type": "field", "idx": 42015, "Desc": ""}{"node_name": "LOCVER", "type": "field", "idx": 42016, "Desc": ""}{"node_name": "LOCFLG", "type": "field", "idx": 42017, "Desc": ""}{"node_name": "LOCHOW", "type": "field", "idx": 42018, "Desc": ""}{"node_name": "LOCTIM", "type": "field", "idx": 42019, "Desc": ""}{"node_name": "LOCCRC", "type": "field", "idx": 42020, "Desc": ""}{"node_name": "LOCSIZ", "type": "field", "idx": 42021, "Desc": ""}{"node_name": "LOCLEN", "type": "field", "idx": 42022, "Desc": ""}{"node_name": "LOCNAM", "type": "field", "idx": 42023, "Desc": ""}{"node_name": "LOCEXT", "type": "field", "idx": 42024, "Desc": ""}{"node_name": "EXTCRC", "type": "field", "idx": 42025, "Desc": ""}{"node_name": "EXTSIZ", "type": "field", "idx": 42026, "Desc": ""}{"node_name": "EXTLEN", "type": "field", "idx": 42027, "Desc": ""}{"node_name": "CENVEM", "type": "field", "idx": 42028, "Desc": ""}{"node_name": "CENVER", "type": "field", "idx": 42029, "Desc": ""}{"node_name": "CENFLG", "type": "field", "idx": 42030, "Desc": ""}{"node_name": "CENHOW", "type": "field", "idx": 42031, "Desc": ""}{"node_name": "CENTIM", "type": "field", "idx": 42032, "Desc": ""}{"node_name": "CENCRC", "type": "field", "idx": 42033, "Desc": ""}{"node_name": "CENSIZ", "type": "field", "idx": 42034, "Desc": ""}{"node_name": "CENLEN", "type": "field", "idx": 42035, "Desc": ""}{"node_name": "CENNAM", "type": "field", "idx": 42036, "Desc": ""}{"node_name": "CENEXT", "type": "field", "idx": 42037, "Desc": ""}{"node_name": "CENCOM", "type": "field", "idx": 42038, "Desc": ""}{"node_name": "CENDSK", "type": "field", "idx": 42039, "Desc": ""}{"node_name": "CENATT", "type": "field", "idx": 42040, "Desc": ""}{"node_name": "CENATX", "type": "field", "idx": 42041, "Desc": ""}{"node_name": "CENOFF", "type": "field", "idx": 42042, "Desc": ""}{"node_name": "ENDSUB", "type": "field", "idx": 42043, "Desc": ""}{"node_name": "ENDTOT", "type": "field", "idx": 42044, "Desc": ""}{"node_name": "ENDSIZ", "type": "field", "idx": 42045, "Desc": ""}{"node_name": "ENDOFF", "type": "field", "idx": 42046, "Desc": ""}{"node_name": "ENDCOM", "type": "field", "idx": 42047, "Desc": ""}{"node_name": "LOCSIG", "type": "field", "idx": 42082, "Desc": ""}{"node_name": "EXTSIG", "type": "field", "idx": 42083, "Desc": ""}{"node_name": "CENSIG", "type": "field", "idx": 42084, "Desc": ""}{"node_name": "ENDSIG", "type": "field", "idx": 42085, "Desc": ""}{"node_name": "LOCHDR", "type": "field", "idx": 42086, "Desc": ""}{"node_name": "EXTHDR", "type": "field", "idx": 42087, "Desc": ""}{"node_name": "CENHDR", "type": "field", "idx": 42088, "Desc": ""}{"node_name": "ENDHDR", "type": "field", "idx": 42089, "Desc": ""}{"node_name": "LOCVER", "type": "field", "idx": 42090, "Desc": ""}{"node_name": "LOCFLG", "type": "field", "idx": 42091, "Desc": ""}{"node_name": "LOCHOW", "type": "field", "idx": 42092, "Desc": ""}{"node_name": "LOCTIM", "type": "field", "idx": 42093, "Desc": ""}{"node_name": "LOCCRC", "type": "field", "idx": 42094, "Desc": ""}{"node_name": "LOCSIZ", "type": "field", "idx": 42095, "Desc": ""}{"node_name": "LOCLEN", "type": "field", "idx": 42096, "Desc": ""}{"node_name": "LOCNAM", "type": "field", "idx": 42097, "Desc": ""}{"node_name": "LOCEXT", "type": "field", "idx": 42098, "Desc": ""}{"node_name": "EXTCRC", "type": "field", "idx": 42099, "Desc": ""}{"node_name": "EXTSIZ", "type": "field", "idx": 42100, "Desc": ""}{"node_name": "EXTLEN", "type": "field", "idx": 42101, "Desc": ""}{"node_name": "CENVEM", "type": "field", "idx": 42102, "Desc": ""}{"node_name": "CENVER", "type": "field", "idx": 42103, "Desc": ""}{"node_name": "CENFLG", "type": "field", "idx": 42104, "Desc": ""}{"node_name": "CENHOW", "type": "field", "idx": 42105, "Desc": ""}{"node_name": "CENTIM", "type": "field", "idx": 42106, "Desc": ""}{"node_name": "CENCRC", "type": "field", "idx": 42107, "Desc": ""}{"node_name": "CENSIZ", "type": "field", "idx": 42108, "Desc": ""}{"node_name": "CENLEN", "type": "field", "idx": 42109, "Desc": ""}{"node_name": "CENNAM", "type": "field", "idx": 42110, "Desc": ""}{"node_name": "CENEXT", "type": "field", "idx": 42111, "Desc": ""}{"node_name": "CENCOM", "type": "field", "idx": 42112, "Desc": ""}{"node_name": "CENDSK", "type": "field", "idx": 42113, "Desc": ""}{"node_name": "CENATT", "type": "field", "idx": 42114, "Desc": ""}{"node_name": "CENATX", "type": "field", "idx": 42115, "Desc": ""}{"node_name": "CENOFF", "type": "field", "idx": 42116, "Desc": ""}{"node_name": "ENDSUB", "type": "field", "idx": 42117, "Desc": ""}{"node_name": "ENDTOT", "type": "field", "idx": 42118, "Desc": ""}{"node_name": "ENDSIZ", "type": "field", "idx": 42119, "Desc": ""}{"node_name": "ENDOFF", "type": "field", "idx": 42120, "Desc": ""}{"node_name": "ENDCOM", "type": "field", "idx": 42121, "Desc": ""}{"node_name": "LOCSIG", "type": "field", "idx": 42137, "Desc": ""}{"node_name": "EXTSIG", "type": "field", "idx": 42138, "Desc": ""}{"node_name": "CENSIG", "type": "field", "idx": 42139, "Desc": ""}{"node_name": "ENDSIG", "type": "field", "idx": 42140, "Desc": ""}{"node_name": "LOCHDR", "type": "field", "idx": 42141, "Desc": ""}{"node_name": "EXTHDR", "type": "field", "idx": 42142, "Desc": ""}{"node_name": "CENHDR", "type": "field", "idx": 42143, "Desc": ""}{"node_name": "ENDHDR", "type": "field", "idx": 42144, "Desc": ""}{"node_name": "LOCVER", "type": "field", "idx": 42145, "Desc": ""}{"node_name": "LOCFLG", "type": "field", "idx": 42146, "Desc": ""}{"node_name": "LOCHOW", "type": "field", "idx": 42147, "Desc": ""}{"node_name": "LOCTIM", "type": "field", "idx": 42148, "Desc": ""}{"node_name": "LOCCRC", "type": "field", "idx": 42149, "Desc": ""}{"node_name": "LOCSIZ", "type": "field", "idx": 42150, "Desc": ""}{"node_name": "LOCLEN", "type": "field", "idx": 42151, "Desc": ""}{"node_name": "LOCNAM", "type": "field", "idx": 42152, "Desc": ""}{"node_name": "LOCEXT", "type": "field", "idx": 42153, "Desc": ""}{"node_name": "EXTCRC", "type": "field", "idx": 42154, "Desc": ""}{"node_name": "EXTSIZ", "type": "field", "idx": 42155, "Desc": ""}{"node_name": "EXTLEN", "type": "field", "idx": 42156, "Desc": ""}{"node_name": "CENVEM", "type": "field", "idx": 42157, "Desc": ""}{"node_name": "CENVER", "type": "field", "idx": 42158, "Desc": ""}{"node_name": "CENFLG", "type": "field", "idx": 42159, "Desc": ""}{"node_name": "CENHOW", "type": "field", "idx": 42160, "Desc": ""}{"node_name": "CENTIM", "type": "field", "idx": 42161, "Desc": ""}{"node_name": "CENCRC", "type": "field", "idx": 42162, "Desc": ""}{"node_name": "CENSIZ", "type": "field", "idx": 42163, "Desc": ""}{"node_name": "CENLEN", "type": "field", "idx": 42164, "Desc": ""}{"node_name": "CENNAM", "type": "field", "idx": 42165, "Desc": ""}{"node_name": "CENEXT", "type": "field", "idx": 42166, "Desc": ""}{"node_name": "CENCOM", "type": "field", "idx": 42167, "Desc": ""}{"node_name": "CENDSK", "type": "field", "idx": 42168, "Desc": ""}{"node_name": "CENATT", "type": "field", "idx": 42169, "Desc": ""}{"node_name": "CENATX", "type": "field", "idx": 42170, "Desc": ""}{"node_name": "CENOFF", "type": "field", "idx": 42171, "Desc": ""}{"node_name": "ENDSUB", "type": "field", "idx": 42172, "Desc": ""}{"node_name": "ENDTOT", "type": "field", "idx": 42173, "Desc": ""}{"node_name": "ENDSIZ", "type": "field", "idx": 42174, "Desc": ""}{"node_name": "ENDOFF", "type": "field", "idx": 42175, "Desc": ""}{"node_name": "ENDCOM", "type": "field", "idx": 42176, "Desc": ""}{"node_name": "ENGLISH", "type": "field", "idx": 42486, "Desc": "useful constant for language ."}{"node_name": "FRENCH", "type": "field", "idx": 42487, "Desc": "useful constant for language ."}{"node_name": "GERMAN", "type": "field", "idx": 42488, "Desc": "useful constant for language ."}{"node_name": "ITALIAN", "type": "field", "idx": 42489, "Desc": "useful constant for language ."}{"node_name": "JAPANESE", "type": "field", "idx": 42490, "Desc": "useful constant for language ."}{"node_name": "KOREAN", "type": "field", "idx": 42491, "Desc": "useful constant for language ."}{"node_name": "CHINESE", "type": "field", "idx": 42492, "Desc": "useful constant for language ."}{"node_name": "SIMPLIFIED_CHINESE", "type": "field", "idx": 42493, "Desc": "useful constant for language ."}{"node_name": "TRADITIONAL_CHINESE", "type": "field", "idx": 42494, "Desc": "useful constant for language ."}{"node_name": "FRANCE", "type": "field", "idx": 42495, "Desc": "useful constant for country ."}{"node_name": "GERMANY", "type": "field", "idx": 42496, "Desc": "useful constant for country ."}{"node_name": "ITALY", "type": "field", "idx": 42497, "Desc": "useful constant for country ."}{"node_name": "JAPAN", "type": "field", "idx": 42498, "Desc": "useful constant for country ."}{"node_name": "KOREA", "type": "field", "idx": 42499, "Desc": "useful constant for country ."}{"node_name": "UK", "type": "field", "idx": 42500, "Desc": "useful constant for country ."}{"node_name": "US", "type": "field", "idx": 42501, "Desc": "useful constant for country ."}{"node_name": "CANADA", "type": "field", "idx": 42502, "Desc": "useful constant for country ."}{"node_name": "CANADA_FRENCH", "type": "field", "idx": 42503, "Desc": "useful constant for country ."}{"node_name": "ROOT", "type": "field", "idx": 42504, "Desc": "useful constant for the root locale . the root locale is the locale whose language , country , and variant are empty ( \"\") strings . this is regarded as the base locale of all locales , and is used as the language / country neutral locale for the locale sensitive operations ."}{"node_name": "CHINA", "type": "field", "idx": 42505, "Desc": "useful constant for country ."}{"node_name": "PRC", "type": "field", "idx": 42506, "Desc": "useful constant for country ."}{"node_name": "TAIWAN", "type": "field", "idx": 42507, "Desc": "useful constant for country ."}{"node_name": "PRIVATE_USE_EXTENSION", "type": "field", "idx": 42508, "Desc": "the key for the private use extension ( ' x ') ."}{"node_name": "UNICODE_LOCALE_EXTENSION", "type": "field", "idx": 42509, "Desc": "the key for unicode locale extension ( ' u ') ."}{"node_name": "MAX_WEIGHT", "type": "field", "idx": 42591, "Desc": "a constant holding the maximum value of weight , 1.0 , which indicates that the language range is a good fit for the user ."}{"node_name": "MIN_WEIGHT", "type": "field", "idx": 42592, "Desc": "a constant holding the minimum value of weight , 0.0 , which indicates that the language range is not a good fit for the user ."}{"node_name": "GENERIC_FAILURE", "type": "field", "idx": 42618, "Desc": "generic_failure is used for failure that don't fit into one of the other categories ."}{"node_name": "WRITE_FAILURE", "type": "field", "idx": 42619, "Desc": "write_failure is used when a write to an output stream fails ."}{"node_name": "FLUSH_FAILURE", "type": "field", "idx": 42620, "Desc": "flush_failure is used when a flush to an output stream fails ."}{"node_name": "CLOSE_FAILURE", "type": "field", "idx": 42621, "Desc": "close_failure is used when a close of an output stream fails ."}{"node_name": "OPEN_FAILURE", "type": "field", "idx": 42622, "Desc": "open_failure is used when an open of an output stream fails ."}{"node_name": "FORMAT_FAILURE", "type": "field", "idx": 42623, "Desc": "format_failure is used when formatting fails for any reason ."}{"node_name": "OFF", "type": "field", "idx": 42694, "Desc": "off is a special level that can be used to turn off logging . this level is initialized to integer.max_value ."}{"node_name": "SEVERE", "type": "field", "idx": 42695, "Desc": "severe is a message level indicating a serious failure . in general severe messages should describe events that are of considerable importance and which will prevent normal program execution . they should be reasonably intelligible to end users and to system administrators . this level is initialized to 1000 ."}{"node_name": "WARNING", "type": "field", "idx": 42696, "Desc": "warning is a message level indicating a potential problem . in general warning messages should describe events that will be of interest to end users or system managers , or which indicate potential problems . this level is initialized to 900 ."}{"node_name": "INFO", "type": "field", "idx": 42697, "Desc": "info is a message level for informational messages . typically info messages will be written to the console or its equivalent . so the info level should only be used for reasonably significant messages that will make sense to end users and system administrators . this level is initialized to 800 ."}{"node_name": "CONFIG", "type": "field", "idx": 42698, "Desc": "config is a message level for static configuration messages . config messages are intended to provide a variety of static configuration information , to assist in debugging problems that may be associated with particular configurations . for example , config message might include the cpu type , the graphics depth , the gui look-and-feel , etc . this level is initialized to 700 ."}{"node_name": "FINE", "type": "field", "idx": 42699, "Desc": "fine is a message level providing tracing information . all of fine , finer , and finest are intended for relatively detailed tracing . the exact meaning of the three levels will vary between subsystems , but in general , finest should be used for the most voluminous detailed output , finer for somewhat less detailed output , and fine for the lowest volume ( and most important ) messages . in general the fine level should be used for information that will be broadly interesting to developers who do not have a specialized interest in the specific subsystem . fine messages might include things like minor ( recoverable ) failures . issues indicating potential performance problems are also worth logging as fine . this level is initialized to 500 ."}{"node_name": "FINER", "type": "field", "idx": 42700, "Desc": "finer indicates a fairly detailed tracing message . by default logging calls for entering , returning , or throwing an exception are traced at this level . this level is initialized to 400 ."}{"node_name": "FINEST", "type": "field", "idx": 42701, "Desc": "finest indicates a highly detailed tracing message . this level is initialized to 300 ."}{"node_name": "ALL", "type": "field", "idx": 42702, "Desc": "all indicates that all messages should be logged . this level is initialized to integer.min_value ."}{"node_name": "GLOBAL_LOGGER_NAME", "type": "field", "idx": 42721, "Desc": "global_logger_name is a name for the global logger ."}{"node_name": "LOGGING_MXBEAN_NAME", "type": "field", "idx": 42896, "Desc": "string representation of the objectname for the management interface for the logging facility ."}{"node_name": "newNode", "type": "field", "idx": 43480, "Desc": "newNode should be true if this node did not exist in the backing store prior to the creation of this object . newNode is initialized to false , but may be set to true by a subclass constructor ( and should not be modified thereafter ) . newNode indicates whether a node change event should be fired when creation is complete ."}{"node_name": "lock", "type": "field", "idx": 43481, "Desc": "an object whose monitor is used to lock this node . this object is used in preference to the node itself to reduce the likelihood of intentional or unintentional denial of service due to a locked node . to avoid deadlock , a node is never locked by a thread that holds a lock on a descendant of that node ."}{"node_name": "MAX_KEY_LENGTH", "type": "field", "idx": 43602, "Desc": "maximum length of string allowed as a key ( 80 characters ) ."}{"node_name": "MAX_VALUE_LENGTH", "type": "field", "idx": 43603, "Desc": "maximum length of string allowed as a value ( 8192 characters ) ."}{"node_name": "MAX_NAME_LENGTH", "type": "field", "idx": 43604, "Desc": "maximum length of a node name ( 80 characters ) ."}{"node_name": "defaults", "type": "field", "idx": 43751, "Desc": "a property list that contains default values for any keys not found in this property list ."}{"node_name": "UNIX_LINES", "type": "field", "idx": 43946, "Desc": "enables unix lines mode . in this mode , only the ' \\n ' line terminator is recognized in the behavior of ., ^ , and $ . unix lines mode can also be enabled via the embedded flag expression ( ? d ) ."}{"node_name": "CASE_INSENSITIVE", "type": "field", "idx": 43947, "Desc": "enables case-insensitive matching . by default , case-insensitive matching assumes that only characters in the us-ascii charset are being matched . unicode-aware case-insensitive matching can be enabled by specifying the unicode_case flag in conjunction with this flag . case-insensitive matching can also be enabled via the embedded flag expression ( ? i ) . specifying this flag may impose a slight performance penalty ."}{"node_name": "COMMENTS", "type": "field", "idx": 43948, "Desc": "permits whitespace and comments in pattern . in this mode , whitespace is ignored , and embedded comments starting with # are ignored until the end of a line . comments mode can also be enabled via the embedded flag expression ( ? x ) ."}{"node_name": "MULTILINE", "type": "field", "idx": 43949, "Desc": "enables multiline mode . in multiline mode the expressions ^ and $ match just after or just before , respectively , a line terminator or the end of the input sequence . by default these expressions only match at the beginning and the end of the entire input sequence . multiline mode can also be enabled via the embedded flag expression ( ? m ) ."}{"node_name": "LITERAL", "type": "field", "idx": 43950, "Desc": "enables literal parsing of the pattern . when this flag is specified then the input string that specifies the pattern is treated as a sequence of literal characters . metacharacters or escape sequences in the input sequence will be given no special meaning . the flags case_insensitive and unicode_case retain their impact on matching when used in conjunction with this flag . the other flags become superfluous . there is no embedded flag character for enabling literal parsing ."}{"node_name": "DOTALL", "type": "field", "idx": 43951, "Desc": "enables dotall mode . in dotall mode , the expression . matches any character , including a line terminator . by default this expression does not match line terminators . dotall mode can also be enabled via the embedded flag expression ( ? s ) . ( the s is a mnemonic for \" single-line \" mode , which is what this is called in perl . )"}{"node_name": "UNICODE_CASE", "type": "field", "idx": 43952, "Desc": "enables unicode-aware case folding . when this flag is specified then case-insensitive matching , when enabled by the case_insensitive flag , is done in a manner consistent with the unicode standard . by default , case-insensitive matching assumes that only characters in the us-ascii charset are being matched . unicode-aware case folding can also be enabled via the embedded flag expression ( ? u ) . specifying this flag may impose a performance penalty ."}{"node_name": "CANON_EQ", "type": "field", "idx": 43953, "Desc": "enables canonical equivalence . when this flag is specified then two characters will be considered to match if , and only if , their full canonical decompositions match . the expression \" a\\u030a \" , for example , will match the string \" \\u00e5 \" when this flag is specified . by default , matching does not take canonical equivalence into account . there is no embedded flag character for enabling canonical equivalence . specifying this flag may impose a performance penalty ."}{"node_name": "UNICODE_CHARACTER_CLASS", "type": "field", "idx": 43954, "Desc": "enables the unicode version of predefined character classes and posix character classes . when this flag is specified then the ( us-ascii only ) predefined character classes and posix character classes are in conformance with unicode technical standard #18 : unicode regular expression annex c : compatibility properties . the unicode_character_class mode can also be enabled via the embedded flag expression ( ? u ) . the flag implies unicode_case , that is , it enables unicode-aware case folding . specifying this flag may impose a performance penalty ."}{"node_name": "FORMAT_DEFAULT", "type": "field", "idx": 43989, "Desc": "the default format list , which contains the strings \" java.class \" and \" java.properties \" , in this order . this list is unmodifiable ."}{"node_name": "FORMAT_CLASS", "type": "field", "idx": 43990, "Desc": "the class-only format list containing \" java.class \" . this list is unmodifiable ."}{"node_name": "FORMAT_PROPERTIES", "type": "field", "idx": 43991, "Desc": "the properties-only format list containing \" java.properties \" . this list is unmodifiable ."}{"node_name": "TTL_DONT_CACHE", "type": "field", "idx": 43992, "Desc": "the time-to-live constant for not caching loaded resource bundle instances ."}{"node_name": "TTL_NO_EXPIRATION_CONTROL", "type": "field", "idx": 43993, "Desc": "the time-to-live constant for disabling the expiration control for loaded resource bundle instances in the cache ."}{"node_name": "parent", "type": "field", "idx": 44030, "Desc": "the parent bundle of this bundle . the parent bundle is searched by getobject when this bundle does not contain a particular resource ."}{"node_name": "WALL_TIME", "type": "field", "idx": 44325, "Desc": "constant for a mode of start or end time specified as wall clock time . wall clock time is standard time for the onset rule , and daylight time for the end rule ."}{"node_name": "STANDARD_TIME", "type": "field", "idx": 44326, "Desc": "constant for a mode of start or end time specified as standard time ."}{"node_name": "UTC_TIME", "type": "field", "idx": 44327, "Desc": "constant for a mode of start or end time specified as utc . european union rules are specified as utc time , for example ."}{"node_name": "ORDERED", "type": "field", "idx": 44546, "Desc": "characteristic value signifying that an encounter order is defined for elements . if so , this spliterator guarantees that method trysplit() splits a strict prefix of elements , that method tryadvance ( java.util.function.consumer < ? super t > ) steps by one element in prefix order , and that foreachremaining ( java.util.function.consumer < ? super t > ) performs actions in encounter order . a collection has an encounter order if the corresponding collection.iterator() documents an order . if so , the encounter order is the same as the documented order . otherwise , a collection does not have an encounter order ."}{"node_name": "DISTINCT", "type": "field", "idx": 44547, "Desc": "characteristic value signifying that , for each pair of encountered elements x , y , ! x.equals ( y ) . this applies for example , to a spliterator based on a set ."}{"node_name": "SORTED", "type": "field", "idx": 44548, "Desc": "characteristic value signifying that encounter order follows a defined sort order . if so , method getcomparator() returns the associated comparator , or null if all elements are comparable and are sorted by their natural ordering . a spliterator that reports sorted must also report ordered ."}{"node_name": "SIZED", "type": "field", "idx": 44549, "Desc": "characteristic value signifying that the value returned from estimatesize() prior to traversal or splitting represents a finite size that , in the absence of structural source modification , represents an exact count of the number of elements that would be encountered by a complete traversal ."}{"node_name": "NONNULL", "type": "field", "idx": 44550, "Desc": "characteristic value signifying that the source guarantees that encountered elements will not be null . ( this applies , for example , to most concurrent collections , queues , and maps . )"}{"node_name": "IMMUTABLE", "type": "field", "idx": 44551, "Desc": "characteristic value signifying that the element source cannot be structurally modified ; that is , elements cannot be added , replaced , or removed , so such changes cannot occur during traversal . a spliterator that does not report immutable or concurrent is expected to have a documented policy ( for example throwing concurrentmodificationexception ) concerning structural interference detected during traversal ."}{"node_name": "CONCURRENT", "type": "field", "idx": 44552, "Desc": "characteristic value signifying that the element source may be safely concurrently modified ( allowing additions , replacements , and / or removals ) by multiple threads without external synchronization . if so , the spliterator is expected to have a documented policy concerning the impact of modifications during traversal . a top-level spliterator should not report both concurrent and sized , since the finite size , if known , may change if the source is concurrently modified during traversal . such a spliterator is inconsistent and no guarantees can be made about any computation using that spliterator . sub-spliterators may report sized if the sub-split size is known and additions or removals to the source are not reflected when traversing . a top-level spliterator should not report both concurrent and immutable , since they are mutually exclusive . such a spliterator is inconsistent and no guarantees can be made about any computation using that spliterator . sub-spliterators may report immutable if additions or removals to the source are not reflected when traversing ."}{"node_name": "SUBSIZED", "type": "field", "idx": 44553, "Desc": "characteristic value signifying that all spliterators resulting from trysplit() will be both sized and subsized . ( this means that all child spliterators , whether direct or indirect , will be sized . ) a spliterator that does not report sized as required by subsized is inconsistent and no guarantees can be made about any computation using that spliterator ."}{"node_name": "SHORT", "type": "field", "idx": 45344, "Desc": "a style specifier for getdisplayname() indicating a short name , such as \" pst . \""}{"node_name": "LONG", "type": "field", "idx": 45345, "Desc": "a style specifier for getdisplayname() indicating a long name , such as \" pacific standard time . \""}{"node_name": "elementData", "type": "field", "idx": 45550, "Desc": "the array buffer into which the components of the vector are stored . the capacity of the vector is the length of this array buffer , and is at least large enough to contain all the vector's elements . any array elements following the last element in the vector are null ."}{"node_name": "elementCount", "type": "field", "idx": 45551, "Desc": "the number of valid components in this vector object . components elementdata [ 0 ] through elementdata [ elementcount-1 ] are the actual items ."}{"node_name": "capacityIncrement", "type": "field", "idx": 45552, "Desc": "the amount by which the capacity of the vector is automatically incremented when its size becomes greater than its capacity . if the capacity increment is less than or equal to zero , the capacity of the vector is doubled each time it needs to grow ."}{"node_name": "DEFLATED", "type": "field", "idx": 45757, "Desc": "compression method for the deflate algorithm ( the only one currently supported ) ."}{"node_name": "NO_COMPRESSION", "type": "field", "idx": 45758, "Desc": "compression level for no compression ."}{"node_name": "BEST_SPEED", "type": "field", "idx": 45759, "Desc": "compression level for fastest compression ."}{"node_name": "BEST_COMPRESSION", "type": "field", "idx": 45760, "Desc": "compression level for best compression ."}{"node_name": "DEFAULT_COMPRESSION", "type": "field", "idx": 45761, "Desc": "default compression level ."}{"node_name": "FILTERED", "type": "field", "idx": 45762, "Desc": "compression strategy best used for data consisting mostly of small values with a somewhat random distribution . forces more huffman coding and less string matching ."}{"node_name": "HUFFMAN_ONLY", "type": "field", "idx": 45763, "Desc": "compression strategy for huffman coding only ."}{"node_name": "DEFAULT_STRATEGY", "type": "field", "idx": 45764, "Desc": "default compression strategy ."}{"node_name": "NO_FLUSH", "type": "field", "idx": 45765, "Desc": "compression flush mode used to achieve best compression result ."}{"node_name": "SYNC_FLUSH", "type": "field", "idx": 45766, "Desc": "compression flush mode used to flush out all pending output ; may degrade compression for some compression algorithms ."}{"node_name": "FULL_FLUSH", "type": "field", "idx": 45767, "Desc": "compression flush mode used to flush out all pending output and reset the deflater . using this mode too often can seriously degrade compression ."}{"node_name": "def", "type": "field", "idx": 45821, "Desc": "compressor for this stream ."}{"node_name": "buf", "type": "field", "idx": 45822, "Desc": "input buffer for reading compressed data ."}{"node_name": "def", "type": "field", "idx": 45846, "Desc": "compressor for this stream ."}{"node_name": "buf", "type": "field", "idx": 45847, "Desc": "output buffer for writing compressed data ."}{"node_name": "crc", "type": "field", "idx": 45880, "Desc": "crc-32 for uncompressed data ."}{"node_name": "eos", "type": "field", "idx": 45881, "Desc": "indicates end of input stream ."}{"node_name": "GZIP_MAGIC", "type": "field", "idx": 45882, "Desc": "gzip header magic number ."}{"node_name": "crc", "type": "field", "idx": 45894, "Desc": "crc-32 of uncompressed data ."}{"node_name": "inf", "type": "field", "idx": 45952, "Desc": "decompressor for this stream ."}{"node_name": "buf", "type": "field", "idx": 45953, "Desc": "input buffer for decompression ."}{"node_name": "len", "type": "field", "idx": 45954, "Desc": "length of input buffer ."}{"node_name": "inf", "type": "field", "idx": 45979, "Desc": "decompressor for this stream ."}{"node_name": "buf", "type": "field", "idx": 45980, "Desc": "output buffer for writing uncompressed data ."}{"node_name": "STORED", "type": "field", "idx": 46000, "Desc": "compression method for uncompressed entries ."}{"node_name": "DEFLATED", "type": "field", "idx": 46001, "Desc": "compression method for compressed ( deflated ) entries ."}{"node_name": "LOCSIG", "type": "field", "idx": 46002, "Desc": ""}{"node_name": "EXTSIG", "type": "field", "idx": 46003, "Desc": ""}{"node_name": "CENSIG", "type": "field", "idx": 46004, "Desc": ""}{"node_name": "ENDSIG", "type": "field", "idx": 46005, "Desc": ""}{"node_name": "LOCHDR", "type": "field", "idx": 46006, "Desc": ""}{"node_name": "EXTHDR", "type": "field", "idx": 46007, "Desc": ""}{"node_name": "CENHDR", "type": "field", "idx": 46008, "Desc": ""}{"node_name": "ENDHDR", "type": "field", "idx": 46009, "Desc": ""}{"node_name": "LOCVER", "type": "field", "idx": 46010, "Desc": ""}{"node_name": "LOCFLG", "type": "field", "idx": 46011, "Desc": ""}{"node_name": "LOCHOW", "type": "field", "idx": 46012, "Desc": ""}{"node_name": "LOCTIM", "type": "field", "idx": 46013, "Desc": ""}{"node_name": "LOCCRC", "type": "field", "idx": 46014, "Desc": ""}{"node_name": "LOCSIZ", "type": "field", "idx": 46015, "Desc": ""}{"node_name": "LOCLEN", "type": "field", "idx": 46016, "Desc": ""}{"node_name": "LOCNAM", "type": "field", "idx": 46017, "Desc": ""}{"node_name": "LOCEXT", "type": "field", "idx": 46018, "Desc": ""}{"node_name": "EXTCRC", "type": "field", "idx": 46019, "Desc": ""}{"node_name": "EXTSIZ", "type": "field", "idx": 46020, "Desc": ""}{"node_name": "EXTLEN", "type": "field", "idx": 46021, "Desc": ""}{"node_name": "CENVEM", "type": "field", "idx": 46022, "Desc": ""}{"node_name": "CENVER", "type": "field", "idx": 46023, "Desc": ""}{"node_name": "CENFLG", "type": "field", "idx": 46024, "Desc": ""}{"node_name": "CENHOW", "type": "field", "idx": 46025, "Desc": ""}{"node_name": "CENTIM", "type": "field", "idx": 46026, "Desc": ""}{"node_name": "CENCRC", "type": "field", "idx": 46027, "Desc": ""}{"node_name": "CENSIZ", "type": "field", "idx": 46028, "Desc": ""}{"node_name": "CENLEN", "type": "field", "idx": 46029, "Desc": ""}{"node_name": "CENNAM", "type": "field", "idx": 46030, "Desc": ""}{"node_name": "CENEXT", "type": "field", "idx": 46031, "Desc": ""}{"node_name": "CENCOM", "type": "field", "idx": 46032, "Desc": ""}{"node_name": "CENDSK", "type": "field", "idx": 46033, "Desc": ""}{"node_name": "CENATT", "type": "field", "idx": 46034, "Desc": ""}{"node_name": "CENATX", "type": "field", "idx": 46035, "Desc": ""}{"node_name": "CENOFF", "type": "field", "idx": 46036, "Desc": ""}{"node_name": "ENDSUB", "type": "field", "idx": 46037, "Desc": ""}{"node_name": "ENDTOT", "type": "field", "idx": 46038, "Desc": ""}{"node_name": "ENDSIZ", "type": "field", "idx": 46039, "Desc": ""}{"node_name": "ENDOFF", "type": "field", "idx": 46040, "Desc": ""}{"node_name": "ENDCOM", "type": "field", "idx": 46041, "Desc": ""}{"node_name": "OPEN_READ", "type": "field", "idx": 46092, "Desc": "mode flag to open a zip file for reading ."}{"node_name": "OPEN_DELETE", "type": "field", "idx": 46093, "Desc": "mode flag to open a zip file and mark it for deletion . the file will be deleted some time between the moment that it is opened and the moment that it is closed , but its contents will remain accessible via the zipfile object until either the close method is invoked or the virtual machine exits ."}{"node_name": "LOCSIG", "type": "field", "idx": 46094, "Desc": ""}{"node_name": "EXTSIG", "type": "field", "idx": 46095, "Desc": ""}{"node_name": "CENSIG", "type": "field", "idx": 46096, "Desc": ""}{"node_name": "ENDSIG", "type": "field", "idx": 46097, "Desc": ""}{"node_name": "LOCHDR", "type": "field", "idx": 46098, "Desc": ""}{"node_name": "EXTHDR", "type": "field", "idx": 46099, "Desc": ""}{"node_name": "CENHDR", "type": "field", "idx": 46100, "Desc": ""}{"node_name": "ENDHDR", "type": "field", "idx": 46101, "Desc": ""}{"node_name": "LOCVER", "type": "field", "idx": 46102, "Desc": ""}{"node_name": "LOCFLG", "type": "field", "idx": 46103, "Desc": ""}{"node_name": "LOCHOW", "type": "field", "idx": 46104, "Desc": ""}{"node_name": "LOCTIM", "type": "field", "idx": 46105, "Desc": ""}{"node_name": "LOCCRC", "type": "field", "idx": 46106, "Desc": ""}{"node_name": "LOCSIZ", "type": "field", "idx": 46107, "Desc": ""}{"node_name": "LOCLEN", "type": "field", "idx": 46108, "Desc": ""}{"node_name": "LOCNAM", "type": "field", "idx": 46109, "Desc": ""}{"node_name": "LOCEXT", "type": "field", "idx": 46110, "Desc": ""}{"node_name": "EXTCRC", "type": "field", "idx": 46111, "Desc": ""}{"node_name": "EXTSIZ", "type": "field", "idx": 46112, "Desc": ""}{"node_name": "EXTLEN", "type": "field", "idx": 46113, "Desc": ""}{"node_name": "CENVEM", "type": "field", "idx": 46114, "Desc": ""}{"node_name": "CENVER", "type": "field", "idx": 46115, "Desc": ""}{"node_name": "CENFLG", "type": "field", "idx": 46116, "Desc": ""}{"node_name": "CENHOW", "type": "field", "idx": 46117, "Desc": ""}{"node_name": "CENTIM", "type": "field", "idx": 46118, "Desc": ""}{"node_name": "CENCRC", "type": "field", "idx": 46119, "Desc": ""}{"node_name": "CENSIZ", "type": "field", "idx": 46120, "Desc": ""}{"node_name": "CENLEN", "type": "field", "idx": 46121, "Desc": ""}{"node_name": "CENNAM", "type": "field", "idx": 46122, "Desc": ""}{"node_name": "CENEXT", "type": "field", "idx": 46123, "Desc": ""}{"node_name": "CENCOM", "type": "field", "idx": 46124, "Desc": ""}{"node_name": "CENDSK", "type": "field", "idx": 46125, "Desc": ""}{"node_name": "CENATT", "type": "field", "idx": 46126, "Desc": ""}{"node_name": "CENATX", "type": "field", "idx": 46127, "Desc": ""}{"node_name": "CENOFF", "type": "field", "idx": 46128, "Desc": ""}{"node_name": "ENDSUB", "type": "field", "idx": 46129, "Desc": ""}{"node_name": "ENDTOT", "type": "field", "idx": 46130, "Desc": ""}{"node_name": "ENDSIZ", "type": "field", "idx": 46131, "Desc": ""}{"node_name": "ENDOFF", "type": "field", "idx": 46132, "Desc": ""}{"node_name": "ENDCOM", "type": "field", "idx": 46133, "Desc": ""}{"node_name": "LOCSIG", "type": "field", "idx": 46162, "Desc": ""}{"node_name": "EXTSIG", "type": "field", "idx": 46163, "Desc": ""}{"node_name": "CENSIG", "type": "field", "idx": 46164, "Desc": ""}{"node_name": "ENDSIG", "type": "field", "idx": 46165, "Desc": ""}{"node_name": "LOCHDR", "type": "field", "idx": 46166, "Desc": ""}{"node_name": "EXTHDR", "type": "field", "idx": 46167, "Desc": ""}{"node_name": "CENHDR", "type": "field", "idx": 46168, "Desc": ""}{"node_name": "ENDHDR", "type": "field", "idx": 46169, "Desc": ""}{"node_name": "LOCVER", "type": "field", "idx": 46170, "Desc": ""}{"node_name": "LOCFLG", "type": "field", "idx": 46171, "Desc": ""}{"node_name": "LOCHOW", "type": "field", "idx": 46172, "Desc": ""}{"node_name": "LOCTIM", "type": "field", "idx": 46173, "Desc": ""}{"node_name": "LOCCRC", "type": "field", "idx": 46174, "Desc": ""}{"node_name": "LOCSIZ", "type": "field", "idx": 46175, "Desc": ""}{"node_name": "LOCLEN", "type": "field", "idx": 46176, "Desc": ""}{"node_name": "LOCNAM", "type": "field", "idx": 46177, "Desc": ""}{"node_name": "LOCEXT", "type": "field", "idx": 46178, "Desc": ""}{"node_name": "EXTCRC", "type": "field", "idx": 46179, "Desc": ""}{"node_name": "EXTSIZ", "type": "field", "idx": 46180, "Desc": ""}{"node_name": "EXTLEN", "type": "field", "idx": 46181, "Desc": ""}{"node_name": "CENVEM", "type": "field", "idx": 46182, "Desc": ""}{"node_name": "CENVER", "type": "field", "idx": 46183, "Desc": ""}{"node_name": "CENFLG", "type": "field", "idx": 46184, "Desc": ""}{"node_name": "CENHOW", "type": "field", "idx": 46185, "Desc": ""}{"node_name": "CENTIM", "type": "field", "idx": 46186, "Desc": ""}{"node_name": "CENCRC", "type": "field", "idx": 46187, "Desc": ""}{"node_name": "CENSIZ", "type": "field", "idx": 46188, "Desc": ""}{"node_name": "CENLEN", "type": "field", "idx": 46189, "Desc": ""}{"node_name": "CENNAM", "type": "field", "idx": 46190, "Desc": ""}{"node_name": "CENEXT", "type": "field", "idx": 46191, "Desc": ""}{"node_name": "CENCOM", "type": "field", "idx": 46192, "Desc": ""}{"node_name": "CENDSK", "type": "field", "idx": 46193, "Desc": ""}{"node_name": "CENATT", "type": "field", "idx": 46194, "Desc": ""}{"node_name": "CENATX", "type": "field", "idx": 46195, "Desc": ""}{"node_name": "CENOFF", "type": "field", "idx": 46196, "Desc": ""}{"node_name": "ENDSUB", "type": "field", "idx": 46197, "Desc": ""}{"node_name": "ENDTOT", "type": "field", "idx": 46198, "Desc": ""}{"node_name": "ENDSIZ", "type": "field", "idx": 46199, "Desc": ""}{"node_name": "ENDOFF", "type": "field", "idx": 46200, "Desc": ""}{"node_name": "ENDCOM", "type": "field", "idx": 46201, "Desc": ""}{"node_name": "STORED", "type": "field", "idx": 46220, "Desc": "compression method for uncompressed ( stored ) entries ."}{"node_name": "DEFLATED", "type": "field", "idx": 46221, "Desc": "compression method for compressed ( deflated ) entries ."}{"node_name": "LOCSIG", "type": "field", "idx": 46222, "Desc": ""}{"node_name": "EXTSIG", "type": "field", "idx": 46223, "Desc": ""}{"node_name": "CENSIG", "type": "field", "idx": 46224, "Desc": ""}{"node_name": "ENDSIG", "type": "field", "idx": 46225, "Desc": ""}{"node_name": "LOCHDR", "type": "field", "idx": 46226, "Desc": ""}{"node_name": "EXTHDR", "type": "field", "idx": 46227, "Desc": ""}{"node_name": "CENHDR", "type": "field", "idx": 46228, "Desc": ""}{"node_name": "ENDHDR", "type": "field", "idx": 46229, "Desc": ""}{"node_name": "LOCVER", "type": "field", "idx": 46230, "Desc": ""}{"node_name": "LOCFLG", "type": "field", "idx": 46231, "Desc": ""}{"node_name": "LOCHOW", "type": "field", "idx": 46232, "Desc": ""}{"node_name": "LOCTIM", "type": "field", "idx": 46233, "Desc": ""}{"node_name": "LOCCRC", "type": "field", "idx": 46234, "Desc": ""}{"node_name": "LOCSIZ", "type": "field", "idx": 46235, "Desc": ""}{"node_name": "LOCLEN", "type": "field", "idx": 46236, "Desc": ""}{"node_name": "LOCNAM", "type": "field", "idx": 46237, "Desc": ""}{"node_name": "LOCEXT", "type": "field", "idx": 46238, "Desc": ""}{"node_name": "EXTCRC", "type": "field", "idx": 46239, "Desc": ""}{"node_name": "EXTSIZ", "type": "field", "idx": 46240, "Desc": ""}{"node_name": "EXTLEN", "type": "field", "idx": 46241, "Desc": ""}{"node_name": "CENVEM", "type": "field", "idx": 46242, "Desc": ""}{"node_name": "CENVER", "type": "field", "idx": 46243, "Desc": ""}{"node_name": "CENFLG", "type": "field", "idx": 46244, "Desc": ""}{"node_name": "CENHOW", "type": "field", "idx": 46245, "Desc": ""}{"node_name": "CENTIM", "type": "field", "idx": 46246, "Desc": ""}{"node_name": "CENCRC", "type": "field", "idx": 46247, "Desc": ""}{"node_name": "CENSIZ", "type": "field", "idx": 46248, "Desc": ""}{"node_name": "CENLEN", "type": "field", "idx": 46249, "Desc": ""}{"node_name": "CENNAM", "type": "field", "idx": 46250, "Desc": ""}{"node_name": "CENEXT", "type": "field", "idx": 46251, "Desc": ""}{"node_name": "CENCOM", "type": "field", "idx": 46252, "Desc": ""}{"node_name": "CENDSK", "type": "field", "idx": 46253, "Desc": ""}{"node_name": "CENATT", "type": "field", "idx": 46254, "Desc": ""}{"node_name": "CENATX", "type": "field", "idx": 46255, "Desc": ""}{"node_name": "CENOFF", "type": "field", "idx": 46256, "Desc": ""}{"node_name": "ENDSUB", "type": "field", "idx": 46257, "Desc": ""}{"node_name": "ENDTOT", "type": "field", "idx": 46258, "Desc": ""}{"node_name": "ENDSIZ", "type": "field", "idx": 46259, "Desc": ""}{"node_name": "ENDOFF", "type": "field", "idx": 46260, "Desc": ""}{"node_name": "ENDCOM", "type": "field", "idx": 46261, "Desc": ""}{"node_name": "TOGGLE_EXPAND", "type": "field", "idx": 46289, "Desc": "an action which causes a tree node to collapse if expanded and expand if collapsed ."}{"node_name": "INCREMENT", "type": "field", "idx": 46290, "Desc": "an action which increments a value ."}{"node_name": "DECREMENT", "type": "field", "idx": 46291, "Desc": "an action which decrements a value ."}{"node_name": "CLICK", "type": "field", "idx": 46292, "Desc": "an action which causes a component to execute its default action ."}{"node_name": "TOGGLE_POPUP", "type": "field", "idx": 46293, "Desc": "an action which causes a popup to become visible if it is hidden and hidden if it is visible ."}{"node_name": "startIndex", "type": "field", "idx": 46300, "Desc": "the start index of the text sequence ."}{"node_name": "endIndex", "type": "field", "idx": 46301, "Desc": "the end index of the text sequence ."}{"node_name": "attributes", "type": "field", "idx": 46302, "Desc": "the text attributes ."}{"node_name": "key", "type": "field", "idx": 46308, "Desc": "the locale independent name of the state . this is a programmatic name that is not intended to be read by humans ."}{"node_name": "ACCESSIBLE_NAME_PROPERTY", "type": "field", "idx": 46360, "Desc": "constant used to determine when the accessiblename property has changed . the old value in the propertychangeevent will be the old accessiblename and the new value will be the new accessiblename ."}{"node_name": "ACCESSIBLE_DESCRIPTION_PROPERTY", "type": "field", "idx": 46361, "Desc": "constant used to determine when the accessibledescription property has changed . the old value in the propertychangeevent will be the old accessibledescription and the new value will be the new accessibledescription ."}{"node_name": "ACCESSIBLE_STATE_PROPERTY", "type": "field", "idx": 46362, "Desc": "constant used to determine when the accessiblestateset property has changed . the old value will be the old accessiblestate and the new value will be the new accessiblestate in the accessiblestateset . for example , if a component that supports the vertical and horizontal states changes its orientation from vertical to horizontal , the old value will be accessiblestate.vertical and the new value will be accessiblestate.horizontal . please note that either value can also be null . for example , when a component changes from being enabled to disabled , the old value will be accessiblestate.enabled and the new value will be null ."}{"node_name": "ACCESSIBLE_VALUE_PROPERTY", "type": "field", "idx": 46363, "Desc": "constant used to determine when the accessiblevalue property has changed . the old value in the propertychangeevent will be a number representing the old value and the new value will be a number representing the new value ."}{"node_name": "ACCESSIBLE_SELECTION_PROPERTY", "type": "field", "idx": 46364, "Desc": "constant used to determine when the accessibleselection has changed . the old and new values in the propertychangeevent are currently reserved for future use ."}{"node_name": "ACCESSIBLE_CARET_PROPERTY", "type": "field", "idx": 46365, "Desc": "constant used to determine when the accessibletext caret has changed . the old value in the propertychangeevent will be an integer representing the old caret position , and the new value will be an integer representing the new / current caret position ."}{"node_name": "ACCESSIBLE_VISIBLE_DATA_PROPERTY", "type": "field", "idx": 46366, "Desc": "constant used to determine when the visual appearance of the object has changed . the old and new values in the propertychangeevent are currently reserved for future use ."}{"node_name": "ACCESSIBLE_CHILD_PROPERTY", "type": "field", "idx": 46367, "Desc": "constant used to determine when accessible children are added / removed from the object . if an accessible child is being added , the old value will be null and the new value will be the accessible child . if an accessible child is being removed , the old value will be the accessible child , and the new value will be null ."}{"node_name": "ACCESSIBLE_ACTIVE_DESCENDANT_PROPERTY", "type": "field", "idx": 46368, "Desc": "constant used to determine when the active descendant of a component has changed . the active descendant is used for objects such as list , tree , and table , which may have transient children . when the active descendant has changed , the old value of the property change event will be the accessible representing the previous active child , and the new value will be the accessible representing the current active child ."}{"node_name": "ACCESSIBLE_TABLE_CAPTION_CHANGED", "type": "field", "idx": 46369, "Desc": "constant used to indicate that the table caption has changed . the old value in the propertychangeevent will be an accessible representing the previous table caption and the new value will be an accessible representing the new table caption ."}{"node_name": "ACCESSIBLE_TABLE_SUMMARY_CHANGED", "type": "field", "idx": 46370, "Desc": "constant used to indicate that the table summary has changed . the old value in the propertychangeevent will be an accessible representing the previous table summary and the new value will be an accessible representing the new table summary ."}{"node_name": "ACCESSIBLE_TABLE_MODEL_CHANGED", "type": "field", "idx": 46371, "Desc": "constant used to indicate that table data has changed . the old value in the propertychangeevent will be null and the new value will be an accessibletablemodelchange representing the table change ."}{"node_name": "ACCESSIBLE_TABLE_ROW_HEADER_CHANGED", "type": "field", "idx": 46372, "Desc": "constant used to indicate that the row header has changed . the old value in the propertychangeevent will be null and the new value will be an accessibletablemodelchange representing the header change ."}{"node_name": "ACCESSIBLE_TABLE_ROW_DESCRIPTION_CHANGED", "type": "field", "idx": 46373, "Desc": "constant used to indicate that the row description has changed . the old value in the propertychangeevent will be null and the new value will be an integer representing the row index ."}{"node_name": "ACCESSIBLE_TABLE_COLUMN_HEADER_CHANGED", "type": "field", "idx": 46374, "Desc": "constant used to indicate that the column header has changed . the old value in the propertychangeevent will be null and the new value will be an accessibletablemodelchange representing the header change ."}{"node_name": "ACCESSIBLE_TABLE_COLUMN_DESCRIPTION_CHANGED", "type": "field", "idx": 46375, "Desc": "constant used to indicate that the column description has changed . the old value in the propertychangeevent will be null and the new value will be an integer representing the column index ."}{"node_name": "ACCESSIBLE_ACTION_PROPERTY", "type": "field", "idx": 46376, "Desc": "constant used to indicate that the supported set of actions has changed . the old value in the propertychangeevent will be an integer representing the old number of actions supported and the new value will be an integer representing the new number of actions supported ."}{"node_name": "ACCESSIBLE_HYPERTEXT_OFFSET", "type": "field", "idx": 46377, "Desc": "constant used to indicate that a hypertext element has received focus . the old value in the propertychangeevent will be an integer representing the start index in the document of the previous element that had focus and the new value will be an integer representing the start index in the document of the current element that has focus . a value of -1 indicates that an element does not or did not have focus ."}{"node_name": "ACCESSIBLE_TEXT_PROPERTY", "type": "field", "idx": 46378, "Desc": "propertychangeevent which indicates that text has changed . for text insertion , the oldvalue is null and the newvalue is an accessibletextsequence specifying the text that was inserted . for text deletion , the oldvalue is an accessibletextsequence specifying the text that was deleted and the newvalue is null . for text replacement , the oldvalue is an accessibletextsequence specifying the old text and the newvalue is an accessibletextsequence specifying the new text ."}{"node_name": "ACCESSIBLE_INVALIDATE_CHILDREN", "type": "field", "idx": 46379, "Desc": "propertychangeevent which indicates that a significant change has occurred to the children of a component like a tree or text . this change notifies the event listener that it needs to reacquire the state of the subcomponents . the oldvalue is null and the newvalue is the component whose children have become invalid ."}{"node_name": "ACCESSIBLE_TEXT_ATTRIBUTES_CHANGED", "type": "field", "idx": 46380, "Desc": "propertychangeevent which indicates that text attributes have changed . for attribute insertion , the oldvalue is null and the newvalue is an accessibleattributesequence specifying the attributes that were inserted . for attribute deletion , the oldvalue is an accessibleattributesequence specifying the attributes that were deleted and the newvalue is null . for attribute replacement , the oldvalue is an accessibleattributesequence specifying the old attributes and the newvalue is an accessibleattributesequence specifying the new attributes ."}{"node_name": "ACCESSIBLE_COMPONENT_BOUNDS_CHANGED", "type": "field", "idx": 46381, "Desc": "propertychangeevent which indicates that a change has occurred in a component's bounds . the oldvalue is the old component bounds and the newvalue is the new component bounds ."}{"node_name": "accessibleParent", "type": "field", "idx": 46382, "Desc": "the accessible parent of this object ."}{"node_name": "accessibleName", "type": "field", "idx": 46383, "Desc": "a localized string containing the name of the object ."}{"node_name": "accessibleDescription", "type": "field", "idx": 46384, "Desc": "a localized string containing the description of the object ."}{"node_name": "LINE", "type": "field", "idx": 46460, "Desc": "constant used to indicate that the part of the text that should be retrieved is a line of text ."}{"node_name": "ATTRIBUTE_RUN", "type": "field", "idx": 46461, "Desc": "constant used to indicate that the part of the text that should be retrieved is contiguous text with the same text attributes ."}{"node_name": "LABEL_FOR", "type": "field", "idx": 46508, "Desc": "indicates an object is a label for one or more target objects ."}{"node_name": "LABELED_BY", "type": "field", "idx": 46509, "Desc": "indicates an object is labeled by one or more target objects ."}{"node_name": "MEMBER_OF", "type": "field", "idx": 46510, "Desc": "indicates an object is a member of a group of one or more target objects ."}{"node_name": "CONTROLLER_FOR", "type": "field", "idx": 46511, "Desc": "indicates an object is a controller for one or more target objects ."}{"node_name": "CONTROLLED_BY", "type": "field", "idx": 46512, "Desc": "indicates an object is controlled by one or more target objects ."}{"node_name": "FLOWS_TO", "type": "field", "idx": 46513, "Desc": "indicates an object is logically contiguous with a second object where the second object occurs after the object . an example is a paragraph of text that runs to the end of a page and continues on the next page with an intervening text footer and / or text header . the two parts of the paragraph are separate text elements but are related in that the second element is a continuation of the first element . in other words , the first element \" flows to \" the second element ."}{"node_name": "FLOWS_FROM", "type": "field", "idx": 46514, "Desc": "indicates an object is logically contiguous with a second object where the second object occurs before the object . an example is a paragraph of text that runs to the end of a page and continues on the next page with an intervening text footer and / or text header . the two parts of the paragraph are separate text elements but are related in that the second element is a continuation of the first element . in other words , the second element \" flows from \" the second element ."}{"node_name": "SUBWINDOW_OF", "type": "field", "idx": 46515, "Desc": "indicates that an object is a subwindow of one or more objects ."}{"node_name": "PARENT_WINDOW_OF", "type": "field", "idx": 46516, "Desc": "indicates that an object is a parent window of one or more objects ."}{"node_name": "EMBEDS", "type": "field", "idx": 46517, "Desc": "indicates that an object has one or more objects embedded in it ."}{"node_name": "EMBEDDED_BY", "type": "field", "idx": 46518, "Desc": "indicates that an object is embedded in one or more objects ."}{"node_name": "CHILD_NODE_OF", "type": "field", "idx": 46519, "Desc": "indicates that an object is a child node of one or more objects ."}{"node_name": "LABEL_FOR_PROPERTY", "type": "field", "idx": 46520, "Desc": "identifies that the target group for a label has changed ."}{"node_name": "LABELED_BY_PROPERTY", "type": "field", "idx": 46521, "Desc": "identifies that the objects that are doing the labeling have changed ."}{"node_name": "MEMBER_OF_PROPERTY", "type": "field", "idx": 46522, "Desc": "identifies that group membership has changed ."}{"node_name": "CONTROLLER_FOR_PROPERTY", "type": "field", "idx": 46523, "Desc": "identifies that the controller for the target object has changed ."}{"node_name": "CONTROLLED_BY_PROPERTY", "type": "field", "idx": 46524, "Desc": "identifies that the target object that is doing the controlling has changed ."}{"node_name": "FLOWS_TO_PROPERTY", "type": "field", "idx": 46525, "Desc": "indicates the flows_to relation between two objects has changed ."}{"node_name": "FLOWS_FROM_PROPERTY", "type": "field", "idx": 46526, "Desc": "indicates the flows_from relation between two objects has changed ."}{"node_name": "SUBWINDOW_OF_PROPERTY", "type": "field", "idx": 46527, "Desc": "indicates the subwindow_of relation between two or more objects has changed ."}{"node_name": "PARENT_WINDOW_OF_PROPERTY", "type": "field", "idx": 46528, "Desc": "indicates the parent_window_of relation between two or more objects has changed ."}{"node_name": "EMBEDS_PROPERTY", "type": "field", "idx": 46529, "Desc": "indicates the embeds relation between two or more objects has changed ."}{"node_name": "EMBEDDED_BY_PROPERTY", "type": "field", "idx": 46530, "Desc": "indicates the embedded_by relation between two or more objects has changed ."}{"node_name": "CHILD_NODE_OF_PROPERTY", "type": "field", "idx": 46531, "Desc": "indicates the child_node_of relation between two or more objects has changed ."}{"node_name": "relations", "type": "field", "idx": 46547, "Desc": "each entry in the vector represents an accessiblerelation ."}{"node_name": "ALERT", "type": "field", "idx": 46567, "Desc": "object is used to alert the user about something ."}{"node_name": "COLUMN_HEADER", "type": "field", "idx": 46568, "Desc": "the header for a column of data ."}{"node_name": "CANVAS", "type": "field", "idx": 46569, "Desc": "object that can be drawn into and is used to trap events ."}{"node_name": "COMBO_BOX", "type": "field", "idx": 46570, "Desc": "a list of choices the user can select from . also optionally allows the user to enter a choice of their own ."}{"node_name": "DESKTOP_ICON", "type": "field", "idx": 46571, "Desc": "an iconified internal frame in a desktop_pane ."}{"node_name": "HTML_CONTAINER", "type": "field", "idx": 46572, "Desc": "an object containing a collection of accessibles that together represents html content . the child accessibles would include objects implementing accessibletext , accessiblehypertext , accessibleicon , and other interfaces ."}{"node_name": "INTERNAL_FRAME", "type": "field", "idx": 46573, "Desc": "a frame-like object that is clipped by a desktop pane . the desktop pane , internal frame , and desktop icon objects are often used to create multiple document interfaces within an application ."}{"node_name": "DESKTOP_PANE", "type": "field", "idx": 46574, "Desc": "a pane that supports internal frames and iconified versions of those internal frames ."}{"node_name": "OPTION_PANE", "type": "field", "idx": 46575, "Desc": "a specialized pane whose primary use is inside a dialog ."}{"node_name": "WINDOW", "type": "field", "idx": 46576, "Desc": "a top level window with no title or border ."}{"node_name": "FRAME", "type": "field", "idx": 46577, "Desc": "a top level window with a title bar , border , menu bar , etc . it is often used as the primary window for an application ."}{"node_name": "DIALOG", "type": "field", "idx": 46578, "Desc": "a top level window with title bar and a border . a dialog is similar to a frame , but it has fewer properties and is often used as a secondary window for an application ."}{"node_name": "COLOR_CHOOSER", "type": "field", "idx": 46579, "Desc": "a specialized pane that lets the user choose a color ."}{"node_name": "DIRECTORY_PANE", "type": "field", "idx": 46580, "Desc": "a pane that allows the user to navigate through and select the contents of a directory . may be used by a file chooser ."}{"node_name": "FILE_CHOOSER", "type": "field", "idx": 46581, "Desc": "a specialized dialog that displays the files in the directory and lets the user select a file , browse a different directory , or specify a filename . may use the directory pane to show the contents of a directory ."}{"node_name": "FILLER", "type": "field", "idx": 46582, "Desc": "an object that fills up space in a user interface . it is often used in interfaces to tweak the spacing between components , but serves no other purpose ."}{"node_name": "HYPERLINK", "type": "field", "idx": 46583, "Desc": "a hypertext anchor ."}{"node_name": "ICON", "type": "field", "idx": 46584, "Desc": "a small fixed size picture , typically used to decorate components ."}{"node_name": "LABEL", "type": "field", "idx": 46585, "Desc": "an object used to present an icon or short string in an interface ."}{"node_name": "ROOT_PANE", "type": "field", "idx": 46586, "Desc": "a specialized pane that has a glass pane and a layered pane as its children ."}{"node_name": "GLASS_PANE", "type": "field", "idx": 46587, "Desc": "a pane that is guaranteed to be painted on top of all panes beneath it ."}{"node_name": "LAYERED_PANE", "type": "field", "idx": 46588, "Desc": "a specialized pane that allows its children to be drawn in layers , providing a form of stacking order . this is usually the pane that holds the menu bar as well as the pane that contains most of the visual components in a window ."}{"node_name": "LIST", "type": "field", "idx": 46589, "Desc": "an object that presents a list of objects to the user and allows the user to select one or more of them . a list is usually contained within a scroll pane ."}{"node_name": "LIST_ITEM", "type": "field", "idx": 46590, "Desc": "an object that presents an element in a list . a list is usually contained within a scroll pane ."}{"node_name": "MENU_BAR", "type": "field", "idx": 46591, "Desc": "an object usually drawn at the top of the primary dialog box of an application that contains a list of menus the user can choose from . for example , a menu bar might contain menus for \" file , \" \" edit , \" and \" help . \""}{"node_name": "POPUP_MENU", "type": "field", "idx": 46592, "Desc": "a temporary window that is usually used to offer the user a list of choices , and then hides when the user selects one of those choices ."}{"node_name": "MENU", "type": "field", "idx": 46593, "Desc": "an object usually found inside a menu bar that contains a list of actions the user can choose from . a menu can have any object as its children , but most often they are menu items , other menus , or rudimentary objects such as radio buttons , check boxes , or separators . for example , an application may have an \" edit \" menu that contains menu items for \" cut \" and \" paste . \""}{"node_name": "MENU_ITEM", "type": "field", "idx": 46594, "Desc": "an object usually contained in a menu that presents an action the user can choose . for example , the \" cut \" menu item in an \" edit \" menu would be an action the user can select to cut the selected area of text in a document ."}{"node_name": "SEPARATOR", "type": "field", "idx": 46595, "Desc": "an object usually contained in a menu to provide a visual and logical separation of the contents in a menu . for example , the \" file \" menu of an application might contain menu items for \" open , \" \" close , \" and \" exit , \" and will place a separator between \" close \" and \" exit \" menu items ."}{"node_name": "PAGE_TAB_LIST", "type": "field", "idx": 46596, "Desc": "an object that presents a series of panels ( or page tabs ) , one at a time , through some mechanism provided by the object . the most common mechanism is a list of tabs at the top of the panel . the children of a page tab list are all page tabs ."}{"node_name": "PAGE_TAB", "type": "field", "idx": 46597, "Desc": "an object that is a child of a page tab list . its sole child is the panel that is to be presented to the user when the user selects the page tab from the list of tabs in the page tab list ."}{"node_name": "PANEL", "type": "field", "idx": 46598, "Desc": "a generic container that is often used to group objects ."}{"node_name": "PROGRESS_BAR", "type": "field", "idx": 46599, "Desc": "an object used to indicate how much of a task has been completed ."}{"node_name": "PASSWORD_TEXT", "type": "field", "idx": 46600, "Desc": "a text object used for passwords , or other places where the text contents is not shown visibly to the user ."}{"node_name": "PUSH_BUTTON", "type": "field", "idx": 46601, "Desc": "an object the user can manipulate to tell the application to do something ."}{"node_name": "TOGGLE_BUTTON", "type": "field", "idx": 46602, "Desc": "a specialized push button that can be checked or unchecked , but does not provide a separate indicator for the current state ."}{"node_name": "CHECK_BOX", "type": "field", "idx": 46603, "Desc": "a choice that can be checked or unchecked and provides a separate indicator for the current state ."}{"node_name": "RADIO_BUTTON", "type": "field", "idx": 46604, "Desc": "a specialized check box that will cause other radio buttons in the same group to become unchecked when this one is checked ."}{"node_name": "ROW_HEADER", "type": "field", "idx": 46605, "Desc": "the header for a row of data ."}{"node_name": "SCROLL_PANE", "type": "field", "idx": 46606, "Desc": "an object that allows a user to incrementally view a large amount of information . its children can include scroll bars and a viewport ."}{"node_name": "SCROLL_BAR", "type": "field", "idx": 46607, "Desc": "an object usually used to allow a user to incrementally view a large amount of data . usually used only by a scroll pane ."}{"node_name": "VIEWPORT", "type": "field", "idx": 46608, "Desc": "an object usually used in a scroll pane . it represents the portion of the entire data that the user can see . as the user manipulates the scroll bars , the contents of the viewport can change ."}{"node_name": "SLIDER", "type": "field", "idx": 46609, "Desc": "an object that allows the user to select from a bounded range . for example , a slider might be used to select a number between 0 and 100 ."}{"node_name": "SPLIT_PANE", "type": "field", "idx": 46610, "Desc": "a specialized panel that presents two other panels at the same time . between the two panels is a divider the user can manipulate to make one panel larger and the other panel smaller ."}{"node_name": "TABLE", "type": "field", "idx": 46611, "Desc": "an object used to present information in terms of rows and columns . an example might include a spreadsheet application ."}{"node_name": "TEXT", "type": "field", "idx": 46612, "Desc": "an object that presents text to the user . the text is usually editable by the user as opposed to a label ."}{"node_name": "TREE", "type": "field", "idx": 46613, "Desc": "an object used to present hierarchical information to the user . the individual nodes in the tree can be collapsed and expanded to provide selective disclosure of the tree's contents ."}{"node_name": "TOOL_BAR", "type": "field", "idx": 46614, "Desc": "a bar or palette usually composed of push buttons or toggle buttons . it is often used to provide the most frequently used functions for an application ."}{"node_name": "TOOL_TIP", "type": "field", "idx": 46615, "Desc": "an object that provides information about another object . the accessibledescription property of the tool tip is often displayed to the user in a small \" help bubble \" when the user causes the mouse to hover over the object associated with the tool tip ."}{"node_name": "AWT_COMPONENT", "type": "field", "idx": 46616, "Desc": "an awt component , but nothing else is known about it ."}{"node_name": "SWING_COMPONENT", "type": "field", "idx": 46617, "Desc": "a swing component , but nothing else is known about it ."}{"node_name": "UNKNOWN", "type": "field", "idx": 46618, "Desc": "the object contains some accessible information , but its role is not known ."}{"node_name": "STATUS_BAR", "type": "field", "idx": 46619, "Desc": "a status_bar is an simple component that can contain multiple labels of status information to the user ."}{"node_name": "DATE_EDITOR", "type": "field", "idx": 46620, "Desc": "a date_editor is a component that allows users to edit java.util.date and java.util.time objects ."}{"node_name": "SPIN_BOX", "type": "field", "idx": 46621, "Desc": "a spin_box is a simple spinner component and its main use is for simple numbers ."}{"node_name": "FONT_CHOOSER", "type": "field", "idx": 46622, "Desc": "a font_chooser is a component that lets the user pick various attributes for fonts ."}{"node_name": "GROUP_BOX", "type": "field", "idx": 46623, "Desc": "a group_box is a simple container that contains a border around it and contains components inside it ."}{"node_name": "HEADER", "type": "field", "idx": 46624, "Desc": "a text header ."}{"node_name": "FOOTER", "type": "field", "idx": 46625, "Desc": "a text footer ."}{"node_name": "PARAGRAPH", "type": "field", "idx": 46626, "Desc": "a text paragraph ."}{"node_name": "RULER", "type": "field", "idx": 46627, "Desc": "a ruler is an object used to measure distance ."}{"node_name": "EDITBAR", "type": "field", "idx": 46628, "Desc": "a role indicating the object acts as a formula for calculating a value . an example is a formula in a spreadsheet cell ."}{"node_name": "PROGRESS_MONITOR", "type": "field", "idx": 46629, "Desc": "a role indicating the object monitors the progress of some operation ."}{"node_name": "ACTIVE", "type": "field", "idx": 46645, "Desc": "indicates a window is currently the active window . this includes windows , dialogs , frames , etc . in addition , this state is used to indicate the currently active child of a component such as a list , table , or tree . for example , the active child of a list is the child that is drawn with a rectangle around it ."}{"node_name": "PRESSED", "type": "field", "idx": 46646, "Desc": "indicates this object is currently pressed . this is usually associated with buttons and indicates the user has pressed a mouse button while the pointer was over the button and has not yet released the mouse button ."}{"node_name": "ARMED", "type": "field", "idx": 46647, "Desc": "indicates that the object is armed . this is usually used on buttons that have been pressed but not yet released , and the mouse pointer is still over the button ."}{"node_name": "BUSY", "type": "field", "idx": 46648, "Desc": "indicates the current object is busy . this is usually used on objects such as progress bars , sliders , or scroll bars to indicate they are in a state of transition ."}{"node_name": "CHECKED", "type": "field", "idx": 46649, "Desc": "indicates this object is currently checked . this is usually used on objects such as toggle buttons , radio buttons , and check boxes ."}{"node_name": "EDITABLE", "type": "field", "idx": 46650, "Desc": "indicates the user can change the contents of this object . this is usually used primarily for objects that allow the user to enter text . other objects , such as scroll bars and sliders , are automatically editable if they are enabled ."}{"node_name": "EXPANDABLE", "type": "field", "idx": 46651, "Desc": "indicates this object allows progressive disclosure of its children . this is usually used with hierarchical objects such as trees and is often paired with the expanded or collapsed states ."}{"node_name": "COLLAPSED", "type": "field", "idx": 46652, "Desc": "indicates this object is collapsed . this is usually paired with the expandable state and is used on objects that provide progressive disclosure such as trees ."}{"node_name": "EXPANDED", "type": "field", "idx": 46653, "Desc": "indicates this object is expanded . this is usually paired with the expandable state and is used on objects that provide progressive disclosure such as trees ."}{"node_name": "ENABLED", "type": "field", "idx": 46654, "Desc": "indicates this object is enabled . the absence of this state from an object's state set indicates this object is not enabled . an object that is not enabled cannot be manipulated by the user . in a graphical display , it is usually grayed out ."}{"node_name": "FOCUSABLE", "type": "field", "idx": 46655, "Desc": "indicates this object can accept keyboard focus , which means all events resulting from typing on the keyboard will normally be passed to it when it has focus ."}{"node_name": "FOCUSED", "type": "field", "idx": 46656, "Desc": "indicates this object currently has the keyboard focus ."}{"node_name": "ICONIFIED", "type": "field", "idx": 46657, "Desc": "indicates this object is minimized and is represented only by an icon . this is usually only associated with frames and internal frames ."}{"node_name": "MODAL", "type": "field", "idx": 46658, "Desc": "indicates something must be done with this object before the user can interact with an object in a different window . this is usually associated only with dialogs ."}{"node_name": "OPAQUE", "type": "field", "idx": 46659, "Desc": "indicates this object paints every pixel within its rectangular region . a non-opaque component paints only some of its pixels , allowing the pixels underneath it to \" show through \" . a component that does not fully paint its pixels therefore provides a degree of transparency ."}{"node_name": "RESIZABLE", "type": "field", "idx": 46660, "Desc": "indicates the size of this object is not fixed ."}{"node_name": "MULTISELECTABLE", "type": "field", "idx": 46661, "Desc": "indicates this object allows more than one of its children to be selected at the same time ."}{"node_name": "SELECTABLE", "type": "field", "idx": 46662, "Desc": "indicates this object is the child of an object that allows its children to be selected , and that this child is one of those children that can be selected ."}{"node_name": "SELECTED", "type": "field", "idx": 46663, "Desc": "indicates this object is the child of an object that allows its children to be selected , and that this child is one of those children that has been selected ."}{"node_name": "SHOWING", "type": "field", "idx": 46664, "Desc": "indicates this object , the object's parent , the object's parent's parent , and so on , are all visible . note that this does not necessarily mean the object is painted on the screen . it might be occluded by some other showing object ."}{"node_name": "VISIBLE", "type": "field", "idx": 46665, "Desc": "indicates this object is visible . note : this means that the object intends to be visible ; however , it may not in fact be showing on the screen because one of the objects that this object is contained by is not visible ."}{"node_name": "VERTICAL", "type": "field", "idx": 46666, "Desc": "indicates the orientation of this object is vertical . this is usually associated with objects such as scrollbars , sliders , and progress bars ."}{"node_name": "HORIZONTAL", "type": "field", "idx": 46667, "Desc": "indicates the orientation of this object is horizontal . this is usually associated with objects such as scrollbars , sliders , and progress bars ."}{"node_name": "SINGLE_LINE", "type": "field", "idx": 46668, "Desc": "indicates this ( text ) object can contain only a single line of text ."}{"node_name": "MULTI_LINE", "type": "field", "idx": 46669, "Desc": "indicates this ( text ) object can contain multiple lines of text ."}{"node_name": "TRANSIENT", "type": "field", "idx": 46670, "Desc": "indicates this object is transient . an assistive technology should not add a propertychange listener to an object with transient state , as that object will never generate any events . transient objects are typically created to answer java accessibility method queries , but otherwise do not remain linked to the underlying object ( for example , those objects underneath lists , tables , and trees in swing , where only one actual ui component does shared rendering duty for all of the data objects underneath the actual list / table / tree elements ) ."}{"node_name": "MANAGES_DESCENDANTS", "type": "field", "idx": 46671, "Desc": "indicates this object is responsible for managing its subcomponents . this is typically used for trees and tables that have a large number of subcomponents and where the objects are created only when needed and otherwise remain virtual . the application should not manage the subcomponents directly ."}{"node_name": "INDETERMINATE", "type": "field", "idx": 46672, "Desc": "indicates that the object state is indeterminate . an example is selected text that is partially bold and partially not bold . in this case the attributes associated with the selected text are indeterminate ."}{"node_name": "TRUNCATED", "type": "field", "idx": 46673, "Desc": "a state indicating that text is truncated by a bounding rectangle and that some of the text is not displayed on the screen . an example is text in a spreadsheet cell that is truncated by the bounds of the cell ."}{"node_name": "states", "type": "field", "idx": 46677, "Desc": "each entry in the vector represents an accessiblestate ."}{"node_name": "INSERT", "type": "field", "idx": 46740, "Desc": "identifies the insertion of new rows and / or columns ."}{"node_name": "UPDATE", "type": "field", "idx": 46741, "Desc": "identifies a change to existing data ."}{"node_name": "DELETE", "type": "field", "idx": 46742, "Desc": "identifies the deletion of rows and / or columns ."}{"node_name": "CHARACTER", "type": "field", "idx": 46749, "Desc": "constant used to indicate that the part of the text that should be retrieved is a character ."}{"node_name": "WORD", "type": "field", "idx": 46750, "Desc": "constant used to indicate that the part of the text that should be retrieved is a word ."}{"node_name": "SENTENCE", "type": "field", "idx": 46751, "Desc": "constant used to indicate that the part of the text that should be retrieved is a sentence . a sentence is a string of words which expresses an assertion , a question , a command , a wish , an exclamation , or the performance of an action . in english locales , the string usually begins with a capital letter and concludes with appropriate end punctuation ; such as a period , question or exclamation mark . other locales may use different capitalization and / or punctuation ."}{"node_name": "startIndex", "type": "field", "idx": 46773, "Desc": "the start index of the text sequence ."}{"node_name": "endIndex", "type": "field", "idx": 46774, "Desc": "the end index of the text sequence ."}{"node_name": "text", "type": "field", "idx": 46775, "Desc": "the text ."}{"node_name": "processingEnv", "type": "field", "idx": 46787, "Desc": "processing environment providing by the tool framework ."}{"node_name": "ENCRYPT_MODE", "type": "field", "idx": 46895, "Desc": "constant used to initialize cipher to encryption mode ."}{"node_name": "DECRYPT_MODE", "type": "field", "idx": 46896, "Desc": "constant used to initialize cipher to decryption mode ."}{"node_name": "WRAP_MODE", "type": "field", "idx": 46897, "Desc": "constant used to initialize cipher to key-wrapping mode ."}{"node_name": "UNWRAP_MODE", "type": "field", "idx": 46898, "Desc": "constant used to initialize cipher to key-unwrapping mode ."}{"node_name": "PUBLIC_KEY", "type": "field", "idx": 46899, "Desc": "constant used to indicate the to-be-unwrapped key is a \" public key \" ."}{"node_name": "PRIVATE_KEY", "type": "field", "idx": 46900, "Desc": "constant used to indicate the to-be-unwrapped key is a \" private key \" ."}{"node_name": "SECRET_KEY", "type": "field", "idx": 46901, "Desc": "constant used to indicate the to-be-unwrapped key is a \" secret key \" ."}{"node_name": "encodedParams", "type": "field", "idx": 47362, "Desc": "the cryptographic parameters used by the sealing cipher , encoded in the default format . that is , cipher.getparameters() .getencoded() ."}{"node_name": "DES_EDE_KEY_LEN", "type": "field", "idx": 47419, "Desc": "the constant which defines the length of a desede key in bytes ."}{"node_name": "DES_KEY_LEN", "type": "field", "idx": 47430, "Desc": "the constant which defines the length of a des key in bytes ."}{"node_name": "DEFAULT", "type": "field", "idx": 47496, "Desc": "the oaep parameter set with all default values ."}{"node_name": "DEFAULT", "type": "field", "idx": 47539, "Desc": "the encoding input p whose value equals byte [ 0 ] ."}{"node_name": "image", "type": "field", "idx": 47706, "Desc": "the renderedimage being referenced ."}{"node_name": "raster", "type": "field", "idx": 47707, "Desc": "the raster being referenced ."}{"node_name": "thumbnails", "type": "field", "idx": 47708, "Desc": "a list of bufferedimage thumbnails , or null . non-bufferedimage objects must not be stored in this list ."}{"node_name": "metadata", "type": "field", "idx": 47709, "Desc": "an iiometadata object containing metadata associated with the image ."}{"node_name": "sourceRegion", "type": "field", "idx": 47735, "Desc": "the source region , on null if none is set ."}{"node_name": "sourceXSubsampling", "type": "field", "idx": 47736, "Desc": "the decimation subsampling to be applied in the horizontal direction . by default , the value is 1 . the value must not be negative or 0 ."}{"node_name": "sourceYSubsampling", "type": "field", "idx": 47737, "Desc": "the decimation subsampling to be applied in the vertical direction . by default , the value is 1 . the value must not be negative or 0 ."}{"node_name": "subsamplingXOffset", "type": "field", "idx": 47738, "Desc": "a horizontal offset to be applied to the subsampling grid before subsampling . the first pixel to be used will be offset this amount from the origin of the region , or of the image if no region is specified ."}{"node_name": "subsamplingYOffset", "type": "field", "idx": 47739, "Desc": "a vertical offset to be applied to the subsampling grid before subsampling . the first pixel to be used will be offset this amount from the origin of the region , or of the image if no region is specified ."}{"node_name": "sourceBands", "type": "field", "idx": 47740, "Desc": "an array of ints indicating which source bands will be used , or null . if null , the set of source bands to be used is as described in the comment for the setsourcebands method . no value should be allowed to be negative ."}{"node_name": "destinationType", "type": "field", "idx": 47741, "Desc": "an imagetypespecifier to be used to generate a destination image when reading , or to set the output color type when writing . if non has been set the value will be null . by default , the value is null ."}{"node_name": "destinationOffset", "type": "field", "idx": 47742, "Desc": "the offset in the destination where the upper-left decoded pixel should be placed . by default , the value is ( 0 , 0 ) ."}{"node_name": "defaultController", "type": "field", "idx": 47743, "Desc": "the default iioparamcontroller that will be used to provide settings for this iioparam object when the activatecontroller method is called . this default should be set by subclasses that choose to provide their own default controller , usually a gui , for setting parameters ."}{"node_name": "controller", "type": "field", "idx": 47744, "Desc": "the iioparamcontroller that will be used to provide settings for this iioparam object when the activatecontroller method is called . this value overrides any default controller , even when null ."}{"node_name": "originatingProvider", "type": "field", "idx": 47839, "Desc": "the imagereaderspi that instantiated this object , or null if its identity is not known or none exists . by default it is initialized to null ."}{"node_name": "input", "type": "field", "idx": 47840, "Desc": "the imageinputstream or other object by setinput and retrieved by getinput . by default it is initialized to null ."}{"node_name": "seekForwardOnly", "type": "field", "idx": 47841, "Desc": "true if the current input source has been marked as allowing only forward seeking by setinput . by default , the value is false ."}{"node_name": "ignoreMetadata", "type": "field", "idx": 47842, "Desc": "true if the current input source has been marked as allowing metadata to be ignored by setinput . by default , the value is false ."}{"node_name": "minIndex", "type": "field", "idx": 47843, "Desc": "the smallest valid index for reading , initially 0 . when seekforwardonly is true , various methods may throw an indexoutofboundsexception on an attempt to access data associate with an image having a lower index ."}{"node_name": "availableLocales", "type": "field", "idx": 47844, "Desc": "an array of locales which may be used to localize warning messages , or null if localization is not supported ."}{"node_name": "locale", "type": "field", "idx": 47845, "Desc": "the current locale to be used for localization , or null if none has been set ."}{"node_name": "warningListeners", "type": "field", "idx": 47846, "Desc": "a list of currently registered iioreadwarninglisteners , initialized by default to null , which is synonymous with an empty list ."}{"node_name": "warningLocales", "type": "field", "idx": 47847, "Desc": "a list of the locales associated with each currently registered iioreadwarninglistener , initialized by default to null , which is synonymous with an empty list ."}{"node_name": "progressListeners", "type": "field", "idx": 47848, "Desc": "a list of currently registered iioreadprogresslisteners , initialized by default to null , which is synonymous with an empty list ."}{"node_name": "updateListeners", "type": "field", "idx": 47849, "Desc": "a list of currently registered iioreadupdatelisteners , initialized by default to null , which is synonymous with an empty list ."}{"node_name": "canSetSourceRenderSize", "type": "field", "idx": 48048, "Desc": "true if this imagereadparam allows the source rendering dimensions to be set . by default , the value is false . subclasses must set this value manually . imagereaders that do not support setting of the source render size should set this value to false ."}{"node_name": "sourceRenderSize", "type": "field", "idx": 48049, "Desc": "the desired rendering width and height of the source , if cansetsourcerendersize is true , or null . imagereaders that do not support setting of the source render size may ignore this value ."}{"node_name": "destination", "type": "field", "idx": 48050, "Desc": "the current destination bufferedimage , or null if none has been set . by default , the value is null ."}{"node_name": "destinationBands", "type": "field", "idx": 48051, "Desc": "the set of destination bands to be used , as an array of ints . by default , the value is null , indicating all destination bands should be written in order ."}{"node_name": "minProgressivePass", "type": "field", "idx": 48052, "Desc": "the minimum index of a progressive pass to read from the source . by default , the value is set to 0 , which indicates that passes starting with the first available pass should be decoded . subclasses should ensure that this value is non-negative ."}{"node_name": "numProgressivePasses", "type": "field", "idx": 48053, "Desc": "the maximum number of progressive passes to read from the source . by default , the value is set to integer.max_value , which indicates that passes up to and including the last available pass should be decoded . subclasses should ensure that this value is positive . additionally , if the value is not integer.max_value , then minprogressivepass + numprogressivepasses - 1 should not exceed integer.max_value ."}{"node_name": "colorModel", "type": "field", "idx": 48080, "Desc": "the colormodel to be used as a prototype ."}{"node_name": "sampleModel", "type": "field", "idx": 48081, "Desc": "a samplemodel to be used as a prototype ."}{"node_name": "MODE_DISABLED", "type": "field", "idx": 48145, "Desc": "a constant value that may be passed into methods such as settilingmode , setprogressivemode , and setcompressionmode to disable a feature for future writes . that is , when this mode is set the stream will not be tiled , progressive , or compressed , and the relevant accessor methods will throw an illegalstateexception ."}{"node_name": "MODE_DEFAULT", "type": "field", "idx": 48146, "Desc": "a constant value that may be passed into methods such as settilingmode , setprogressivemode , and setcompressionmode to enable that feature for future writes . that is , when this mode is enabled the stream will be tiled , progressive , or compressed according to a sensible default chosen internally by the writer in a plug-in dependent way , and the relevant accessor methods will throw an illegalstateexception ."}{"node_name": "MODE_EXPLICIT", "type": "field", "idx": 48147, "Desc": "a constant value that may be passed into methods such as settilingmode or setcompressionmode to enable a feature for future writes . that is , when this mode is set the stream will be tiled or compressed according to additional information supplied to the corresponding set methods in this class and retrievable from the corresponding get methods . note that this mode is not supported for progressive output ."}{"node_name": "MODE_COPY_FROM_METADATA", "type": "field", "idx": 48148, "Desc": "a constant value that may be passed into methods such as settilingmode , setprogressivemode , or setcompressionmode to enable that feature for future writes . that is , when this mode is enabled the stream will be tiled , progressive , or compressed based on the contents of stream and / or image metadata passed into the write operation , and any relevant accessor methods will throw an illegalstateexception . this is the default mode for all features , so that a read including metadata followed by a write including metadata will preserve as much information as possible ."}{"node_name": "canWriteTiles", "type": "field", "idx": 48149, "Desc": "a boolean that is true if this imagewriteparam allows tile width and tile height parameters to be set . by default , the value is false . subclasses must set the value manually . subclasses that do not support writing tiles should ensure that this value is set to false ."}{"node_name": "tilingMode", "type": "field", "idx": 48150, "Desc": "the mode controlling tiling settings , which must be set to one of the four mode_* values . the default is mode_copy_from_metadata . subclasses that do not writing tiles may ignore this value ."}{"node_name": "preferredTileSizes", "type": "field", "idx": 48151, "Desc": "an array of preferred tile size range pairs . the default value is null , which indicates that there are no preferred sizes . if the value is non-null , it must have an even length of at least two . subclasses that do not support writing tiles may ignore this value ."}{"node_name": "tilingSet", "type": "field", "idx": 48152, "Desc": "a boolean that is true if tiling parameters have been specified . subclasses that do not support writing tiles may ignore this value ."}{"node_name": "tileWidth", "type": "field", "idx": 48153, "Desc": "the width of each tile if tiling has been set , or 0 otherwise . subclasses that do not support tiling may ignore this value ."}{"node_name": "tileHeight", "type": "field", "idx": 48154, "Desc": "the height of each tile if tiling has been set , or 0 otherwise . the initial value is 0 . subclasses that do not support tiling may ignore this value ."}{"node_name": "canOffsetTiles", "type": "field", "idx": 48155, "Desc": "a boolean that is true if this imagewriteparam allows tiling grid offset parameters to be set . by default , the value is false . subclasses must set the value manually . subclasses that do not support writing tiles , or that support writing but not offsetting tiles must ensure that this value is set to false ."}{"node_name": "tileGridXOffset", "type": "field", "idx": 48156, "Desc": "the amount by which the tile grid origin should be offset horizontally from the image origin if tiling has been set , or 0 otherwise . the initial value is 0 . subclasses that do not support offsetting tiles may ignore this value ."}{"node_name": "tileGridYOffset", "type": "field", "idx": 48157, "Desc": "the amount by which the tile grid origin should be offset vertically from the image origin if tiling has been set , or 0 otherwise . the initial value is 0 . subclasses that do not support offsetting tiles may ignore this value ."}{"node_name": "canWriteProgressive", "type": "field", "idx": 48158, "Desc": "a boolean that is true if this imagewriteparam allows images to be written as a progressive sequence of increasing quality passes . by default , the value is false . subclasses must set the value manually . subclasses that do not support progressive encoding must ensure that this value is set to false ."}{"node_name": "progressiveMode", "type": "field", "idx": 48159, "Desc": "the mode controlling progressive encoding , which must be set to one of the four mode_* values , except mode_explicit . the default is mode_copy_from_metadata . subclasses that do not support progressive encoding may ignore this value ."}{"node_name": "canWriteCompressed", "type": "field", "idx": 48160, "Desc": "a boolean that is true if this writer can write images using compression . by default , the value is false . subclasses must set the value manually . subclasses that do not support compression must ensure that this value is set to false ."}{"node_name": "compressionMode", "type": "field", "idx": 48161, "Desc": "the mode controlling compression settings , which must be set to one of the four mode_* values . the default is mode_copy_from_metadata . subclasses that do not support compression may ignore this value ."}{"node_name": "compressionTypes", "type": "field", "idx": 48162, "Desc": "an array of strings containing the names of the available compression types . subclasses must set the value manually . subclasses that do not support compression may ignore this value ."}{"node_name": "compressionType", "type": "field", "idx": 48163, "Desc": "a string containing the name of the current compression type , or null if none is set . subclasses that do not support compression may ignore this value ."}{"node_name": "compressionQuality", "type": "field", "idx": 48164, "Desc": "a float containing the current compression quality setting . the initial value is 1.0f . subclasses that do not support compression may ignore this value ."}{"node_name": "locale", "type": "field", "idx": 48165, "Desc": "a locale to be used to localize compression type names and quality descriptions , or null to use a default locale . subclasses must set the value manually ."}{"node_name": "originatingProvider", "type": "field", "idx": 48209, "Desc": "the imagewriterspi that instantiated this object , or null if its identity is not known or none exists . by default it is initialized to null ."}{"node_name": "output", "type": "field", "idx": 48210, "Desc": "the imageoutputstream or other object set by setoutput and retrieved by getoutput . by default it is initialized to null ."}{"node_name": "availableLocales", "type": "field", "idx": 48211, "Desc": "an array of locales that may be used to localize warning messages and compression setting values , or null if localization is not supported . by default it is initialized to null ."}{"node_name": "locale", "type": "field", "idx": 48212, "Desc": "the current locale to be used for localization , or null if none has been set . by default it is initialized to null ."}{"node_name": "warningListeners", "type": "field", "idx": 48213, "Desc": "a list of currently registered iiowritewarninglisteners , initialized by default to null , which is synonymous with an empty list ."}{"node_name": "warningLocales", "type": "field", "idx": 48214, "Desc": "a list of locales , one for each element of warninglisteners , initialized by default null , which is synonymous with an empty list ."}{"node_name": "progressListeners", "type": "field", "idx": 48215, "Desc": "a list of currently registered iiowriteprogresslisteners , initialized by default null , which is synonymous with an empty list ."}{"node_name": "offendingNode", "type": "field", "idx": 48344, "Desc": "the node that led to the parsing error , or null ."}{"node_name": "standardFormatSupported", "type": "field", "idx": 48354, "Desc": "a boolean indicating whether the concrete subclass supports the standard metadata format , set via the constructor ."}{"node_name": "nativeMetadataFormatName", "type": "field", "idx": 48355, "Desc": "the name of the native metadata format for this object , initialized to null and set via the constructor ."}{"node_name": "nativeMetadataFormatClassName", "type": "field", "idx": 48356, "Desc": "the name of the class implementing iiometadataformat and representing the native metadata format , initialized to null and set via the constructor ."}{"node_name": "extraMetadataFormatNames", "type": "field", "idx": 48357, "Desc": "an array of names of formats , other than the standard and native formats , that are supported by this plug-in , initialized to null and set via the constructor ."}{"node_name": "extraMetadataFormatClassNames", "type": "field", "idx": 48358, "Desc": "an array of names of classes implementing iiometadataformat and representing the metadata formats , other than the standard and native formats , that are supported by this plug-in , initialized to null and set via the constructor ."}{"node_name": "defaultController", "type": "field", "idx": 48359, "Desc": "an iiometadatacontroller that is suggested for use as the controller for this iiometadata object . it may be retrieved via getdefaultcontroller . to install the default controller , call setcontroller ( getdefaultcontroller() ) . this instance variable should be set by subclasses that choose to provide their own default controller , usually a gui , for setting parameters ."}{"node_name": "controller", "type": "field", "idx": 48360, "Desc": "the iiometadatacontroller that will be used to provide settings for this iiometadata object when the activatecontroller method is called . this value overrides any default controller , even when null ."}{"node_name": "CHILD_POLICY_EMPTY", "type": "field", "idx": 48403, "Desc": "a constant returned by getchildpolicy to indicate that an element may not have any children . in other words , it is required to be a leaf node ."}{"node_name": "CHILD_POLICY_ALL", "type": "field", "idx": 48404, "Desc": "a constant returned by getchildpolicy to indicate that an element must have a single instance of each of its legal child elements , in order . in dtd terms , the contents of the element are defined by a sequence a , b , c , d ,...."}{"node_name": "CHILD_POLICY_SOME", "type": "field", "idx": 48405, "Desc": "a constant returned by getchildpolicy to indicate that an element must have zero or one instance of each of its legal child elements , in order . in dtd terms , the contents of the element are defined by a sequence a ?, b ?, c ?, d ?,...."}{"node_name": "CHILD_POLICY_CHOICE", "type": "field", "idx": 48406, "Desc": "a constant returned by getchildpolicy to indicate that an element must have zero or one children , selected from among its legal child elements . in dtd terms , the contents of the element are defined by a selection a|b|c|d| ...."}{"node_name": "CHILD_POLICY_SEQUENCE", "type": "field", "idx": 48407, "Desc": "a constant returned by getchildpolicy to indicate that an element must have a sequence of instances of any of its legal child elements . in dtd terms , the contents of the element are defined by a sequence ( a|b|c|d| ... ) * ."}{"node_name": "CHILD_POLICY_REPEAT", "type": "field", "idx": 48408, "Desc": "a constant returned by getchildpolicy to indicate that an element must have zero or more instances of its unique legal child element . in dtd terms , the contents of the element are defined by a starred expression a* ."}{"node_name": "CHILD_POLICY_MAX", "type": "field", "idx": 48409, "Desc": "the largest valid child_policy_* constant , to be used for range checks ."}{"node_name": "VALUE_NONE", "type": "field", "idx": 48410, "Desc": "a constant returned by getobjectvaluetype to indicate the absence of a user object ."}{"node_name": "VALUE_ARBITRARY", "type": "field", "idx": 48411, "Desc": "a constant returned by getattributevaluetype and getobjectvaluetype to indicate that the attribute or user object may be set a single , arbitrary value ."}{"node_name": "VALUE_RANGE", "type": "field", "idx": 48412, "Desc": "a constant returned by getattributevaluetype and getobjectvaluetype to indicate that the attribute or user object may be set a range of values . both the minimum and maximum values of the range are exclusive . it is recommended that ranges of integers be inclusive on both ends , and that exclusive ranges be used only for floating-point data ."}{"node_name": "VALUE_RANGE_MIN_INCLUSIVE_MASK", "type": "field", "idx": 48413, "Desc": "a value that may be or'ed with value_range to obtain value_range_min_inclusive , and with value_range_max_inclusive to obtain value_range_min_max_inclusive . similarly , the value may be and'ed with the value of getattributevaluetype or getobjectvaluetype to determine if the minimum value of the range is inclusive ."}{"node_name": "VALUE_RANGE_MAX_INCLUSIVE_MASK", "type": "field", "idx": 48414, "Desc": "a value that may be or'ed with value_range to obtain value_range_max_inclusive , and with value_range_min_inclusive to obtain value_range_min_max_inclusive . similarly , the value may be and'ed with the value of getattributevaluetype or getobjectvaluetype to determine if the maximum value of the range is inclusive ."}{"node_name": "VALUE_RANGE_MIN_INCLUSIVE", "type": "field", "idx": 48415, "Desc": "a constant returned by getattributevaluetype and getobjectvaluetype to indicate that the attribute or user object may be set to a range of values . the minimum ( but not the maximum ) value of the range is inclusive ."}{"node_name": "VALUE_RANGE_MAX_INCLUSIVE", "type": "field", "idx": 48416, "Desc": "a constant returned by getattributevaluetype and getobjectvaluetype to indicate that the attribute or user object may be set to a range of values . the maximum ( but not the minimum ) value of the range is inclusive ."}{"node_name": "VALUE_RANGE_MIN_MAX_INCLUSIVE", "type": "field", "idx": 48417, "Desc": "a constant returned by getattributevaluetype and getobjectvaluetype to indicate that the attribute or user object may be set a range of values . both the minimum and maximum values of the range are inclusive . it is recommended that ranges of integers be inclusive on both ends , and that exclusive ranges be used only for floating-point data ."}{"node_name": "VALUE_ENUMERATION", "type": "field", "idx": 48418, "Desc": "a constant returned by getattributevaluetype and getobjectvaluetype to indicate that the attribute or user object may be set one of a number of enumerated values . in the case of attributes , these values are strings ; for objects , they are objects implementing a given class or interface . attribute values of type datatype_boolean should be marked as enumerations ."}{"node_name": "VALUE_LIST", "type": "field", "idx": 48419, "Desc": "a constant returned by getattributevaluetype and getobjectvaluetype to indicate that the attribute or user object may be set to a list or array of values . in the case of attributes , the list will consist of whitespace-separated values within a string ; for objects , an array will be used ."}{"node_name": "DATATYPE_STRING", "type": "field", "idx": 48420, "Desc": "a constant returned by getattributedatatype indicating that the value of an attribute is a general unicode string ."}{"node_name": "DATATYPE_BOOLEAN", "type": "field", "idx": 48421, "Desc": "a constant returned by getattributedatatype indicating that the value of an attribute is one of the boolean values ' true ' or ' false ' . attribute values of type datatype_boolean should be marked as enumerations , and the permitted values should be the string literal values \" true \" or \" false \" , although a plugin may also recognise lower or mixed case equivalents ."}{"node_name": "DATATYPE_INTEGER", "type": "field", "idx": 48422, "Desc": "a constant returned by getattributedatatype indicating that the value of an attribute is a string representation of an integer ."}{"node_name": "DATATYPE_FLOAT", "type": "field", "idx": 48423, "Desc": "a constant returned by getattributedatatype indicating that the value of an attribute is a string representation of a decimal floating-point number ."}{"node_name": "DATATYPE_DOUBLE", "type": "field", "idx": 48424, "Desc": "a constant returned by getattributedatatype indicating that the value of an attribute is a string representation of a double-precision decimal floating-point number ."}{"node_name": "standardMetadataFormatName", "type": "field", "idx": 48490, "Desc": "a string constant containing the standard format name , \" javax_imageio_1.0 \" ."}{"node_name": "StdDCLuminance", "type": "field", "idx": 48695, "Desc": "the standard dc luminance huffman table ."}{"node_name": "StdDCChrominance", "type": "field", "idx": 48696, "Desc": "the standard dc chrominance huffman table ."}{"node_name": "StdACLuminance", "type": "field", "idx": 48697, "Desc": "the standard ac luminance huffman table ."}{"node_name": "StdACChrominance", "type": "field", "idx": 48698, "Desc": "the standard ac chrominance huffman table ."}{"node_name": "K1Luminance", "type": "field", "idx": 48734, "Desc": "the sample luminance quantization table given in the jpeg specification , table k.1 . according to the specification , these values produce \" good \" quality output ."}{"node_name": "K1Div2Luminance", "type": "field", "idx": 48735, "Desc": "the sample luminance quantization table given in the jpeg specification , table k.1 , with all elements divided by 2 . according to the specification , these values produce \" very good \" quality output . this is the table usually used for \" visually lossless \" encoding , and is the default luminance table used if the default tables and quality settings are used ."}{"node_name": "K2Chrominance", "type": "field", "idx": 48736, "Desc": "the sample chrominance quantization table given in the jpeg specification , table k.2 . according to the specification , these values produce \" good \" quality output ."}{"node_name": "K2Div2Chrominance", "type": "field", "idx": 48737, "Desc": "the sample chrominance quantization table given in the jpeg specification , table k.1 , with all elements divided by 2 . according to the specification , these values produce \" very good \" quality output . this is the table usually used for \" visually lossless \" encoding , and is the default chrominance table used if the default tables and quality settings are used ."}{"node_name": "TAG_NEW_SUBFILE_TYPE", "type": "field", "idx": 48746, "Desc": "constant specifying the \" newsubfiletype \" tag ."}{"node_name": "NEW_SUBFILE_TYPE_REDUCED_RESOLUTION", "type": "field", "idx": 48747, "Desc": "a mask to be used with the \" newsubfiletype \" tag ."}{"node_name": "NEW_SUBFILE_TYPE_SINGLE_PAGE", "type": "field", "idx": 48748, "Desc": "a mask to be used with the \" newsubfiletype \" tag ."}{"node_name": "NEW_SUBFILE_TYPE_TRANSPARENCY", "type": "field", "idx": 48749, "Desc": "a mask to be used with the \" newsubfiletype \" tag ."}{"node_name": "TAG_SUBFILE_TYPE", "type": "field", "idx": 48750, "Desc": "constant specifying the \" subfiletype \" tag ."}{"node_name": "SUBFILE_TYPE_FULL_RESOLUTION", "type": "field", "idx": 48751, "Desc": "a value to be used with the \" subfiletype \" tag ."}{"node_name": "SUBFILE_TYPE_REDUCED_RESOLUTION", "type": "field", "idx": 48752, "Desc": "a value to be used with the \" subfiletype \" tag ."}{"node_name": "SUBFILE_TYPE_SINGLE_PAGE", "type": "field", "idx": 48753, "Desc": "a value to be used with the \" subfiletype \" tag ."}{"node_name": "TAG_IMAGE_WIDTH", "type": "field", "idx": 48754, "Desc": "constant specifying the \" imagewidth \" tag ."}{"node_name": "TAG_IMAGE_LENGTH", "type": "field", "idx": 48755, "Desc": "constant specifying the \" imagelength \" tag ."}{"node_name": "TAG_BITS_PER_SAMPLE", "type": "field", "idx": 48756, "Desc": "constant specifying the \" bitspersample \" tag ."}{"node_name": "TAG_COMPRESSION", "type": "field", "idx": 48757, "Desc": "constant specifying the \" compression \" tag ."}{"node_name": "COMPRESSION_NONE", "type": "field", "idx": 48758, "Desc": "a value to be used with the \" compression \" tag ."}{"node_name": "COMPRESSION_CCITT_RLE", "type": "field", "idx": 48759, "Desc": "a value to be used with the \" compression \" tag ."}{"node_name": "COMPRESSION_CCITT_T_4", "type": "field", "idx": 48760, "Desc": "a value to be used with the \" compression \" tag ."}{"node_name": "COMPRESSION_CCITT_T_6", "type": "field", "idx": 48761, "Desc": "a value to be used with the \" compression \" tag ."}{"node_name": "COMPRESSION_LZW", "type": "field", "idx": 48762, "Desc": "a value to be used with the \" compression \" tag ."}{"node_name": "COMPRESSION_OLD_JPEG", "type": "field", "idx": 48763, "Desc": "a value to be used with the \" compression \" tag ."}{"node_name": "COMPRESSION_JPEG", "type": "field", "idx": 48764, "Desc": "a value to be used with the \" compression \" tag ."}{"node_name": "COMPRESSION_ZLIB", "type": "field", "idx": 48765, "Desc": "a value to be used with the \" compression \" tag ."}{"node_name": "COMPRESSION_PACKBITS", "type": "field", "idx": 48766, "Desc": "a value to be used with the \" compression \" tag ."}{"node_name": "COMPRESSION_DEFLATE", "type": "field", "idx": 48767, "Desc": "a value to be used with the \" compression \" tag ."}{"node_name": "TAG_PHOTOMETRIC_INTERPRETATION", "type": "field", "idx": 48768, "Desc": "constant specifying the \" photometricinterpretation \" tag ."}{"node_name": "PHOTOMETRIC_INTERPRETATION_WHITE_IS_ZERO", "type": "field", "idx": 48769, "Desc": "a value to be used with the \" photometricinterpretation \" tag ."}{"node_name": "PHOTOMETRIC_INTERPRETATION_BLACK_IS_ZERO", "type": "field", "idx": 48770, "Desc": "a value to be used with the \" photometricinterpretation \" tag ."}{"node_name": "PHOTOMETRIC_INTERPRETATION_RGB", "type": "field", "idx": 48771, "Desc": "a value to be used with the \" photometricinterpretation \" tag ."}{"node_name": "PHOTOMETRIC_INTERPRETATION_PALETTE_COLOR", "type": "field", "idx": 48772, "Desc": "a value to be used with the \" photometricinterpretation \" tag ."}{"node_name": "PHOTOMETRIC_INTERPRETATION_TRANSPARENCY_MASK", "type": "field", "idx": 48773, "Desc": "a value to be used with the \" photometricinterpretation \" tag ."}{"node_name": "PHOTOMETRIC_INTERPRETATION_CMYK", "type": "field", "idx": 48774, "Desc": "a value to be used with the \" photometricinterpretation \" tag ."}{"node_name": "PHOTOMETRIC_INTERPRETATION_Y_CB_CR", "type": "field", "idx": 48775, "Desc": "a value to be used with the \" photometricinterpretation \" tag ."}{"node_name": "PHOTOMETRIC_INTERPRETATION_CIELAB", "type": "field", "idx": 48776, "Desc": "a value to be used with the \" photometricinterpretation \" tag ."}{"node_name": "PHOTOMETRIC_INTERPRETATION_ICCLAB", "type": "field", "idx": 48777, "Desc": "a value to be used with the \" photometricinterpretation \" tag ."}{"node_name": "TAG_THRESHHOLDING", "type": "field", "idx": 48778, "Desc": "constant specifying the \" threshholding \" tag ."}{"node_name": "THRESHHOLDING_NONE", "type": "field", "idx": 48779, "Desc": "a value to be used with the \" thresholding \" tag ."}{"node_name": "THRESHHOLDING_ORDERED_DITHER", "type": "field", "idx": 48780, "Desc": "a value to be used with the \" thresholding \" tag ."}{"node_name": "THRESHHOLDING_RANDOMIZED_DITHER", "type": "field", "idx": 48781, "Desc": "a value to be used with the \" thresholding \" tag ."}{"node_name": "TAG_CELL_WIDTH", "type": "field", "idx": 48782, "Desc": "constant specifying the \" cell_width \" tag ."}{"node_name": "TAG_CELL_LENGTH", "type": "field", "idx": 48783, "Desc": "constant specifying the \" cell_length \" tag ."}{"node_name": "TAG_FILL_ORDER", "type": "field", "idx": 48784, "Desc": "constant specifying the \" fill_order \" tag ."}{"node_name": "FILL_ORDER_LEFT_TO_RIGHT", "type": "field", "idx": 48785, "Desc": "a value to be used with the \" fillorder \" tag ."}{"node_name": "FILL_ORDER_RIGHT_TO_LEFT", "type": "field", "idx": 48786, "Desc": "a value to be used with the \" fillorder \" tag ."}{"node_name": "TAG_DOCUMENT_NAME", "type": "field", "idx": 48787, "Desc": "constant specifying the \" document_name \" tag ."}{"node_name": "TAG_IMAGE_DESCRIPTION", "type": "field", "idx": 48788, "Desc": "constant specifying the \" image_description \" tag ."}{"node_name": "TAG_MAKE", "type": "field", "idx": 48789, "Desc": "constant specifying the \" make \" tag ."}{"node_name": "TAG_MODEL", "type": "field", "idx": 48790, "Desc": "constant specifying the \" model \" tag ."}{"node_name": "TAG_STRIP_OFFSETS", "type": "field", "idx": 48791, "Desc": "constant specifying the \" strip_offsets \" tag ."}{"node_name": "TAG_ORIENTATION", "type": "field", "idx": 48792, "Desc": "constant specifying the \" orientation \" tag ."}{"node_name": "ORIENTATION_ROW_0_TOP_COLUMN_0_LEFT", "type": "field", "idx": 48793, "Desc": "a value to be used with the \" orientation \" tag ."}{"node_name": "ORIENTATION_ROW_0_TOP_COLUMN_0_RIGHT", "type": "field", "idx": 48794, "Desc": "a value to be used with the \" orientation \" tag ."}{"node_name": "ORIENTATION_ROW_0_BOTTOM_COLUMN_0_RIGHT", "type": "field", "idx": 48795, "Desc": "a value to be used with the \" orientation \" tag ."}{"node_name": "ORIENTATION_ROW_0_BOTTOM_COLUMN_0_LEFT", "type": "field", "idx": 48796, "Desc": "a value to be used with the \" orientation \" tag ."}{"node_name": "ORIENTATION_ROW_0_LEFT_COLUMN_0_TOP", "type": "field", "idx": 48797, "Desc": "a value to be used with the \" orientation \" tag ."}{"node_name": "ORIENTATION_ROW_0_RIGHT_COLUMN_0_TOP", "type": "field", "idx": 48798, "Desc": "a value to be used with the \" orientation \" tag ."}{"node_name": "ORIENTATION_ROW_0_RIGHT_COLUMN_0_BOTTOM", "type": "field", "idx": 48799, "Desc": "a value to be used with the \" orientation \" tag ."}{"node_name": "ORIENTATION_ROW_0_LEFT_COLUMN_0_BOTTOM", "type": "field", "idx": 48800, "Desc": "a value to be used with the \" orientation \" tag ."}{"node_name": "TAG_SAMPLES_PER_PIXEL", "type": "field", "idx": 48801, "Desc": "constant specifying the \" samples_per_pixel \" tag ."}{"node_name": "TAG_ROWS_PER_STRIP", "type": "field", "idx": 48802, "Desc": "constant specifying the \" rows_per_strip \" tag ."}{"node_name": "TAG_STRIP_BYTE_COUNTS", "type": "field", "idx": 48803, "Desc": "constant specifying the \" strip_byte_counts \" tag ."}{"node_name": "TAG_MIN_SAMPLE_VALUE", "type": "field", "idx": 48804, "Desc": "constant specifying the \" min_sample_value \" tag ."}{"node_name": "TAG_MAX_SAMPLE_VALUE", "type": "field", "idx": 48805, "Desc": "constant specifying the \" max_sample_value \" tag ."}{"node_name": "TAG_X_RESOLUTION", "type": "field", "idx": 48806, "Desc": "constant specifying the \" xresolution \" tag ."}{"node_name": "TAG_Y_RESOLUTION", "type": "field", "idx": 48807, "Desc": "constant specifying the \" yresolution \" tag ."}{"node_name": "TAG_PLANAR_CONFIGURATION", "type": "field", "idx": 48808, "Desc": "constant specifying the \" planarconfiguration \" tag ."}{"node_name": "PLANAR_CONFIGURATION_CHUNKY", "type": "field", "idx": 48809, "Desc": "a value to be used with the \" planarconfiguration \" tag ."}{"node_name": "PLANAR_CONFIGURATION_PLANAR", "type": "field", "idx": 48810, "Desc": "a value to be used with the \" planarconfiguration \" tag ."}{"node_name": "TAG_PAGE_NAME", "type": "field", "idx": 48811, "Desc": "constant specifying the \" pagename \" tag ."}{"node_name": "TAG_X_POSITION", "type": "field", "idx": 48812, "Desc": "constant specifying the \" xposition \" tag ."}{"node_name": "TAG_Y_POSITION", "type": "field", "idx": 48813, "Desc": "constant specifying the \" yposition \" tag ."}{"node_name": "TAG_FREE_OFFSETS", "type": "field", "idx": 48814, "Desc": "constant specifying the \" freeoffsets \" tag ."}{"node_name": "TAG_FREE_BYTE_COUNTS", "type": "field", "idx": 48815, "Desc": "constant specifying the \" freebytecounts \" tag ."}{"node_name": "TAG_GRAY_RESPONSE_UNIT", "type": "field", "idx": 48816, "Desc": "constant specifying the \" grayresponseunit \" tag ."}{"node_name": "GRAY_RESPONSE_UNIT_TENTHS", "type": "field", "idx": 48817, "Desc": "a value to be used with the \" grayresponseunit \" tag ."}{"node_name": "GRAY_RESPONSE_UNIT_HUNDREDTHS", "type": "field", "idx": 48818, "Desc": "a value to be used with the \" grayresponseunit \" tag ."}{"node_name": "GRAY_RESPONSE_UNIT_THOUSANDTHS", "type": "field", "idx": 48819, "Desc": "a value to be used with the \" grayresponseunit \" tag ."}{"node_name": "GRAY_RESPONSE_UNIT_TEN_THOUSANDTHS", "type": "field", "idx": 48820, "Desc": "a value to be used with the \" grayresponseunit \" tag ."}{"node_name": "GRAY_RESPONSE_UNIT_HUNDRED_THOUSANDTHS", "type": "field", "idx": 48821, "Desc": "a value to be used with the \" grayresponseunit \" tag ."}{"node_name": "TAG_GRAY_RESPONSE_CURVE", "type": "field", "idx": 48822, "Desc": "constant specifying the \" grayresponsecurve \" tag ."}{"node_name": "TAG_T4_OPTIONS", "type": "field", "idx": 48823, "Desc": "constant specifying the \" t4options \" tag ."}{"node_name": "T4_OPTIONS_2D_CODING", "type": "field", "idx": 48824, "Desc": "a mask to be used with the \" t4options \" tag ."}{"node_name": "T4_OPTIONS_UNCOMPRESSED", "type": "field", "idx": 48825, "Desc": "a mask to be used with the \" t4options \" tag ."}{"node_name": "T4_OPTIONS_EOL_BYTE_ALIGNED", "type": "field", "idx": 48826, "Desc": "a mask to be used with the \" t4options \" tag ."}{"node_name": "TAG_T6_OPTIONS", "type": "field", "idx": 48827, "Desc": "constant specifying the \" t6options \" tag ."}{"node_name": "T6_OPTIONS_UNCOMPRESSED", "type": "field", "idx": 48828, "Desc": "a mask to be used with the \" t6options \" tag ."}{"node_name": "TAG_RESOLUTION_UNIT", "type": "field", "idx": 48829, "Desc": "constant specifying the \" resolutionunit \" tag ."}{"node_name": "RESOLUTION_UNIT_NONE", "type": "field", "idx": 48830, "Desc": "a value to be used with the \" resolutionunit \" tag ."}{"node_name": "RESOLUTION_UNIT_INCH", "type": "field", "idx": 48831, "Desc": "a value to be used with the \" resolutionunit \" tag ."}{"node_name": "RESOLUTION_UNIT_CENTIMETER", "type": "field", "idx": 48832, "Desc": "a value to be used with the \" resolutionunit \" tag ."}{"node_name": "TAG_PAGE_NUMBER", "type": "field", "idx": 48833, "Desc": "constant specifying the \" pagenumber \" tag ."}{"node_name": "TAG_TRANSFER_FUNCTION", "type": "field", "idx": 48834, "Desc": "constant specifying the \" transferfunction \" tag ."}{"node_name": "TAG_SOFTWARE", "type": "field", "idx": 48835, "Desc": "constant specifying the \" software \" tag ."}{"node_name": "TAG_DATE_TIME", "type": "field", "idx": 48836, "Desc": "constant specifying the \" datetime \" tag ."}{"node_name": "TAG_ARTIST", "type": "field", "idx": 48837, "Desc": "constant specifying the \" artist \" tag ."}{"node_name": "TAG_HOST_COMPUTER", "type": "field", "idx": 48838, "Desc": "constant specifying the \" hostcomputer \" tag ."}{"node_name": "TAG_PREDICTOR", "type": "field", "idx": 48839, "Desc": "constant specifying the \" predictor \" tag ."}{"node_name": "PREDICTOR_NONE", "type": "field", "idx": 48840, "Desc": "a value to be used with the \" predictor \" tag ."}{"node_name": "PREDICTOR_HORIZONTAL_DIFFERENCING", "type": "field", "idx": 48841, "Desc": "a value to be used with the \" predictor \" tag ."}{"node_name": "TAG_WHITE_POINT", "type": "field", "idx": 48842, "Desc": "constant specifying the \" whitepoint \" tag ."}{"node_name": "TAG_PRIMARY_CHROMATICITES", "type": "field", "idx": 48843, "Desc": "constant specifying the \" primarychromaticites \" tag ."}{"node_name": "TAG_COLOR_MAP", "type": "field", "idx": 48844, "Desc": "constant specifying the \" colormap \" tag ."}{"node_name": "TAG_HALFTONE_HINTS", "type": "field", "idx": 48845, "Desc": "constant specifying the \" halftonehints \" tag ."}{"node_name": "TAG_TILE_WIDTH", "type": "field", "idx": 48846, "Desc": "constant specifying the \" tilewidth \" tag ."}{"node_name": "TAG_TILE_LENGTH", "type": "field", "idx": 48847, "Desc": "constant specifying the \" tilelength \" tag ."}{"node_name": "TAG_TILE_OFFSETS", "type": "field", "idx": 48848, "Desc": "constant specifying the \" tileoffsets \" tag ."}{"node_name": "TAG_TILE_BYTE_COUNTS", "type": "field", "idx": 48849, "Desc": "constant specifying the \" tilebytecounts \" tag ."}{"node_name": "TAG_INK_SET", "type": "field", "idx": 48850, "Desc": "constant specifying the \" inkset \" tag ."}{"node_name": "INK_SET_CMYK", "type": "field", "idx": 48851, "Desc": "a value to be used with the \" inkset \" tag ."}{"node_name": "INK_SET_NOT_CMYK", "type": "field", "idx": 48852, "Desc": "a value to be used with the \" inkset \" tag ."}{"node_name": "TAG_INK_NAMES", "type": "field", "idx": 48853, "Desc": "constant specifying the \" inknames \" tag ."}{"node_name": "TAG_NUMBER_OF_INKS", "type": "field", "idx": 48854, "Desc": "constant specifying the \" numberofinks \" tag ."}{"node_name": "TAG_DOT_RANGE", "type": "field", "idx": 48855, "Desc": "constant specifying the \" dotrange \" tag ."}{"node_name": "TAG_TARGET_PRINTER", "type": "field", "idx": 48856, "Desc": "constant specifying the \" targetprinter \" tag ."}{"node_name": "TAG_EXTRA_SAMPLES", "type": "field", "idx": 48857, "Desc": "constant specifying the \" extrasamples \" tag ."}{"node_name": "EXTRA_SAMPLES_UNSPECIFIED", "type": "field", "idx": 48858, "Desc": "a value to be used with the \" extrasamples \" tag ."}{"node_name": "EXTRA_SAMPLES_ASSOCIATED_ALPHA", "type": "field", "idx": 48859, "Desc": "a value to be used with the \" extrasamples \" tag ."}{"node_name": "EXTRA_SAMPLES_UNASSOCIATED_ALPHA", "type": "field", "idx": 48860, "Desc": "a value to be used with the \" extrasamples \" tag ."}{"node_name": "TAG_SAMPLE_FORMAT", "type": "field", "idx": 48861, "Desc": "constant specifying the \" sampleformat \" tag ."}{"node_name": "SAMPLE_FORMAT_UNSIGNED_INTEGER", "type": "field", "idx": 48862, "Desc": "a value to be used with the \" sampleformat \" tag ."}{"node_name": "SAMPLE_FORMAT_SIGNED_INTEGER", "type": "field", "idx": 48863, "Desc": "a value to be used with the \" sampleformat \" tag ."}{"node_name": "SAMPLE_FORMAT_FLOATING_POINT", "type": "field", "idx": 48864, "Desc": "a value to be used with the \" sampleformat \" tag ."}{"node_name": "SAMPLE_FORMAT_UNDEFINED", "type": "field", "idx": 48865, "Desc": "a value to be used with the \" sampleformat \" tag ."}{"node_name": "TAG_S_MIN_SAMPLE_VALUE", "type": "field", "idx": 48866, "Desc": "constant specifying the \" sminsamplevalue \" tag ."}{"node_name": "TAG_S_MAX_SAMPLE_VALUE", "type": "field", "idx": 48867, "Desc": "constant specifying the \" smaxsamplevalue \" tag ."}{"node_name": "TAG_TRANSFER_RANGE", "type": "field", "idx": 48868, "Desc": "constant specifying the \" transferrange \" tag ."}{"node_name": "TAG_JPEG_TABLES", "type": "field", "idx": 48869, "Desc": "constant specifying the \" jpegtables \" tag for \" new style \" jpeg-in-tiff compression ."}{"node_name": "TAG_JPEG_PROC", "type": "field", "idx": 48870, "Desc": "constant specifying the \" jpegproc \" tag ."}{"node_name": "JPEG_PROC_BASELINE", "type": "field", "idx": 48871, "Desc": "a value to be used with the \" jpegproc \" tag ."}{"node_name": "JPEG_PROC_LOSSLESS", "type": "field", "idx": 48872, "Desc": "a value to be used with the \" jpegproc \" tag ."}{"node_name": "TAG_JPEG_INTERCHANGE_FORMAT", "type": "field", "idx": 48873, "Desc": "constant specifying the \" jpeginterchangeformat \" tag ."}{"node_name": "TAG_JPEG_INTERCHANGE_FORMAT_LENGTH", "type": "field", "idx": 48874, "Desc": "constant specifying the \" jpeginterchangeformatlength \" tag ."}{"node_name": "TAG_JPEG_RESTART_INTERVAL", "type": "field", "idx": 48875, "Desc": "constant specifying the \" jpegrestartinterval \" tag ."}{"node_name": "TAG_JPEG_LOSSLESS_PREDICTORS", "type": "field", "idx": 48876, "Desc": "constant specifying the \" jpeglosslesspredictors \" tag ."}{"node_name": "TAG_JPEG_POINT_TRANSFORMS", "type": "field", "idx": 48877, "Desc": "constant specifying the \" jpegpointtransforms \" tag ."}{"node_name": "TAG_JPEG_Q_TABLES", "type": "field", "idx": 48878, "Desc": "constant specifying the \" jpegqtables \" tag ."}{"node_name": "TAG_JPEG_DC_TABLES", "type": "field", "idx": 48879, "Desc": "constant specifying the \" jpegdctables \" tag ."}{"node_name": "TAG_JPEG_AC_TABLES", "type": "field", "idx": 48880, "Desc": "constant specifying the \" jpegactables \" tag ."}{"node_name": "TAG_Y_CB_CR_COEFFICIENTS", "type": "field", "idx": 48881, "Desc": "constant specifying the \" ycbcrcoefficients \" tag ."}{"node_name": "TAG_Y_CB_CR_SUBSAMPLING", "type": "field", "idx": 48882, "Desc": "constant specifying the \" ycbcrsubsampling \" tag ."}{"node_name": "TAG_Y_CB_CR_POSITIONING", "type": "field", "idx": 48883, "Desc": "constant specifying the \" ycbcrpositioning \" tag ."}{"node_name": "Y_CB_CR_POSITIONING_CENTERED", "type": "field", "idx": 48884, "Desc": "a value to be used with the \" ycbcrpositioning \" tag ."}{"node_name": "Y_CB_CR_POSITIONING_COSITED", "type": "field", "idx": 48885, "Desc": "a value to be used with the \" ycbcrpositioning \" tag ."}{"node_name": "TAG_REFERENCE_BLACK_WHITE", "type": "field", "idx": 48886, "Desc": "constant specifying the \" referenceblackwhite \" tag ."}{"node_name": "TAG_COPYRIGHT", "type": "field", "idx": 48887, "Desc": "constant specifying the \" copyright \" tag ."}{"node_name": "TAG_ICC_PROFILE", "type": "field", "idx": 48888, "Desc": "constant specifying the \" icc profile \" tag ."}{"node_name": "TAG_GPS_VERSION_ID", "type": "field", "idx": 48891, "Desc": "a tag indicating the gps tag version ( type byte , count = 4 ) ."}{"node_name": "GPS_VERSION_2_2", "type": "field", "idx": 48892, "Desc": "a value to be used with the \" gpsversionid \" tag to indicate gps version 2.2 . the value equals the us-ascii encoding of the byte array { ' 2 ' , ' 2 ' , ' 0 ' , ' 0 ' } ."}{"node_name": "TAG_GPS_LATITUDE_REF", "type": "field", "idx": 48893, "Desc": "a tag indicating the north or south latitude ( type ascii , count = 2 ) ."}{"node_name": "TAG_GPS_LATITUDE", "type": "field", "idx": 48894, "Desc": "a tag indicating the latitude ( type rational , count = 3 ) ."}{"node_name": "TAG_GPS_LONGITUDE_REF", "type": "field", "idx": 48895, "Desc": "a tag indicating the east or west longitude ( type ascii , count = 2 ) ."}{"node_name": "TAG_GPS_LONGITUDE", "type": "field", "idx": 48896, "Desc": "a tag indicating the longitude ( type rational , count = 3 ) ."}{"node_name": "TAG_GPS_ALTITUDE_REF", "type": "field", "idx": 48897, "Desc": "a tag indicating the altitude reference ( type byte , count = 1 );"}{"node_name": "TAG_GPS_ALTITUDE", "type": "field", "idx": 48898, "Desc": "a tag indicating the altitude ( type rational , count = 1 ) ."}{"node_name": "TAG_GPS_TIME_STAMP", "type": "field", "idx": 48899, "Desc": "a tag indicating the gps time ( atomic clock ) ( type rational , count = 3 ) ."}{"node_name": "TAG_GPS_SATELLITES", "type": "field", "idx": 48900, "Desc": "a tag indicating the gps satellites used for measurement ( type ascii ) ."}{"node_name": "TAG_GPS_STATUS", "type": "field", "idx": 48901, "Desc": "a tag indicating the gps receiver status ( type ascii , count = 2 ) ."}{"node_name": "TAG_GPS_MEASURE_MODE", "type": "field", "idx": 48902, "Desc": "a tag indicating the gps measurement mode ( type ascii , count = 2 ) ."}{"node_name": "TAG_GPS_DOP", "type": "field", "idx": 48903, "Desc": "a tag indicating the measurement precision ( type rational , count = 1 ) ."}{"node_name": "TAG_GPS_SPEED_REF", "type": "field", "idx": 48904, "Desc": "a tag indicating the speed unit ( type ascii , count = 2 ) ."}{"node_name": "TAG_GPS_SPEED", "type": "field", "idx": 48905, "Desc": "a tag indicating the speed of gps receiver ( type rational , count = 1 ) ."}{"node_name": "TAG_GPS_TRACK_REF", "type": "field", "idx": 48906, "Desc": "a tag indicating the reference for direction of movement ( type ascii , count = 2 ) ."}{"node_name": "TAG_GPS_TRACK", "type": "field", "idx": 48907, "Desc": "a tag indicating the direction of movement ( type rational , count = 1 ) ."}{"node_name": "TAG_GPS_IMG_DIRECTION_REF", "type": "field", "idx": 48908, "Desc": "a tag indicating the reference for direction of image ( type ascii , count = 2 ) ."}{"node_name": "TAG_GPS_IMG_DIRECTION", "type": "field", "idx": 48909, "Desc": "a tag indicating the direction of image ( type rational , count = 1 ) ."}{"node_name": "TAG_GPS_MAP_DATUM", "type": "field", "idx": 48910, "Desc": "a tag indicating the geodetic survey data used ( type ascii ) ."}{"node_name": "TAG_GPS_DEST_LATITUDE_REF", "type": "field", "idx": 48911, "Desc": "a tag indicating the reference for latitude of destination ( type ascii , count = 2 ) ."}{"node_name": "TAG_GPS_DEST_LATITUDE", "type": "field", "idx": 48912, "Desc": "a tag indicating the latitude of destination ( type rational , count = 3 ) ."}{"node_name": "TAG_GPS_DEST_LONGITUDE_REF", "type": "field", "idx": 48913, "Desc": "a tag indicating the reference for longitude of destination ( type ascii , count = 2 ) ."}{"node_name": "TAG_GPS_DEST_LONGITUDE", "type": "field", "idx": 48914, "Desc": "a tag indicating the longitude of destination ( type rational , count = 3 ) ."}{"node_name": "TAG_GPS_DEST_BEARING_REF", "type": "field", "idx": 48915, "Desc": "a tag indicating the reference for bearing of destination ( type ascii , count = 2 ) ."}{"node_name": "TAG_GPS_DEST_BEARING", "type": "field", "idx": 48916, "Desc": "a tag indicating the bearing of destination ( type rational , count = 1 ) ."}{"node_name": "TAG_GPS_DEST_DISTANCE_REF", "type": "field", "idx": 48917, "Desc": "a tag indicating the reference for distance to destination ( type ascii , count = 2 ) ."}{"node_name": "TAG_GPS_DEST_DISTANCE", "type": "field", "idx": 48918, "Desc": "a tag indicating the distance to destination ( type rational , count = 1 ) ."}{"node_name": "TAG_GPS_PROCESSING_METHOD", "type": "field", "idx": 48919, "Desc": "a tag indicating the name of gps processing method ( type undefined ) ."}{"node_name": "TAG_GPS_AREA_INFORMATION", "type": "field", "idx": 48920, "Desc": "a tag indicating the name of gps area ( type undefined ) ."}{"node_name": "TAG_GPS_DATE_STAMP", "type": "field", "idx": 48921, "Desc": "a tag indicating the gps date ( type ascii , count 11 ) ."}{"node_name": "TAG_GPS_DIFFERENTIAL", "type": "field", "idx": 48922, "Desc": "a tag indicating the gps differential correction ( type short , count = 1 ) ."}{"node_name": "LATITUDE_REF_NORTH", "type": "field", "idx": 48923, "Desc": "a value to be used with the \" gpslatituderef \" and \" gpsdestlatituderef \" tags ."}{"node_name": "LATITUDE_REF_SOUTH", "type": "field", "idx": 48924, "Desc": "a value to be used with the \" gpslatituderef \" and \" gpsdestlatituderef \" tags ."}{"node_name": "LONGITUDE_REF_EAST", "type": "field", "idx": 48925, "Desc": "a value to be used with the \" gpslongituderef \" and \" gpsdestlongituderef \" tags ."}{"node_name": "LONGITUDE_REF_WEST", "type": "field", "idx": 48926, "Desc": "a value to be used with the \" gpslongituderef \" and \" gpsdestlongituderef \" tags ."}{"node_name": "ALTITUDE_REF_SEA_LEVEL", "type": "field", "idx": 48927, "Desc": "a value to be used with the \" gpsaltituderef \" tag ."}{"node_name": "ALTITUDE_REF_SEA_LEVEL_REFERENCE", "type": "field", "idx": 48928, "Desc": "a value to be used with the \" gpsaltituderef \" tag ."}{"node_name": "STATUS_MEASUREMENT_IN_PROGRESS", "type": "field", "idx": 48929, "Desc": "a value to be used with the \" gpsstatus \" tag ."}{"node_name": "STATUS_MEASUREMENT_INTEROPERABILITY", "type": "field", "idx": 48930, "Desc": "a value to be used with the \" gpsstatus \" tag ."}{"node_name": "MEASURE_MODE_2D", "type": "field", "idx": 48931, "Desc": "a value to be used with the \" gpsmeasuremode \" tag ."}{"node_name": "MEASURE_MODE_3D", "type": "field", "idx": 48932, "Desc": "a value to be used with the \" gpsmeasuremode \" tag ."}{"node_name": "SPEED_REF_KILOMETERS_PER_HOUR", "type": "field", "idx": 48933, "Desc": "a value to be used with the \" gpsspeedref \" tag ."}{"node_name": "SPEED_REF_MILES_PER_HOUR", "type": "field", "idx": 48934, "Desc": "a value to be used with the \" gpsspeedref \" tag ."}{"node_name": "SPEED_REF_KNOTS", "type": "field", "idx": 48935, "Desc": "a value to be used with the \" gpsspeedref \" tag ."}{"node_name": "DIRECTION_REF_TRUE", "type": "field", "idx": 48936, "Desc": "a value to be used with the \" gpstrackref \" , \" gpsimgdirectionref \" , and \" gpsdestbearingref \" tags ."}{"node_name": "DIRECTION_REF_MAGNETIC", "type": "field", "idx": 48937, "Desc": "a value to be used with the \" gpstrackref \" , \" gpsimgdirectionref \" , and \" gpsdestbearingref \" tags ."}{"node_name": "DEST_DISTANCE_REF_KILOMETERS", "type": "field", "idx": 48938, "Desc": "a value to be used with the \" gpsdestdistanceref \" tag ."}{"node_name": "DEST_DISTANCE_REF_MILES", "type": "field", "idx": 48939, "Desc": "a value to be used with the \" gpsdestdistanceref \" tag ."}{"node_name": "DEST_DISTANCE_REF_KNOTS", "type": "field", "idx": 48940, "Desc": "a value to be used with the \" gpsdestdistanceref \" tag ."}{"node_name": "DIFFERENTIAL_CORRECTION_NONE", "type": "field", "idx": 48941, "Desc": "a value to be used with the \" gpsdifferential \" tag ."}{"node_name": "DIFFERENTIAL_CORRECTION_APPLIED", "type": "field", "idx": 48942, "Desc": "a value to be used with the \" gpsdifferential \" tag ."}{"node_name": "TAG_INTEROPERABILITY_INDEX", "type": "field", "idx": 48945, "Desc": "a tag indicating the identification of the interoperability rule ( type ascii ) ."}{"node_name": "INTEROPERABILITY_INDEX_R98", "type": "field", "idx": 48946, "Desc": "a value to be used with the \" interoperabilityindex \" tag . indicates a file conforming to the r98 file specification of recommended exif interoperability rules ( exifr98 ) or to the dcf basic file stipulated by the design rule for camera file system ( type ascii ) ."}{"node_name": "INTEROPERABILITY_INDEX_THM", "type": "field", "idx": 48947, "Desc": "a value to be used with the \" interoperabilityindex \" tag . indicates a file conforming to the dcf thumbnail file stipulated by the design rule for camera file system ( type ascii ) ."}{"node_name": "TAG_EXIF_IFD_POINTER", "type": "field", "idx": 48950, "Desc": "tag pointing to the exif ifd ( type long ) ."}{"node_name": "TAG_GPS_INFO_IFD_POINTER", "type": "field", "idx": 48951, "Desc": "tag pointing to a gps info ifd ( type long ) ."}{"node_name": "TAG_GPS_INFO_IFD_POINTER", "type": "field", "idx": 48954, "Desc": "a tag pointing to a gps info ifd ( type long ) . this tag has been superseded by exifparenttifftagset.tag_gps_info_ifd_pointer ."}{"node_name": "TAG_INTEROPERABILITY_IFD_POINTER", "type": "field", "idx": 48955, "Desc": "a tag pointing to an interoperability ifd ( type long ) ."}{"node_name": "TAG_EXIF_VERSION", "type": "field", "idx": 48956, "Desc": "a tag containing the exif version number ( type undefined , count = 4 ) . conformance to the exif 2.1 standard is indicated using the ascii value \" 0210 \" ( with no terminating nul ) ."}{"node_name": "EXIF_VERSION_2_1", "type": "field", "idx": 48957, "Desc": "a value to be used with the \" exifversion \" tag to indicate exif version 2.1 . the value equals the us-ascii encoding of the byte array { ' 0 ' , ' 2 ' , ' 1 ' , ' 0 ' } ."}{"node_name": "EXIF_VERSION_2_2", "type": "field", "idx": 48958, "Desc": "a value to be used with the \" exifversion \" tag to indicate exif version 2.2 . the value equals the us-ascii encoding of the byte array { ' 0 ' , ' 2 ' , ' 2 ' , ' 0 ' } ."}{"node_name": "TAG_FLASHPIX_VERSION", "type": "field", "idx": 48959, "Desc": "a tag indicating the flashpix version number ( type undefined , count = 4 ) ."}{"node_name": "TAG_COLOR_SPACE", "type": "field", "idx": 48960, "Desc": "a tag indicating the color space information ( type short ) . the legal values are given by the color_space_* constants ."}{"node_name": "COLOR_SPACE_SRGB", "type": "field", "idx": 48961, "Desc": "a value to be used with the \" colorspace \" tag ."}{"node_name": "COLOR_SPACE_UNCALIBRATED", "type": "field", "idx": 48962, "Desc": "a value to be used with the \" colorspace \" tag ."}{"node_name": "TAG_COMPONENTS_CONFIGURATION", "type": "field", "idx": 48963, "Desc": "a tag containing the components configuration information ( type undefined , count = 4 ) ."}{"node_name": "COMPONENTS_CONFIGURATION_DOES_NOT_EXIST", "type": "field", "idx": 48964, "Desc": "a value to be used with the \" componentsconfiguration \" tag ."}{"node_name": "COMPONENTS_CONFIGURATION_Y", "type": "field", "idx": 48965, "Desc": "a value to be used with the \" componentsconfiguration \" tag ."}{"node_name": "COMPONENTS_CONFIGURATION_CB", "type": "field", "idx": 48966, "Desc": "a value to be used with the \" componentsconfiguration \" tag ."}{"node_name": "COMPONENTS_CONFIGURATION_CR", "type": "field", "idx": 48967, "Desc": "a value to be used with the \" componentsconfiguration \" tag ."}{"node_name": "COMPONENTS_CONFIGURATION_R", "type": "field", "idx": 48968, "Desc": "a value to be used with the \" componentsconfiguration \" tag ."}{"node_name": "COMPONENTS_CONFIGURATION_G", "type": "field", "idx": 48969, "Desc": "a value to be used with the \" componentsconfiguration \" tag ."}{"node_name": "COMPONENTS_CONFIGURATION_B", "type": "field", "idx": 48970, "Desc": "a value to be used with the \" componentsconfiguration \" tag ."}{"node_name": "TAG_COMPRESSED_BITS_PER_PIXEL", "type": "field", "idx": 48971, "Desc": "a tag indicating the number of compressed bits per pixel ( type rational ) ."}{"node_name": "TAG_PIXEL_X_DIMENSION", "type": "field", "idx": 48972, "Desc": "a tag indicating the pixel x dimension ( type short or long ) . this value records the valid width of the meaningful image for a compressed file , whether or not there is padding or a restart marker ."}{"node_name": "TAG_PIXEL_Y_DIMENSION", "type": "field", "idx": 48973, "Desc": "a tag indicating the pixel y dimension ( type short or long ) . this value records the valid height of the meaningful image for a compressed file , whether or not there is padding or a restart marker ."}{"node_name": "TAG_MAKER_NOTE", "type": "field", "idx": 48974, "Desc": "a tag indicating a manufacturer-defined maker note ( type undefined ) ."}{"node_name": "TAG_MARKER_NOTE", "type": "field", "idx": 48975, "Desc": "a tag indicating a manufacturer-defined marker note ( type undefined ) . this tag has been superseded by tag_maker_note ."}{"node_name": "TAG_USER_COMMENT", "type": "field", "idx": 48976, "Desc": "a tag indicating a user comment ( type undefined ) . the first 8 bytes are used to specify the character encoding ."}{"node_name": "TAG_RELATED_SOUND_FILE", "type": "field", "idx": 48977, "Desc": "a tag indicating the name of a related sound file ( type ascii ) ."}{"node_name": "TAG_DATE_TIME_ORIGINAL", "type": "field", "idx": 48978, "Desc": "a tag indicating the date and time when the original image was generated ( type ascii ) ."}{"node_name": "TAG_DATE_TIME_DIGITIZED", "type": "field", "idx": 48979, "Desc": "a tag indicating the date and time when the image was stored as digital data ( type ascii ) ."}{"node_name": "TAG_SUB_SEC_TIME", "type": "field", "idx": 48980, "Desc": "a tag used to record fractions of seconds for the \" datetime \" tag ( type ascii ) ."}{"node_name": "TAG_SUB_SEC_TIME_ORIGINAL", "type": "field", "idx": 48981, "Desc": "a tag used to record fractions of seconds for the \" datetimeoriginal \" tag ( type ascii ) ."}{"node_name": "TAG_SUB_SEC_TIME_DIGITIZED", "type": "field", "idx": 48982, "Desc": "a tag used to record fractions of seconds for the \" datetimedigitized \" tag ( type ascii ) ."}{"node_name": "TAG_EXPOSURE_TIME", "type": "field", "idx": 48983, "Desc": "a tag indicating the exposure time , in seconds ( type rational ) ."}{"node_name": "TAG_F_NUMBER", "type": "field", "idx": 48984, "Desc": "a tag indicating the f number ( type rational ) ."}{"node_name": "TAG_EXPOSURE_PROGRAM", "type": "field", "idx": 48985, "Desc": "a tag indicating the class of the programs used to set exposure when the picture was taken ( type short ) ."}{"node_name": "EXPOSURE_PROGRAM_NOT_DEFINED", "type": "field", "idx": 48986, "Desc": "a value to be used with the \" exposureprogram \" tag ."}{"node_name": "EXPOSURE_PROGRAM_MANUAL", "type": "field", "idx": 48987, "Desc": "a value to be used with the \" exposureprogram \" tag ."}{"node_name": "EXPOSURE_PROGRAM_NORMAL_PROGRAM", "type": "field", "idx": 48988, "Desc": "a value to be used with the \" exposureprogram \" tag ."}{"node_name": "EXPOSURE_PROGRAM_APERTURE_PRIORITY", "type": "field", "idx": 48989, "Desc": "a value to be used with the \" exposureprogram \" tag ."}{"node_name": "EXPOSURE_PROGRAM_SHUTTER_PRIORITY", "type": "field", "idx": 48990, "Desc": "a value to be used with the \" exposureprogram \" tag ."}{"node_name": "EXPOSURE_PROGRAM_CREATIVE_PROGRAM", "type": "field", "idx": 48991, "Desc": "a value to be used with the \" exposureprogram \" tag ."}{"node_name": "EXPOSURE_PROGRAM_ACTION_PROGRAM", "type": "field", "idx": 48992, "Desc": "a value to be used with the \" exposureprogram \" tag ."}{"node_name": "EXPOSURE_PROGRAM_PORTRAIT_MODE", "type": "field", "idx": 48993, "Desc": "a value to be used with the \" exposureprogram \" tag ."}{"node_name": "EXPOSURE_PROGRAM_LANDSCAPE_MODE", "type": "field", "idx": 48994, "Desc": "a value to be used with the \" exposureprogram \" tag ."}{"node_name": "EXPOSURE_PROGRAM_MAX_RESERVED", "type": "field", "idx": 48995, "Desc": "a value to be used with the \" exposureprogram \" tag ."}{"node_name": "TAG_SPECTRAL_SENSITIVITY", "type": "field", "idx": 48996, "Desc": "a tag indicating the spectral sensitivity of each channel of the camera used ( type ascii ) . the tag value is an ascii string compatible with the astm standard ."}{"node_name": "TAG_ISO_SPEED_RATINGS", "type": "field", "idx": 48997, "Desc": "a tag indicating the iso speed and iso latitude of the camera or input device , as specified in iso 12232xiv ( type short ) ."}{"node_name": "TAG_OECF", "type": "field", "idx": 48998, "Desc": "a tag indicating the optoelectric conversion function , specified in iso 14254xv ( type undefined ) . oecf is the relationship between the camera optical input and the image values ."}{"node_name": "TAG_SHUTTER_SPEED_VALUE", "type": "field", "idx": 48999, "Desc": "a tag indicating the shutter speed ( type srational ) ."}{"node_name": "TAG_APERTURE_VALUE", "type": "field", "idx": 49000, "Desc": "a tag indicating the lens aperture ( type rational ) ."}{"node_name": "TAG_BRIGHTNESS_VALUE", "type": "field", "idx": 49001, "Desc": "a tag indicating the value of brightness ( type srational ) ."}{"node_name": "TAG_EXPOSURE_BIAS_VALUE", "type": "field", "idx": 49002, "Desc": "a tag indicating the exposure bias ( type srational ) ."}{"node_name": "TAG_MAX_APERTURE_VALUE", "type": "field", "idx": 49003, "Desc": "a tag indicating the smallest f number of the lens ( type rational ) ."}{"node_name": "TAG_SUBJECT_DISTANCE", "type": "field", "idx": 49004, "Desc": "a tag indicating the distance to the subject , in meters ( type rational ) ."}{"node_name": "TAG_METERING_MODE", "type": "field", "idx": 49005, "Desc": "a tag indicating the metering mode ( type short ) ."}{"node_name": "METERING_MODE_UNKNOWN", "type": "field", "idx": 49006, "Desc": "a value to be used with the \" meteringmode \" tag ."}{"node_name": "METERING_MODE_AVERAGE", "type": "field", "idx": 49007, "Desc": "a value to be used with the \" meteringmode \" tag ."}{"node_name": "METERING_MODE_CENTER_WEIGHTED_AVERAGE", "type": "field", "idx": 49008, "Desc": "a value to be used with the \" meteringmode \" tag ."}{"node_name": "METERING_MODE_SPOT", "type": "field", "idx": 49009, "Desc": "a value to be used with the \" meteringmode \" tag ."}{"node_name": "METERING_MODE_MULTI_SPOT", "type": "field", "idx": 49010, "Desc": "a value to be used with the \" meteringmode \" tag ."}{"node_name": "METERING_MODE_PATTERN", "type": "field", "idx": 49011, "Desc": "a value to be used with the \" meteringmode \" tag ."}{"node_name": "METERING_MODE_PARTIAL", "type": "field", "idx": 49012, "Desc": "a value to be used with the \" meteringmode \" tag ."}{"node_name": "METERING_MODE_MIN_RESERVED", "type": "field", "idx": 49013, "Desc": "a value to be used with the \" meteringmode \" tag ."}{"node_name": "METERING_MODE_MAX_RESERVED", "type": "field", "idx": 49014, "Desc": "a value to be used with the \" meteringmode \" tag ."}{"node_name": "METERING_MODE_OTHER", "type": "field", "idx": 49015, "Desc": "a value to be used with the \" meteringmode \" tag ."}{"node_name": "TAG_LIGHT_SOURCE", "type": "field", "idx": 49016, "Desc": "a tag indicatingthe kind of light source ( type short ) ."}{"node_name": "LIGHT_SOURCE_UNKNOWN", "type": "field", "idx": 49017, "Desc": "a value to be used with the \" lightsource \" tag ."}{"node_name": "LIGHT_SOURCE_DAYLIGHT", "type": "field", "idx": 49018, "Desc": "a value to be used with the \" lightsource \" tag ."}{"node_name": "LIGHT_SOURCE_FLUORESCENT", "type": "field", "idx": 49019, "Desc": "a value to be used with the \" lightsource \" tag ."}{"node_name": "LIGHT_SOURCE_TUNGSTEN", "type": "field", "idx": 49020, "Desc": "a value to be used with the \" lightsource \" tag ."}{"node_name": "LIGHT_SOURCE_FLASH", "type": "field", "idx": 49021, "Desc": "a value to be used with the \" lightsource \" tag ."}{"node_name": "LIGHT_SOURCE_FINE_WEATHER", "type": "field", "idx": 49022, "Desc": "a value to be used with the \" lightsource \" tag ."}{"node_name": "LIGHT_SOURCE_CLOUDY_WEATHER", "type": "field", "idx": 49023, "Desc": "a value to be used with the \" lightsource \" tag ."}{"node_name": "LIGHT_SOURCE_SHADE", "type": "field", "idx": 49024, "Desc": "a value to be used with the \" lightsource \" tag ."}{"node_name": "LIGHT_SOURCE_DAYLIGHT_FLUORESCENT", "type": "field", "idx": 49025, "Desc": "a value to be used with the \" lightsource \" tag ."}{"node_name": "LIGHT_SOURCE_DAY_WHITE_FLUORESCENT", "type": "field", "idx": 49026, "Desc": "a value to be used with the \" lightsource \" tag ."}{"node_name": "LIGHT_SOURCE_COOL_WHITE_FLUORESCENT", "type": "field", "idx": 49027, "Desc": "a value to be used with the \" lightsource \" tag ."}{"node_name": "LIGHT_SOURCE_WHITE_FLUORESCENT", "type": "field", "idx": 49028, "Desc": "a value to be used with the \" lightsource \" tag ."}{"node_name": "LIGHT_SOURCE_STANDARD_LIGHT_A", "type": "field", "idx": 49029, "Desc": "a value to be used with the \" lightsource \" tag ."}{"node_name": "LIGHT_SOURCE_STANDARD_LIGHT_B", "type": "field", "idx": 49030, "Desc": "a value to be used with the \" lightsource \" tag ."}{"node_name": "LIGHT_SOURCE_STANDARD_LIGHT_C", "type": "field", "idx": 49031, "Desc": "a value to be used with the \" lightsource \" tag ."}{"node_name": "LIGHT_SOURCE_D55", "type": "field", "idx": 49032, "Desc": "a value to be used with the \" lightsource \" tag ."}{"node_name": "LIGHT_SOURCE_D65", "type": "field", "idx": 49033, "Desc": "a value to be used with the \" lightsource \" tag ."}{"node_name": "LIGHT_SOURCE_D75", "type": "field", "idx": 49034, "Desc": "a value to be used with the \" lightsource \" tag ."}{"node_name": "LIGHT_SOURCE_D50", "type": "field", "idx": 49035, "Desc": "a value to be used with the \" lightsource \" tag ."}{"node_name": "LIGHT_SOURCE_ISO_STUDIO_TUNGSTEN", "type": "field", "idx": 49036, "Desc": "a value to be used with the \" lightsource \" tag ."}{"node_name": "LIGHT_SOURCE_OTHER", "type": "field", "idx": 49037, "Desc": "a value to be used with the \" lightsource \" tag ."}{"node_name": "TAG_FLASH", "type": "field", "idx": 49038, "Desc": "a tag indicating the flash firing status and flash return status ( type short ) ."}{"node_name": "FLASH_DID_NOT_FIRE", "type": "field", "idx": 49039, "Desc": "a value to be used with the \" flash \" tag , indicating that the flash did not fire ."}{"node_name": "FLASH_FIRED", "type": "field", "idx": 49040, "Desc": "a value to be used with the \" flash \" tag , indicating that the flash fired , but the strobe return status is unknown ."}{"node_name": "FLASH_STROBE_RETURN_LIGHT_NOT_DETECTED", "type": "field", "idx": 49041, "Desc": "a value to be used with the \" flash \" tag , indicating that the flash fired , but the strobe return light was not detected ."}{"node_name": "FLASH_STROBE_RETURN_LIGHT_DETECTED", "type": "field", "idx": 49042, "Desc": "a value to be used with the \" flash \" tag , indicating that the flash fired , and the strobe return light was detected ."}{"node_name": "FLASH_MASK_FIRED", "type": "field", "idx": 49043, "Desc": "a mask to be used with the \" flash \" tag , indicating that the flash fired ."}{"node_name": "FLASH_MASK_RETURN_NOT_DETECTED", "type": "field", "idx": 49044, "Desc": "a mask to be used with the \" flash \" tag , indicating strobe return light not detected ."}{"node_name": "FLASH_MASK_RETURN_DETECTED", "type": "field", "idx": 49045, "Desc": "a mask to be used with the \" flash \" tag , indicating strobe return light detected ."}{"node_name": "FLASH_MASK_MODE_FLASH_FIRING", "type": "field", "idx": 49046, "Desc": "a mask to be used with the \" flash \" tag , indicating compulsory flash firing mode ."}{"node_name": "FLASH_MASK_MODE_FLASH_SUPPRESSION", "type": "field", "idx": 49047, "Desc": "a mask to be used with the \" flash \" tag , indicating compulsory flash suppression mode ."}{"node_name": "FLASH_MASK_MODE_AUTO", "type": "field", "idx": 49048, "Desc": "a mask to be used with the \" flash \" tag , indicating auto mode ."}{"node_name": "FLASH_MASK_FUNCTION_NOT_PRESENT", "type": "field", "idx": 49049, "Desc": "a mask to be used with the \" flash \" tag , indicating no flash function present ."}{"node_name": "FLASH_MASK_RED_EYE_REDUCTION", "type": "field", "idx": 49050, "Desc": "a mask to be used with the \" flash \" tag , indicating red-eye reduction supported ."}{"node_name": "TAG_FOCAL_LENGTH", "type": "field", "idx": 49051, "Desc": "a tag indicating the actual focal length of the lens , in millimeters ( type rational ) ."}{"node_name": "TAG_SUBJECT_AREA", "type": "field", "idx": 49052, "Desc": "a tag indicating the location and area of the main subject in the overall scene ."}{"node_name": "TAG_FLASH_ENERGY", "type": "field", "idx": 49053, "Desc": "a tag indicating the strobe energy at the time the image was captured , as measured in beam candle power seconds ( bcps ) ( type rational ) ."}{"node_name": "TAG_SPATIAL_FREQUENCY_RESPONSE", "type": "field", "idx": 49054, "Desc": "a tag indicating the camera or input device spatial frequency table and sfr values in the direction of image width , image height , and diagonal direction , as specified in iso 12233xvi ( type undefined ) ."}{"node_name": "TAG_FOCAL_PLANE_X_RESOLUTION", "type": "field", "idx": 49055, "Desc": "indicates the number of pixels in the image width ( x ) direction per focalplaneresolutionunit on the camera focal plane ( type rational ) ."}{"node_name": "TAG_FOCAL_PLANE_Y_RESOLUTION", "type": "field", "idx": 49056, "Desc": "indicate the number of pixels in the image height ( y ) direction per focalplaneresolutionunit on the camera focal plane ( type rational ) ."}{"node_name": "TAG_FOCAL_PLANE_RESOLUTION_UNIT", "type": "field", "idx": 49057, "Desc": "indicates the unit for measuring focalplanexresolution and focalplaneyresolution ( type short ) ."}{"node_name": "FOCAL_PLANE_RESOLUTION_UNIT_NONE", "type": "field", "idx": 49058, "Desc": "a value to be used with the \" focalplaneresolutionunit \" tag ."}{"node_name": "FOCAL_PLANE_RESOLUTION_UNIT_INCH", "type": "field", "idx": 49059, "Desc": "a value to be used with the \" focalplanexresolution \" tag ."}{"node_name": "FOCAL_PLANE_RESOLUTION_UNIT_CENTIMETER", "type": "field", "idx": 49060, "Desc": "a value to be used with the \" focalplanexresolution \" tag ."}{"node_name": "TAG_SUBJECT_LOCATION", "type": "field", "idx": 49061, "Desc": "a tag indicating the column and row of the center pixel of the main subject in the scene ( type short , count = 2 ) ."}{"node_name": "TAG_EXPOSURE_INDEX", "type": "field", "idx": 49062, "Desc": "a tag indicating the exposure index selected on the camera or input device at the time the image was captured ( type rational ) ."}{"node_name": "TAG_SENSING_METHOD", "type": "field", "idx": 49063, "Desc": "a tag indicating the sensor type on the camera or input device ( type short ) ."}{"node_name": "SENSING_METHOD_NOT_DEFINED", "type": "field", "idx": 49064, "Desc": "a value to be used with the \" sensingmethod \" tag ."}{"node_name": "SENSING_METHOD_ONE_CHIP_COLOR_AREA_SENSOR", "type": "field", "idx": 49065, "Desc": "a value to be used with the \" sensingmethod \" tag ."}{"node_name": "SENSING_METHOD_TWO_CHIP_COLOR_AREA_SENSOR", "type": "field", "idx": 49066, "Desc": "a value to be used with the \" sensingmethod \" tag ."}{"node_name": "SENSING_METHOD_THREE_CHIP_COLOR_AREA_SENSOR", "type": "field", "idx": 49067, "Desc": "a value to be used with the \" sensingmethod \" tag ."}{"node_name": "SENSING_METHOD_COLOR_SEQUENTIAL_AREA_SENSOR", "type": "field", "idx": 49068, "Desc": "a value to be used with the \" sensingmethod \" tag ."}{"node_name": "SENSING_METHOD_TRILINEAR_SENSOR", "type": "field", "idx": 49069, "Desc": "a value to be used with the \" sensingmethod \" tag ."}{"node_name": "SENSING_METHOD_COLOR_SEQUENTIAL_LINEAR_SENSOR", "type": "field", "idx": 49070, "Desc": "a value to be used with the \" sensingmethod \" tag ."}{"node_name": "TAG_FILE_SOURCE", "type": "field", "idx": 49071, "Desc": "a tag indicating the image source ( type undefined ) ."}{"node_name": "FILE_SOURCE_DSC", "type": "field", "idx": 49072, "Desc": "a value to be used with the \" filesource \" tag ."}{"node_name": "TAG_SCENE_TYPE", "type": "field", "idx": 49073, "Desc": "a tag indicating the type of scene ( type undefined ) ."}{"node_name": "SCENE_TYPE_DSC", "type": "field", "idx": 49074, "Desc": "a value to be used with the \" scenetype \" tag ."}{"node_name": "TAG_CFA_PATTERN", "type": "field", "idx": 49075, "Desc": "a tag indicating the color filter array geometric pattern of the image sensor when a one-chip color area sensor if used ( type undefined ) ."}{"node_name": "TAG_CUSTOM_RENDERED", "type": "field", "idx": 49076, "Desc": "a tag indicating the use of special processing on image data , such as rendering geared to output ."}{"node_name": "CUSTOM_RENDERED_NORMAL", "type": "field", "idx": 49077, "Desc": "a value to be used with the \" customrendered \" tag ."}{"node_name": "CUSTOM_RENDERED_CUSTOM", "type": "field", "idx": 49078, "Desc": "a value to be used with the \" customrendered \" tag ."}{"node_name": "TAG_EXPOSURE_MODE", "type": "field", "idx": 49079, "Desc": "a tag indicating the exposure mode set when the image was shot ."}{"node_name": "EXPOSURE_MODE_AUTO_EXPOSURE", "type": "field", "idx": 49080, "Desc": "a value to be used with the \" exposuremode \" tag ."}{"node_name": "EXPOSURE_MODE_MANUAL_EXPOSURE", "type": "field", "idx": 49081, "Desc": "a value to be used with the \" exposuremode \" tag ."}{"node_name": "EXPOSURE_MODE_AUTO_BRACKET", "type": "field", "idx": 49082, "Desc": "a value to be used with the \" exposuremode \" tag ."}{"node_name": "TAG_WHITE_BALANCE", "type": "field", "idx": 49083, "Desc": "a tag indicating the white balance mode set when the image was shot ."}{"node_name": "WHITE_BALANCE_AUTO", "type": "field", "idx": 49084, "Desc": "a value to be used with the \" whitebalance \" tag ."}{"node_name": "WHITE_BALANCE_MANUAL", "type": "field", "idx": 49085, "Desc": "a value to be used with the \" whitebalance \" tag ."}{"node_name": "TAG_DIGITAL_ZOOM_RATIO", "type": "field", "idx": 49086, "Desc": "a tag indicating the digital zoom ratio when the image was shot ."}{"node_name": "TAG_FOCAL_LENGTH_IN_35MM_FILM", "type": "field", "idx": 49087, "Desc": "a tag indicating the equivalent focal length assuming a 35mm film camera , in millimeters ."}{"node_name": "TAG_SCENE_CAPTURE_TYPE", "type": "field", "idx": 49088, "Desc": "a tag indicating the type of scene that was shot ."}{"node_name": "SCENE_CAPTURE_TYPE_STANDARD", "type": "field", "idx": 49089, "Desc": "a value to be used with the \" scenecapturetype \" tag ."}{"node_name": "SCENE_CAPTURE_TYPE_LANDSCAPE", "type": "field", "idx": 49090, "Desc": "a value to be used with the \" scenecapturetype \" tag ."}{"node_name": "SCENE_CAPTURE_TYPE_PORTRAIT", "type": "field", "idx": 49091, "Desc": "a value to be used with the \" scenecapturetype \" tag ."}{"node_name": "SCENE_CAPTURE_TYPE_NIGHT_SCENE", "type": "field", "idx": 49092, "Desc": "a value to be used with the \" scenecapturetype \" tag ."}{"node_name": "TAG_GAIN_CONTROL", "type": "field", "idx": 49093, "Desc": "a tag indicating the degree of overall image gain adjustment ."}{"node_name": "GAIN_CONTROL_NONE", "type": "field", "idx": 49094, "Desc": "a value to be used with the \" gaincontrol \" tag ."}{"node_name": "GAIN_CONTROL_LOW_GAIN_UP", "type": "field", "idx": 49095, "Desc": "a value to be used with the \" gaincontrol \" tag ."}{"node_name": "GAIN_CONTROL_HIGH_GAIN_UP", "type": "field", "idx": 49096, "Desc": "a value to be used with the \" gaincontrol \" tag ."}{"node_name": "GAIN_CONTROL_LOW_GAIN_DOWN", "type": "field", "idx": 49097, "Desc": "a value to be used with the \" gaincontrol \" tag ."}{"node_name": "GAIN_CONTROL_HIGH_GAIN_DOWN", "type": "field", "idx": 49098, "Desc": "a value to be used with the \" gaincontrol \" tag ."}{"node_name": "TAG_CONTRAST", "type": "field", "idx": 49099, "Desc": "a tag indicating the direction of contrast processing applied by the camera when the image was shot ."}{"node_name": "CONTRAST_NORMAL", "type": "field", "idx": 49100, "Desc": "a value to be used with the \" contrast \" tag ."}{"node_name": "CONTRAST_SOFT", "type": "field", "idx": 49101, "Desc": "a value to be used with the \" contrast \" tag ."}{"node_name": "CONTRAST_HARD", "type": "field", "idx": 49102, "Desc": "a value to be used with the \" contrast \" tag ."}{"node_name": "TAG_SATURATION", "type": "field", "idx": 49103, "Desc": "a tag indicating the direction of saturation processing applied by the camera when the image was shot ."}{"node_name": "SATURATION_NORMAL", "type": "field", "idx": 49104, "Desc": "a value to be used with the \" saturation \" tag ."}{"node_name": "SATURATION_LOW", "type": "field", "idx": 49105, "Desc": "a value to be used with the \" saturation \" tag ."}{"node_name": "SATURATION_HIGH", "type": "field", "idx": 49106, "Desc": "a value to be used with the \" saturation \" tag ."}{"node_name": "TAG_SHARPNESS", "type": "field", "idx": 49107, "Desc": "a tag indicating the direction of sharpness processing applied by the camera when the image was shot ."}{"node_name": "SHARPNESS_NORMAL", "type": "field", "idx": 49108, "Desc": "a value to be used with the \" sharpness \" tag ."}{"node_name": "SHARPNESS_SOFT", "type": "field", "idx": 49109, "Desc": "a value to be used with the \" sharpness \" tag ."}{"node_name": "SHARPNESS_HARD", "type": "field", "idx": 49110, "Desc": "a value to be used with the \" sharpness \" tag ."}{"node_name": "TAG_DEVICE_SETTING_DESCRIPTION", "type": "field", "idx": 49111, "Desc": "a tag indicating information on the picture-taking conditions of a particular camera model ."}{"node_name": "TAG_SUBJECT_DISTANCE_RANGE", "type": "field", "idx": 49112, "Desc": "a tag indicating the distance to the subject ."}{"node_name": "SUBJECT_DISTANCE_RANGE_UNKNOWN", "type": "field", "idx": 49113, "Desc": "a value to be used with the \" subjectdistancerange \" tag ."}{"node_name": "SUBJECT_DISTANCE_RANGE_MACRO", "type": "field", "idx": 49114, "Desc": "a value to be used with the \" subjectdistancerange \" tag ."}{"node_name": "SUBJECT_DISTANCE_RANGE_CLOSE_VIEW", "type": "field", "idx": 49115, "Desc": "a value to be used with the \" subjectdistancerange \" tag ."}{"node_name": "SUBJECT_DISTANCE_RANGE_DISTANT_VIEW", "type": "field", "idx": 49116, "Desc": "a value to be used with the \" subjectdistancerange \" tag ."}{"node_name": "TAG_IMAGE_UNIQUE_ID", "type": "field", "idx": 49117, "Desc": "a tag indicating an identifier assigned uniquely to each image ."}{"node_name": "TAG_BAD_FAX_LINES", "type": "field", "idx": 49120, "Desc": "tag indicating the number of bad fax lines ( type short or long ) ."}{"node_name": "TAG_CLEAN_FAX_DATA", "type": "field", "idx": 49121, "Desc": "tag indicating the number of lines of clean fax data ( type short ) ."}{"node_name": "CLEAN_FAX_DATA_NO_ERRORS", "type": "field", "idx": 49122, "Desc": "a value to be used with the \" cleanfaxdata \" tag ."}{"node_name": "CLEAN_FAX_DATA_ERRORS_CORRECTED", "type": "field", "idx": 49123, "Desc": "a value to be used with the \" cleanfaxdata \" tag ."}{"node_name": "CLEAN_FAX_DATA_ERRORS_UNCORRECTED", "type": "field", "idx": 49124, "Desc": "a value to be used with the \" cleanfaxdata \" tag ."}{"node_name": "TAG_CONSECUTIVE_BAD_LINES", "type": "field", "idx": 49125, "Desc": "tag indicating the number of consecutive bad lines ( type short or long ) ."}{"node_name": "TAG_MODEL_PIXEL_SCALE", "type": "field", "idx": 49128, "Desc": "a tag used to specify the size of raster pixel spacing in model space units ."}{"node_name": "TAG_MODEL_TRANSFORMATION", "type": "field", "idx": 49129, "Desc": "a tag used to specify the transformation matrix between the raster space and the model space ."}{"node_name": "TAG_MODEL_TIE_POINT", "type": "field", "idx": 49130, "Desc": "a tag used to store raster-to-model tiepoint pairs ."}{"node_name": "TAG_GEO_KEY_DIRECTORY", "type": "field", "idx": 49131, "Desc": "a tag used to store the geokey directory ."}{"node_name": "TAG_GEO_DOUBLE_PARAMS", "type": "field", "idx": 49132, "Desc": "a tag used to store all double-values geokeys ."}{"node_name": "TAG_GEO_ASCII_PARAMS", "type": "field", "idx": 49133, "Desc": "a tag used to store all ascii-values geokeys ."}{"node_name": "TIFF_BYTE", "type": "field", "idx": 49236, "Desc": "flag for 8 bit unsigned integers ."}{"node_name": "TIFF_ASCII", "type": "field", "idx": 49237, "Desc": "flag for null-terminated ascii strings ."}{"node_name": "TIFF_SHORT", "type": "field", "idx": 49238, "Desc": "flag for 16 bit unsigned integers ."}{"node_name": "TIFF_LONG", "type": "field", "idx": 49239, "Desc": "flag for 32 bit unsigned integers ."}{"node_name": "TIFF_RATIONAL", "type": "field", "idx": 49240, "Desc": "flag for pairs of 32 bit unsigned integers ."}{"node_name": "TIFF_SBYTE", "type": "field", "idx": 49241, "Desc": "flag for 8 bit signed integers ."}{"node_name": "TIFF_UNDEFINED", "type": "field", "idx": 49242, "Desc": "flag for 8 bit uninterpreted bytes ."}{"node_name": "TIFF_SSHORT", "type": "field", "idx": 49243, "Desc": "flag for 16 bit signed integers ."}{"node_name": "TIFF_SLONG", "type": "field", "idx": 49244, "Desc": "flag for 32 bit signed integers ."}{"node_name": "TIFF_SRATIONAL", "type": "field", "idx": 49245, "Desc": "flag for pairs of 32 bit signed integers ."}{"node_name": "TIFF_FLOAT", "type": "field", "idx": 49246, "Desc": "flag for 32 bit ieee floats ."}{"node_name": "TIFF_DOUBLE", "type": "field", "idx": 49247, "Desc": "flag for 64 bit ieee doubles ."}{"node_name": "TIFF_IFD_POINTER", "type": "field", "idx": 49248, "Desc": "flag for ifd pointer defined in tiff tech note 1 in tiff specification supplement 1 ."}{"node_name": "MIN_DATATYPE", "type": "field", "idx": 49249, "Desc": "the numerically smallest constant representing a tiff data type ."}{"node_name": "MAX_DATATYPE", "type": "field", "idx": 49250, "Desc": "the numerically largest constant representing a tiff data type ."}{"node_name": "UNKNOWN_TAG_NAME", "type": "field", "idx": 49251, "Desc": "the name assigned to a tag with an unknown tag number . such a tag may be created for example when reading an ifd and a tag number is encountered which is not in any of the tifftagsets known to the reader ."}{"node_name": "vendorName", "type": "field", "idx": 49295, "Desc": "a string to be returned from getvendorname , initially null . constructors should set this to a non-null value ."}{"node_name": "version", "type": "field", "idx": 49296, "Desc": "a string to be returned from getversion , initially null . constructors should set this to a non-null value ."}{"node_name": "inputClass", "type": "field", "idx": 49312, "Desc": "a class object indicating the legal object type for use by the createinputstreaminstance method ."}{"node_name": "outputClass", "type": "field", "idx": 49328, "Desc": "a class object indicating the legal object type for use by the createinputstreaminstance method ."}{"node_name": "inputTypes", "type": "field", "idx": 49344, "Desc": "an array of class objects to be returned from getinputtypes , initially null ."}{"node_name": "writerSpiNames", "type": "field", "idx": 49345, "Desc": "an array of strings to be returned from getimagewriterspinames , initially null ."}{"node_name": "names", "type": "field", "idx": 49376, "Desc": "an array of strings to be returned from getformatnames , initially null . constructors should set this to a non-null value ."}{"node_name": "suffixes", "type": "field", "idx": 49377, "Desc": "an array of strings to be returned from getfilesuffixes , initially null ."}{"node_name": "MIMETypes", "type": "field", "idx": 49378, "Desc": "an array of strings to be returned from getmimetypes , initially null ."}{"node_name": "pluginClassName", "type": "field", "idx": 49379, "Desc": "a string containing the name of the associated plug-in class , initially null ."}{"node_name": "supportsStandardStreamMetadataFormat", "type": "field", "idx": 49380, "Desc": "a boolean indicating whether this plug-in supports the standard metadata format for stream metadata , initially false ."}{"node_name": "nativeStreamMetadataFormatName", "type": "field", "idx": 49381, "Desc": "a string containing the name of the native stream metadata format supported by this plug-in , initially null ."}{"node_name": "nativeStreamMetadataFormatClassName", "type": "field", "idx": 49382, "Desc": "a string containing the class name of the native stream metadata format supported by this plug-in , initially null ."}{"node_name": "extraStreamMetadataFormatNames", "type": "field", "idx": 49383, "Desc": "an array of strings containing the names of any additional stream metadata formats supported by this plug-in , initially null ."}{"node_name": "extraStreamMetadataFormatClassNames", "type": "field", "idx": 49384, "Desc": "an array of strings containing the class names of any additional stream metadata formats supported by this plug-in , initially null ."}{"node_name": "supportsStandardImageMetadataFormat", "type": "field", "idx": 49385, "Desc": "a boolean indicating whether this plug-in supports the standard metadata format for image metadata , initially false ."}{"node_name": "nativeImageMetadataFormatName", "type": "field", "idx": 49386, "Desc": "a string containing the name of the native stream metadata format supported by this plug-in , initially null ."}{"node_name": "nativeImageMetadataFormatClassName", "type": "field", "idx": 49387, "Desc": "a string containing the class name of the native stream metadata format supported by this plug-in , initially null ."}{"node_name": "extraImageMetadataFormatNames", "type": "field", "idx": 49388, "Desc": "an array of strings containing the names of any additional image metadata formats supported by this plug-in , initially null ."}{"node_name": "extraImageMetadataFormatClassNames", "type": "field", "idx": 49389, "Desc": "an array of strings containing the class names of any additional image metadata formats supported by this plug-in , initially null ."}{"node_name": "outputTypes", "type": "field", "idx": 49431, "Desc": "an array of class objects to be returned from getoutputtypes , initially null ."}{"node_name": "readerSpiNames", "type": "field", "idx": 49432, "Desc": "an array of strings to be returned from getimagereaderspinames , initially null ."}{"node_name": "byteOrder", "type": "field", "idx": 49645, "Desc": "the byte order of the stream as an instance of the enumeration class java.nio.byteorder , where byteorder.big_endian indicates network byte order and byteorder.little_endian indicates the reverse order . by default , the value is byteorder.big_endian ."}{"node_name": "streamPos", "type": "field", "idx": 49646, "Desc": "the current read position within the stream . subclasses are responsible for keeping this value current from any method they override that alters the read position ."}{"node_name": "bitOffset", "type": "field", "idx": 49647, "Desc": "the current bit offset within the stream . subclasses are responsible for keeping this value current from any method they override that alters the bit offset ."}{"node_name": "flushedPos", "type": "field", "idx": 49648, "Desc": "the position prior to which data may be discarded . seeking to a smaller position is not allowed . flushedpos will always be > = 0 ."}{"node_name": "DEFAULT_VALUE", "type": "field", "idx": 50346, "Desc": "the specified default value ."}{"node_name": "DEFAULT_VALUE", "type": "field", "idx": 50386, "Desc": "default value to be returned ; defaultaction returns this value unless the method is overridden ."}{"node_name": "DEFAULT_VALUE", "type": "field", "idx": 50439, "Desc": "default value to be returned ; defaultaction returns this value unless the method is overridden ."}{"node_name": "DEFAULT_VALUE", "type": "field", "idx": 50474, "Desc": "default value to be returned ; defaultaction returns this value unless the method is overridden ."}{"node_name": "ATTRIBUTE_CHANGE", "type": "field", "idx": 50640, "Desc": "notification type which indicates that the observed mbean attribute value has changed . the value of this type string is jmx.attribute.change ."}{"node_name": "EMPTY_DESCRIPTOR", "type": "field", "idx": 50768, "Desc": "an empty descriptor ."}{"node_name": "DEFAULT_VALUE_FIELD", "type": "field", "idx": 50819, "Desc": "the name of the defaultvalue field ."}{"node_name": "IMMUTABLE_INFO_FIELD", "type": "field", "idx": 50820, "Desc": "the name of the immutableinfo field ."}{"node_name": "INTERFACE_CLASS_NAME_FIELD", "type": "field", "idx": 50821, "Desc": "the name of the interfaceclassname field ."}{"node_name": "LEGAL_VALUES_FIELD", "type": "field", "idx": 50822, "Desc": "the name of the legalvalues field ."}{"node_name": "MAX_VALUE_FIELD", "type": "field", "idx": 50823, "Desc": "the name of the maxvalue field ."}{"node_name": "MIN_VALUE_FIELD", "type": "field", "idx": 50824, "Desc": "the name of the minvalue field ."}{"node_name": "MXBEAN_FIELD", "type": "field", "idx": 50825, "Desc": "the name of the mxbean field ."}{"node_name": "OPEN_TYPE_FIELD", "type": "field", "idx": 50826, "Desc": "the name of the opentype field ."}{"node_name": "ORIGINAL_TYPE_FIELD", "type": "field", "idx": 50827, "Desc": "the name of the originaltype field ."}{"node_name": "name", "type": "field", "idx": 51027, "Desc": "the name of the feature . it is recommended that subclasses call getname() rather than reading name , and that they not change it ."}{"node_name": "description", "type": "field", "idx": 51028, "Desc": "the human-readable description of the feature . it is recommended that subclasses call getdescription() rather than reading description , and that they not change it ."}{"node_name": "INFO", "type": "field", "idx": 51082, "Desc": "indicates that the operation is read-like : it returns information but does not change any state ."}{"node_name": "ACTION", "type": "field", "idx": 51083, "Desc": "indicates that the operation is write-like : it has an effect but does not return any information from the mbean ."}{"node_name": "ACTION_INFO", "type": "field", "idx": 51084, "Desc": "indicates that the operation is both read-like and write-like : it has an effect , and it also returns information from the mbean ."}{"node_name": "UNKNOWN", "type": "field", "idx": 51085, "Desc": "indicates that the impact of the operation is unknown or cannot be expressed using one of the other values ."}{"node_name": "DELEGATE_NAME", "type": "field", "idx": 51315, "Desc": "defines the default objectname of the mbeanserverdelegate ."}{"node_name": "REGISTRATION_NOTIFICATION", "type": "field", "idx": 51364, "Desc": "notification type denoting that an mbean has been registered . value is \" jmx.mbean.registered \" ."}{"node_name": "UNREGISTRATION_NOTIFICATION", "type": "field", "idx": 51365, "Desc": "notification type denoting that an mbean has been unregistered . value is \" jmx.mbean.unregistered \" ."}{"node_name": "capacityIncrement", "type": "field", "idx": 51727, "Desc": "the amount by which the capacity of the monitor arrays are automatically incremented when their size becomes greater than their capacity ."}{"node_name": "elementCount", "type": "field", "idx": 51728, "Desc": "the number of valid components in the vector of observed objects ."}{"node_name": "alreadyNotifieds", "type": "field", "idx": 51729, "Desc": "selected monitor errors that have already been notified . each element in this array corresponds to an observed object in the vector . it contains a bit mask of the flags observed_object_error_notified etc , indicating whether the corresponding notification has already been sent for the mbean being monitored ."}{"node_name": "server", "type": "field", "idx": 51730, "Desc": "reference to the mbean server . this reference is null when the monitor mbean is not registered in an mbean server . this reference is initialized before the monitor mbean is registered in the mbean server ."}{"node_name": "RESET_FLAGS_ALREADY_NOTIFIED", "type": "field", "idx": 51731, "Desc": "this flag is used to reset the alreadynotifieds monitor attribute ."}{"node_name": "OBSERVED_OBJECT_ERROR_NOTIFIED", "type": "field", "idx": 51732, "Desc": "flag denoting that a notification has occurred after changing the observed object . this flag is used to check that the new observed object is registered in the mbean server at the time of the first notification ."}{"node_name": "OBSERVED_ATTRIBUTE_ERROR_NOTIFIED", "type": "field", "idx": 51733, "Desc": "flag denoting that a notification has occurred after changing the observed attribute . this flag is used to check that the new observed attribute belongs to the observed object at the time of the first notification ."}{"node_name": "OBSERVED_ATTRIBUTE_TYPE_ERROR_NOTIFIED", "type": "field", "idx": 51734, "Desc": "flag denoting that a notification has occurred after changing the observed object or the observed attribute . this flag is used to check that the observed attribute type is correct ( depending on the monitor in use ) at the time of the first notification ."}{"node_name": "RUNTIME_ERROR_NOTIFIED", "type": "field", "idx": 51735, "Desc": "flag denoting that a notification has occurred after changing the observed object or the observed attribute . this flag is used to notify any exception ( except the cases described above ) when trying to get the value of the observed attribute at the time of the first notification ."}{"node_name": "OBSERVED_OBJECT_ERROR", "type": "field", "idx": 51778, "Desc": "notification type denoting that the observed object is not registered in the mbean server . this notification is fired by all kinds of monitors . the value of this notification type is jmx.monitor.error.mbean ."}{"node_name": "OBSERVED_ATTRIBUTE_ERROR", "type": "field", "idx": 51779, "Desc": "notification type denoting that the observed attribute is not contained in the observed object . this notification is fired by all kinds of monitors . the value of this notification type is jmx.monitor.error.attribute ."}{"node_name": "OBSERVED_ATTRIBUTE_TYPE_ERROR", "type": "field", "idx": 51780, "Desc": "notification type denoting that the type of the observed attribute is not correct . this notification is fired by all kinds of monitors . the value of this notification type is jmx.monitor.error.type ."}{"node_name": "THRESHOLD_ERROR", "type": "field", "idx": 51781, "Desc": "notification type denoting that the type of the thresholds , offset or modulus is not correct . this notification is fired by counter and gauge monitors . the value of this notification type is jmx.monitor.error.threshold ."}{"node_name": "RUNTIME_ERROR", "type": "field", "idx": 51782, "Desc": "notification type denoting that a non-predefined error type has occurred when trying to get the value of the observed attribute . this notification is fired by all kinds of monitors . the value of this notification type is jmx.monitor.error.runtime ."}{"node_name": "THRESHOLD_VALUE_EXCEEDED", "type": "field", "idx": 51783, "Desc": "notification type denoting that the observed attribute has reached the threshold value . this notification is only fired by counter monitors . the value of this notification type is jmx.monitor.counter.threshold ."}{"node_name": "THRESHOLD_HIGH_VALUE_EXCEEDED", "type": "field", "idx": 51784, "Desc": "notification type denoting that the observed attribute has exceeded the threshold high value . this notification is only fired by gauge monitors . the value of this notification type is jmx.monitor.gauge.high ."}{"node_name": "THRESHOLD_LOW_VALUE_EXCEEDED", "type": "field", "idx": 51785, "Desc": "notification type denoting that the observed attribute has exceeded the threshold low value . this notification is only fired by gauge monitors . the value of this notification type is jmx.monitor.gauge.low ."}{"node_name": "STRING_TO_COMPARE_VALUE_MATCHED", "type": "field", "idx": 51786, "Desc": "notification type denoting that the observed attribute has matched the \" string to compare \" value . this notification is only fired by string monitors . the value of this notification type is jmx.monitor.string.matches ."}{"node_name": "STRING_TO_COMPARE_VALUE_DIFFERED", "type": "field", "idx": 51787, "Desc": "notification type denoting that the observed attribute has differed from the \" string to compare \" value . this notification is only fired by string monitors . the value of this notification type is jmx.monitor.string.differs ."}{"node_name": "source", "type": "field", "idx": 51834, "Desc": "source hides the eventobject.source field in the parent class to make it non-transient and therefore part of the serialized form ."}{"node_name": "WILDCARD", "type": "field", "idx": 51931, "Desc": "defines the wildcard \" * : * \" objectname ."}{"node_name": "ALLOWED_CLASSNAMES_LIST", "type": "field", "idx": 52289, "Desc": "list of the fully qualified names of the java classes allowed for open data values . a multidimensional array of any one of these classes or their corresponding primitive types is also an allowed class for open data values . allowed_classnames_list = { \" java.lang.void \" , \" java.lang.boolean \" , \" java.lang.character \" , \" java.lang.byte \" , \" java.lang.short \" , \" java.lang.integer \" , \" java.lang.long \" , \" java.lang.float \" , \" java.lang.double \" , \" java.lang.string \" , \" java.math.bigdecimal \" , \" java.math.biginteger \" , \" java.util.date \" , \" javax.management.objectname \" , compositedata.class.getname() , tabulardata.class.getname() } ;"}{"node_name": "VOID", "type": "field", "idx": 52304, "Desc": "the simpletype instance describing values whose java class name is java.lang.void ."}{"node_name": "BOOLEAN", "type": "field", "idx": 52305, "Desc": "the simpletype instance describing values whose java class name is java.lang.boolean ."}{"node_name": "CHARACTER", "type": "field", "idx": 52306, "Desc": "the simpletype instance describing values whose java class name is java.lang.character ."}{"node_name": "BYTE", "type": "field", "idx": 52307, "Desc": "the simpletype instance describing values whose java class name is java.lang.byte ."}{"node_name": "SHORT", "type": "field", "idx": 52308, "Desc": "the simpletype instance describing values whose java class name is java.lang.short ."}{"node_name": "INTEGER", "type": "field", "idx": 52309, "Desc": "the simpletype instance describing values whose java class name is java.lang.integer ."}{"node_name": "LONG", "type": "field", "idx": 52310, "Desc": "the simpletype instance describing values whose java class name is java.lang.long ."}{"node_name": "FLOAT", "type": "field", "idx": 52311, "Desc": "the simpletype instance describing values whose java class name is java.lang.float ."}{"node_name": "DOUBLE", "type": "field", "idx": 52312, "Desc": "the simpletype instance describing values whose java class name is java.lang.double ."}{"node_name": "STRING", "type": "field", "idx": 52313, "Desc": "the simpletype instance describing values whose java class name is java.lang.string ."}{"node_name": "BIGDECIMAL", "type": "field", "idx": 52314, "Desc": "the simpletype instance describing values whose java class name is java.math.bigdecimal ."}{"node_name": "BIGINTEGER", "type": "field", "idx": 52315, "Desc": "the simpletype instance describing values whose java class name is java.math.biginteger ."}{"node_name": "DATE", "type": "field", "idx": 52316, "Desc": "the simpletype instance describing values whose java class name is java.util.date ."}{"node_name": "OBJECTNAME", "type": "field", "idx": 52317, "Desc": "the simpletype instance describing values whose java class name is javax.management.objectname ."}{"node_name": "GT", "type": "field", "idx": 52416, "Desc": "a code representing the gt ( javax.management.valueexp , javax.management.valueexp ) query . this is chiefly of interest for the serialized form of queries ."}{"node_name": "LT", "type": "field", "idx": 52417, "Desc": "a code representing the lt ( javax.management.valueexp , javax.management.valueexp ) query . this is chiefly of interest for the serialized form of queries ."}{"node_name": "GE", "type": "field", "idx": 52418, "Desc": "a code representing the geq ( javax.management.valueexp , javax.management.valueexp ) query . this is chiefly of interest for the serialized form of queries ."}{"node_name": "LE", "type": "field", "idx": 52419, "Desc": "a code representing the leq ( javax.management.valueexp , javax.management.valueexp ) query . this is chiefly of interest for the serialized form of queries ."}{"node_name": "EQ", "type": "field", "idx": 52420, "Desc": "a code representing the eq ( javax.management.valueexp , javax.management.valueexp ) query . this is chiefly of interest for the serialized form of queries ."}{"node_name": "PLUS", "type": "field", "idx": 52421, "Desc": "a code representing the plus ( javax.management.valueexp , javax.management.valueexp ) expression . this is chiefly of interest for the serialized form of queries ."}{"node_name": "MINUS", "type": "field", "idx": 52422, "Desc": "a code representing the minus ( javax.management.valueexp , javax.management.valueexp ) expression . this is chiefly of interest for the serialized form of queries ."}{"node_name": "TIMES", "type": "field", "idx": 52423, "Desc": "a code representing the times ( javax.management.valueexp , javax.management.valueexp ) expression . this is chiefly of interest for the serialized form of queries ."}{"node_name": "DIV", "type": "field", "idx": 52424, "Desc": "a code representing the div ( javax.management.valueexp , javax.management.valueexp ) expression . this is chiefly of interest for the serialized form of queries ."}{"node_name": "RELATION_BASIC_CREATION", "type": "field", "idx": 52581, "Desc": "type for the creation of an internal relation ."}{"node_name": "RELATION_MBEAN_CREATION", "type": "field", "idx": 52582, "Desc": "type for the relation mbean added into the relation service ."}{"node_name": "RELATION_BASIC_UPDATE", "type": "field", "idx": 52583, "Desc": "type for an update of an internal relation ."}{"node_name": "RELATION_MBEAN_UPDATE", "type": "field", "idx": 52584, "Desc": "type for the update of a relation mbean ."}{"node_name": "RELATION_BASIC_REMOVAL", "type": "field", "idx": 52585, "Desc": "type for the removal from the relation service of an internal relation ."}{"node_name": "RELATION_MBEAN_REMOVAL", "type": "field", "idx": 52586, "Desc": "type for the removal from the relation service of a relation mbean ."}{"node_name": "ROLE_CARDINALITY_INFINITY", "type": "field", "idx": 52868, "Desc": "to specify an unlimited cardinality ."}{"node_name": "NO_ROLE_WITH_NAME", "type": "field", "idx": 52938, "Desc": "problem type when trying to access an unknown role ."}{"node_name": "ROLE_NOT_READABLE", "type": "field", "idx": 52939, "Desc": "problem type when trying to read a non-readable attribute ."}{"node_name": "ROLE_NOT_WRITABLE", "type": "field", "idx": 52940, "Desc": "problem type when trying to update a non-writable attribute ."}{"node_name": "LESS_THAN_MIN_ROLE_DEGREE", "type": "field", "idx": 52941, "Desc": "problem type when trying to set a role value with less objectnames than the minimum expected cardinality ."}{"node_name": "MORE_THAN_MAX_ROLE_DEGREE", "type": "field", "idx": 52942, "Desc": "problem type when trying to set a role value with more objectnames than the maximum expected cardinality ."}{"node_name": "REF_MBEAN_OF_INCORRECT_CLASS", "type": "field", "idx": 52943, "Desc": "problem type when trying to set a role value including the objectname of a mbean not of the class expected for that role ."}{"node_name": "REF_MBEAN_NOT_REGISTERED", "type": "field", "idx": 52944, "Desc": "problem type when trying to set a role value including the objectname of a mbean not registered in the mbean server ."}{"node_name": "OPENED", "type": "field", "idx": 52990, "Desc": "notification type string for a connection-opened notification ."}{"node_name": "CLOSED", "type": "field", "idx": 52991, "Desc": "notification type string for a connection-closed notification ."}{"node_name": "FAILED", "type": "field", "idx": 52992, "Desc": "notification type string for a connection-failed notification ."}{"node_name": "NOTIFS_LOST", "type": "field", "idx": 52993, "Desc": "notification type string for a connection that has possibly lost notifications ."}{"node_name": "CREDENTIALS", "type": "field", "idx": 53003, "Desc": "name of the attribute that specifies the credentials to send to the connector server during connection . the value associated with this attribute , if any , is a serializable object of an appropriate type for the server's jmxauthenticator ."}{"node_name": "DEFAULT_CLASS_LOADER", "type": "field", "idx": 53023, "Desc": "name of the attribute that specifies the default class loader . this class loader is used to deserialize return values and exceptions from remote mbeanserverconnection calls . the value associated with this attribute is an instance of classloader ."}{"node_name": "PROTOCOL_PROVIDER_PACKAGES", "type": "field", "idx": 53024, "Desc": "name of the attribute that specifies the provider packages that are consulted when looking for the handler for a protocol . the value associated with this attribute is a string with package names separated by vertical bars ( | ) ."}{"node_name": "PROTOCOL_PROVIDER_CLASS_LOADER", "type": "field", "idx": 53025, "Desc": "name of the attribute that specifies the class loader for loading protocol providers . the value associated with this attribute is an instance of classloader ."}{"node_name": "AUTHENTICATOR", "type": "field", "idx": 53039, "Desc": "name of the attribute that specifies the authenticator for a connector server . the value associated with this attribute , if any , must be an object that implements the interface jmxauthenticator ."}{"node_name": "DEFAULT_CLASS_LOADER", "type": "field", "idx": 53064, "Desc": "name of the attribute that specifies the default class loader . this class loader is used to deserialize objects in requests received from the client , possibly after consulting an mbean-specific class loader . the value associated with this attribute is an instance of classloader ."}{"node_name": "DEFAULT_CLASS_LOADER_NAME", "type": "field", "idx": 53065, "Desc": "name of the attribute that specifies the default class loader mbean name . this class loader is used to deserialize objects in requests received from the client , possibly after consulting an mbean-specific class loader . the value associated with this attribute is an instance of objectname ."}{"node_name": "PROTOCOL_PROVIDER_PACKAGES", "type": "field", "idx": 53066, "Desc": "name of the attribute that specifies the provider packages that are consulted when looking for the handler for a protocol . the value associated with this attribute is a string with package names separated by vertical bars ( | ) ."}{"node_name": "PROTOCOL_PROVIDER_CLASS_LOADER", "type": "field", "idx": 53067, "Desc": "name of the attribute that specifies the class loader for loading protocol providers . the value associated with this attribute is an instance of classloader ."}{"node_name": "JNDI_REBIND_ATTRIBUTE", "type": "field", "idx": 53266, "Desc": "name of the attribute that specifies whether the rmiserver stub that represents an rmi connector server should override an existing stub at the same address . the value associated with this attribute , if any , should be a string that is equal , ignoring case , to \" true \" or \" false \" . the default value is false ."}{"node_name": "RMI_CLIENT_SOCKET_FACTORY_ATTRIBUTE", "type": "field", "idx": 53267, "Desc": "name of the attribute that specifies the rmiclientsocketfactory for the rmi objects created in conjunction with this connector . the value associated with this attribute must be of type rmiclientsocketfactory and can only be specified in the map argument supplied when creating a connector server ."}{"node_name": "RMI_SERVER_SOCKET_FACTORY_ATTRIBUTE", "type": "field", "idx": 53268, "Desc": "name of the attribute that specifies the rmiserversocketfactory for the rmi objects created in conjunction with this connector . the value associated with this attribute must be of type rmiserversocketfactory and can only be specified in the map argument supplied when creating a connector server ."}{"node_name": "CREDENTIALS_FILTER_PATTERN", "type": "field", "idx": 53269, "Desc": "name of the attribute that specifies an objectinputfilter pattern string to filter classes acceptable for rmiserver.newclient() remote method call . the filter pattern must be in same format as used in objectinputfilter.config.createfilter ( java.lang.string ) this list of classes allowed by filter should correspond to the transitive closure of the credentials class ( or classes ) used by the installed jmxauthenticator associated with the rmiserver implementation . if the attribute is not set then any class is deemed acceptable ."}{"node_name": "SERIAL_FILTER_PATTERN", "type": "field", "idx": 53270, "Desc": "this attribute defines a pattern from which to create a objectinputfilter that will be used when deserializing objects sent to the jmxconnectorserver by any client . the filter will be called for any class found in the serialized stream sent to server by client , including all jmx defined classes ( such as objectname ) , all method parameters , and , if present in the stream , all classes transitively referred by the serial form of any deserialized object . the pattern must be in same format as used in objectinputfilter.config.createfilter ( java.lang.string ) . it may define a white list of permitted classes , a black list of rejected classes , a maximum depth for the deserialized objects , etc . to be functional , the filter should allow at least all the concrete types in the transitive closure of all objects that might get serialized when serializing all jmx classes referred as parameters in the rmiconnection interface , plus all classes that a client might need to transmit wrapped in marshalled objects in order to interoperate with the mbeans registered in the mbeanserver . that would potentially include all the concrete jmx opentypes and the classes they use in their serial form . care must be taken when defining such a filter , as defining a white list too restrictive or a too wide a black list may prevent legitimate clients from interoperating with the jmxconnectorserver ."}{"node_name": "ONE_SECOND", "type": "field", "idx": 53458, "Desc": "number of milliseconds in one second . useful constant for the addnotification method ."}{"node_name": "ONE_MINUTE", "type": "field", "idx": 53459, "Desc": "number of milliseconds in one minute . useful constant for the addnotification method ."}{"node_name": "ONE_HOUR", "type": "field", "idx": 53460, "Desc": "number of milliseconds in one hour . useful constant for the addnotification method ."}{"node_name": "ONE_DAY", "type": "field", "idx": 53461, "Desc": "number of milliseconds in one day . useful constant for the addnotification method ."}{"node_name": "ONE_WEEK", "type": "field", "idx": 53462, "Desc": "number of milliseconds in one week . useful constant for the addnotification method ."}{"node_name": "remainingNewName", "type": "field", "idx": 53641, "Desc": "contains the remaining unresolved part of the second \" name \" argument to context.rename() . this information is necessary for continuing the context.rename() operation . remainingNewName is initialized to null . it should not be manipulated directly : it should be accessed and updated using getremainingname() and setremainingname() ."}{"node_name": "environment", "type": "field", "idx": 53642, "Desc": "contains the environment relevant for the context or dircontext method that cannot proceed . environment is initialized to null . it should not be manipulated directly : it should be accessed and updated using getenvironment() and setenvironment() ."}{"node_name": "altName", "type": "field", "idx": 53643, "Desc": "contains the name of the resolved object , relative to the context altnamectx . it is a composite name . if null , then no name is specified . see the javax.naming.spi.objectfactory.getobjectinstance method for details on how this is used . altName is initialized to null . it should not be manipulated directly : it should be accessed and updated using getaltname() and setaltname() ."}{"node_name": "altNameCtx", "type": "field", "idx": 53644, "Desc": "contains the context relative to which altname is specified . if null , then the default initial context is implied . see the javax.naming.spi.objectfactory.getobjectinstance method for details on how this is used . altNameCtx is initialized to null . it should not be manipulated directly : it should be accessed and updated using getaltnamectx() and setaltnamectx() ."}{"node_name": "mySyntax", "type": "field", "idx": 53703, "Desc": "syntax properties for this compound name . mySyntax is initialized by the constructors and cannot be null . it should be treated as a read-only variable by subclasses . any necessary changes to mysyntax should be made within constructors and not after the compound name has been instantiated ."}{"node_name": "INITIAL_CONTEXT_FACTORY", "type": "field", "idx": 53747, "Desc": "constant that holds the name of the environment property for specifying the initial context factory to use . the value of the property should be the fully qualified class name of the factory class that will create an initial context . this property may be specified in the environment parameter passed to the initial context constructor , a system property , or an application resource file . if it is not specified in any of these sources , noinitialcontextexception is thrown when an initial context is required to complete an operation . the value of this constant is \" java.naming.factory.initial \" ."}{"node_name": "OBJECT_FACTORIES", "type": "field", "idx": 53748, "Desc": "constant that holds the name of the environment property for specifying the list of object factories to use . the value of the property should be a colon-separated list of the fully qualified class names of factory classes that will create an object given information about the object . this property may be specified in the environment , a system property , or one or more resource files . the value of this constant is \" java.naming.factory.object \" ."}{"node_name": "STATE_FACTORIES", "type": "field", "idx": 53749, "Desc": "constant that holds the name of the environment property for specifying the list of state factories to use . the value of the property should be a colon-separated list of the fully qualified class names of state factory classes that will be used to get an object's state given the object itself . this property may be specified in the environment , a system property , or one or more resource files . the value of this constant is \" java.naming.factory.state \" ."}{"node_name": "URL_PKG_PREFIXES", "type": "field", "idx": 53750, "Desc": "constant that holds the name of the environment property for specifying the list of package prefixes to use when loading in url context factories . the value of the property should be a colon-separated list of package prefixes for the class name of the factory class that will create a url context factory . this property may be specified in the environment , a system property , or one or more resource files . the prefix com.sun.jndi.url is always appended to the possibly empty list of package prefixes . the value of this constant is \" java.naming.factory.url.pkgs \" ."}{"node_name": "PROVIDER_URL", "type": "field", "idx": 53751, "Desc": "constant that holds the name of the environment property for specifying configuration information for the service provider to use . the value of the property should contain a url string ( e.g. \" ldap :/ / somehost : 389 \") . this property may be specified in the environment , a system property , or a resource file . if it is not specified in any of these sources , the default configuration is determined by the service provider . the value of this constant is \" java.naming.provider.url \" ."}{"node_name": "DNS_URL", "type": "field", "idx": 53752, "Desc": "constant that holds the name of the environment property for specifying the dns host and domain names to use for the jndi url context ( for example , \" dns :/ / somehost / wiz.com\") . this property may be specified in the environment , a system property , or a resource file . if it is not specified in any of these sources and the program attempts to use a jndi url containing a dns name , a configurationexception will be thrown . the value of this constant is \" java.naming.dns.url \" ."}{"node_name": "AUTHORITATIVE", "type": "field", "idx": 53753, "Desc": "constant that holds the name of the environment property for specifying the authoritativeness of the service requested . if the value of the property is the string \" true \" , it means that the access is to the most authoritative source ( i.e. bypass any cache or replicas ) . if the value is anything else , the source need not be ( but may be ) authoritative . if unspecified , the value defaults to \" false \" . the value of this constant is \" java.naming.authoritative \" ."}{"node_name": "BATCHSIZE", "type": "field", "idx": 53754, "Desc": "constant that holds the name of the environment property for specifying the batch size to use when returning data via the service's protocol . this is a hint to the provider to return the results of operations in batches of the specified size , so the provider can optimize its performance and usage of resources . the value of the property is the string representation of an integer . if unspecified , the batch size is determined by the service provider . the value of this constant is \" java.naming.batchsize \" ."}{"node_name": "REFERRAL", "type": "field", "idx": 53755, "Desc": "constant that holds the name of the environment property for specifying how referrals encountered by the service provider are to be processed . the value of the property is one of the following strings : \" follow \" follow referrals automatically \" ignore \" ignore referrals \" throw \" throw referralexception when a referral is encountered . if this property is not specified , the default is determined by the provider . the value of this constant is \" java.naming.referral \" ."}{"node_name": "SECURITY_PROTOCOL", "type": "field", "idx": 53756, "Desc": "constant that holds the name of the environment property for specifying the security protocol to use . its value is a string determined by the service provider ( e.g. \" ssl \") . if this property is unspecified , the behaviour is determined by the service provider . the value of this constant is \" java.naming.security.protocol \" ."}{"node_name": "SECURITY_AUTHENTICATION", "type": "field", "idx": 53757, "Desc": "constant that holds the name of the environment property for specifying the security level to use . its value is one of the following strings : \" none \" , \" simple \" , \" strong \" . if this property is unspecified , the behaviour is determined by the service provider . the value of this constant is \" java.naming.security.authentication \" ."}{"node_name": "SECURITY_PRINCIPAL", "type": "field", "idx": 53758, "Desc": "constant that holds the name of the environment property for specifying the identity of the principal for authenticating the caller to the service . the format of the principal depends on the authentication scheme . if this property is unspecified , the behaviour is determined by the service provider . the value of this constant is \" java.naming.security.principal \" ."}{"node_name": "SECURITY_CREDENTIALS", "type": "field", "idx": 53759, "Desc": "constant that holds the name of the environment property for specifying the credentials of the principal for authenticating the caller to the service . the value of the property depends on the authentication scheme . for example , it could be a hashed password , clear-text password , key , certificate , and so on . if this property is unspecified , the behaviour is determined by the service provider . the value of this constant is \" java.naming.security.credentials \" ."}{"node_name": "LANGUAGE", "type": "field", "idx": 53760, "Desc": "constant that holds the name of the environment property for specifying the preferred language to use with the service . the value of the property is a colon-separated list of language tags as defined in rfc 1766 . if this property is unspecified , the language preference is determined by the service provider . the value of this constant is \" java.naming.language \" ."}{"node_name": "attrID", "type": "field", "idx": 53883, "Desc": "holds the attribute's id . it is initialized by the public constructor and cannot be null unless methods in basicattribute that use attrid have been overridden ."}{"node_name": "values", "type": "field", "idx": 53884, "Desc": "holds the attribute's values . initialized by public constructors . cannot be null unless methods in basicattribute that use values have been overridden ."}{"node_name": "ordered", "type": "field", "idx": 53885, "Desc": "a flag for recording whether this attribute's values are ordered ."}{"node_name": "ADD_ATTRIBUTE", "type": "field", "idx": 53929, "Desc": "this constant specifies to add an attribute with the specified values . if attribute does not exist , create the attribute . the resulting attribute has a union of the specified value set and the prior value set . adding an attribute with no value will throw invalidattributevalueexception if the attribute must have at least one value . for a single-valued attribute where that attribute already exists , throws attributeinuseexception . if attempting to add more than one value to a single-valued attribute , throws invalidattributevalueexception . the value of this constant is 1 ."}{"node_name": "REPLACE_ATTRIBUTE", "type": "field", "idx": 53930, "Desc": "this constant specifies to replace an attribute with specified values . if attribute already exists , replaces all existing values with new specified values . if the attribute does not exist , creates it . if no value is specified , deletes all the values of the attribute . removal of the last value will remove the attribute if the attribute is required to have at least one value . if attempting to add more than one value to a single-valued attribute , throws invalidattributevalueexception . the value of this constant is 2 ."}{"node_name": "REMOVE_ATTRIBUTE", "type": "field", "idx": 53931, "Desc": "this constant specifies to delete the specified attribute values from the attribute . the resulting attribute has the set difference of its prior value set and the specified value set . if no values are specified , deletes the entire attribute . if the attribute does not exist , or if some or all members of the specified value set do not exist , this absence may be ignored and the operation succeeds , or a namingexception may be thrown to indicate the absence . removal of the last value will remove the attribute if the attribute is required to have at least one value . the value of this constant is 3 ."}{"node_name": "OBJECT_SCOPE", "type": "field", "idx": 54060, "Desc": "search the named object . the namingenumeration that results from search() using object_scope will contain one or zero element . the enumeration contains one element if the named object satisfies the search filter specified in search() . the element will have as its name the empty string because the names of elements in the namingenumeration are relative to the target context -- in this case , the target context is the named object . it contains zero element if the named object does not satisfy the search filter specified in search() . the value of this constant is 0 ."}{"node_name": "ONELEVEL_SCOPE", "type": "field", "idx": 54061, "Desc": "search one level of the named context . the namingenumeration that results from search() using onelevel_scope contains elements with objects in the named context that satisfy the search filter specified in search() . the names of elements in the namingenumeration are atomic names relative to the named context . the value of this constant is 1 ."}{"node_name": "SUBTREE_SCOPE", "type": "field", "idx": 54062, "Desc": "search the entire subtree rooted at the named object . if the named object is not a dircontext , search only the object . if the named object is a dircontext , search the subtree rooted at the named object , including the named object itself . the search will not cross naming system boundaries . the namingenumeration that results from search() using subtree_scope contains elements of objects from the subtree ( including the named context ) that satisfy the search filter specified in search() . the names of elements in the namingenumeration are either relative to the named context or is a url string . if the named context satisfies the search filter , it is included in the enumeration with the empty string as its name . the value of this constant is 2 ."}{"node_name": "OBJECT_SCOPE", "type": "field", "idx": 54115, "Desc": "constant for expressing interest in events concerning the object named by the target . the value of this constant is 0 ."}{"node_name": "ONELEVEL_SCOPE", "type": "field", "idx": 54116, "Desc": "constant for expressing interest in events concerning objects in the context named by the target , excluding the context named by the target . the value of this constant is 1 ."}{"node_name": "SUBTREE_SCOPE", "type": "field", "idx": 54117, "Desc": "constant for expressing interest in events concerning objects in the subtree of the object named by the target , including the object named by the target . the value of this constant is 2 ."}{"node_name": "OBJECT_ADDED", "type": "field", "idx": 54160, "Desc": "naming event type for indicating that a new object has been added . the value of this constant is 0 ."}{"node_name": "OBJECT_REMOVED", "type": "field", "idx": 54161, "Desc": "naming event type for indicating that an object has been removed . the value of this constant is 1 ."}{"node_name": "OBJECT_RENAMED", "type": "field", "idx": 54162, "Desc": "naming event type for indicating that an object has been renamed . note that some services might fire multiple events for a single logical rename operation . for example , the rename operation might be implemented by adding a binding with the new name and removing the old binding . the old / new binding in namingevent may be null if the old name or new name is outside of the scope for which the listener has registered . when an interior node in the namespace tree has been renamed , the topmost node which is part of the listener's scope should used to generate a rename event . the extent to which this can be supported is provider-specific . for example , a service might generate rename notifications for all descendants of the changed interior node and the corresponding provider might not be able to prevent those notifications from being propagated to the listeners . the value of this constant is 2 ."}{"node_name": "OBJECT_CHANGED", "type": "field", "idx": 54163, "Desc": "naming event type for indicating that an object has been changed . the changes might include the object's attributes , or the object itself . note that some services might fire multiple events for a single modification . for example , the modification might be implemented by first removing the old binding and adding a new binding containing the same name but a different object . the value of this constant is 3 ."}{"node_name": "changeInfo", "type": "field", "idx": 54164, "Desc": "contains information about the change that generated this event ."}{"node_name": "type", "type": "field", "idx": 54165, "Desc": "contains the type of this event ."}{"node_name": "oldBinding", "type": "field", "idx": 54166, "Desc": "contains information about the object before the change ."}{"node_name": "newBinding", "type": "field", "idx": 54167, "Desc": "contains information about the object after the change ."}{"node_name": "myProps", "type": "field", "idx": 54196, "Desc": "the environment associated with this initialcontext . it is initialized to null and is updated by the constructor that accepts an environment or by the init() method ."}{"node_name": "defaultInitCtx", "type": "field", "idx": 54197, "Desc": "field holding the result of calling namingmanager.getinitialcontext() . it is set by getdefaultinitctx() the first time getdefaultinitctx() is called . subsequent invocations of getdefaultinitctx() return the value of defaultinitctx ."}{"node_name": "gotDefault", "type": "field", "idx": 54198, "Desc": "field indicating whether the initial context has been obtained by calling namingmanager.getinitialcontext() . if true , its result is in defaultinitctx ."}{"node_name": "id", "type": "field", "idx": 54234, "Desc": "the control's object identifier string ."}{"node_name": "criticality", "type": "field", "idx": 54235, "Desc": "the control's criticality ."}{"node_name": "value", "type": "field", "idx": 54236, "Desc": "the control's asn.1 ber encoded value ."}{"node_name": "CRITICAL", "type": "field", "idx": 54247, "Desc": "indicates a critical control . the value of this constant is true ."}{"node_name": "NONCRITICAL", "type": "field", "idx": 54248, "Desc": "indicates a non-critical control . the value of this constant is false ."}{"node_name": "CONTROL_FACTORIES", "type": "field", "idx": 54279, "Desc": "constant that holds the name of the environment property for specifying the list of control factories to use . the value of the property should be a colon-separated list of the fully qualified class names of factory classes that will create a control given another control . see controlfactory.getcontrolinstance() for details . this property may be specified in the environment , a system property , or one or more resource files . the value of this constant is \" java.naming.factory.control \" ."}{"node_name": "OID", "type": "field", "idx": 54356, "Desc": "the managereferral control's assigned object identifier is 2.16.840.1.113730.3.4.2 ."}{"node_name": "OID", "type": "field", "idx": 54361, "Desc": "the paged-results control's assigned object identifier is 1.2.840.113556.1.4.319 ."}{"node_name": "OID", "type": "field", "idx": 54370, "Desc": "the paged-results response control's assigned object identifier is 1.2.840.113556.1.4.319 ."}{"node_name": "OID", "type": "field", "idx": 54402, "Desc": "the server-side sort control's assigned object identifier is 1.2.840.113556.1.4.473 ."}{"node_name": "OID", "type": "field", "idx": 54423, "Desc": "the server-side sort response control's assigned object identifier is 1.2.840.113556.1.4.474 ."}{"node_name": "OID", "type": "field", "idx": 54444, "Desc": "the starttls extended request's assigned object identifier is 1.3.6.1.4.1.1466.20037 ."}{"node_name": "OID", "type": "field", "idx": 54454, "Desc": "the starttls extended response's assigned object identifier is 1.3.6.1.4.1.1466.20037 ."}{"node_name": "linkResolvedName", "type": "field", "idx": 54484, "Desc": "contains the part of the link that has been successfully resolved . it is a composite name and can be null . linkResolvedName is initialized by the constructors . you should access and manipulate linkResolvedName through its get and set methods ."}{"node_name": "linkResolvedObj", "type": "field", "idx": 54485, "Desc": "contains the object to which resolution of the part of the link was successful . can be null . linkResolvedObj is initialized by the constructors . you should access and manipulate linkResolvedObj through its get and set methods ."}{"node_name": "linkRemainingName", "type": "field", "idx": 54486, "Desc": "contains the remaining link name that has not been resolved yet . it is a composite name and can be null . linkRemainingName is initialized by the constructors . you should access and manipulate linkRemainingName through its get and set methods ."}{"node_name": "linkExplanation", "type": "field", "idx": 54487, "Desc": "contains the exception of why resolution of the link failed . can be null . linkExplanation is initialized by the constructors . you should access and manipulate linkExplanation through its get and set methods ."}{"node_name": "resolvedName", "type": "field", "idx": 54586, "Desc": "contains the part of the name that has been successfully resolved . it is a composite name and can be null . resolvedName is initialized by the constructors . you should access and manipulate resolvedName through its get and set methods ."}{"node_name": "resolvedObj", "type": "field", "idx": 54587, "Desc": "contains the object to which resolution of the part of the name was successful . can be null . resolvedObj is initialized by the constructors . you should access and manipulate resolvedObj through its get and set methods ."}{"node_name": "remainingName", "type": "field", "idx": 54588, "Desc": "contains the remaining name that has not been resolved yet . it is a composite name and can be null . remainingName is initialized by the constructors . you should access and manipulate remainingName through its get , set , \" append \" methods ."}{"node_name": "rootException", "type": "field", "idx": 54589, "Desc": "contains the original exception that caused this namingexception to be thrown . rootException is set if there is additional information that could be obtained from the original exception , or if the original exception could not be mapped to a subclass of namingexception . can be null . rootException predates the general-purpose exception chaining facility . the initcause ( throwable ) and getcause() methods are now the preferred means of accessing this information ."}{"node_name": "addrType", "type": "field", "idx": 54641, "Desc": "contains the type of this address ."}{"node_name": "className", "type": "field", "idx": 54651, "Desc": "contains the fully-qualified name of the class of the object to which this reference refers ."}{"node_name": "addrs", "type": "field", "idx": 54652, "Desc": "contains the addresses contained in this reference . initialized by constructor ."}{"node_name": "classFactory", "type": "field", "idx": 54653, "Desc": "contains the name of the factory class for creating an instance of the object to which this reference refers . initialized to null ."}{"node_name": "classFactoryLocation", "type": "field", "idx": 54654, "Desc": "contains the location of the factory class . initialized to null ."}{"node_name": "CPE", "type": "field", "idx": 54753, "Desc": "constant that holds the name of the environment property into which getcontinuationcontext() stores the value of its cannotproceedexception parameter . this property is inherited by the continuation context , and may be used by that context's service provider to inspect CPEs of the exception . the value of this constant is \" java.naming.spi.cannotproceedexception \" ."}{"node_name": "resolvedObj", "type": "field", "idx": 54794, "Desc": "field containing the object that was resolved to successfully . it can be null only when constructed using a subclass . constructors should always initialize this ."}{"node_name": "remainingName", "type": "field", "idx": 54795, "Desc": "field containing the remaining name yet to be resolved . it can be null only when constructed using a subclass . constructors should always initialize this ."}{"node_name": "hostnameVerifier", "type": "field", "idx": 54890, "Desc": "the hostnameverifier for this object ."}{"node_name": "SNI_HOST_NAME", "type": "field", "idx": 55337, "Desc": "the \" host_name \" type representing of a dns hostname ( see snihostname ) in a server name indication ( sni ) extension . the sni extension is a feature that extends the ssl / tls protocols to indicate what server name the client is attempting to connect to during handshaking . see section 3 , \" server name indication \" , of tls extensions ( rfc 6066 ) . the value of this constant is 0 ."}{"node_name": "DPI", "type": "field", "idx": 55605, "Desc": "value to indicate units of dots per inch ( dpi ) . it is actually the conversion factor by which to multiply dpi to yield dphi ( 100 ) ."}{"node_name": "DPCM", "type": "field", "idx": 55606, "Desc": "value to indicate units of dots per centimeter ( dpcm ) . it is actually the conversion factor by which to multiply dpcm to yield dphi ( 254 ) ."}{"node_name": "INCH", "type": "field", "idx": 55650, "Desc": "value to indicate units of inches ( in ) . it is actually the conversion factor by which to multiply inches to yield \u00b5m ( 25400 ) ."}{"node_name": "MM", "type": "field", "idx": 55651, "Desc": "value to indicate units of millimeters ( mm ) . it is actually the conversion factor by which to multiply mm to yield \u00b5m ( 1000 ) ."}{"node_name": "MONOCHROME", "type": "field", "idx": 55676, "Desc": "monochrome printing ."}{"node_name": "COLOR", "type": "field", "idx": 55677, "Desc": "color printing ."}{"node_name": "NOT_SUPPORTED", "type": "field", "idx": 55685, "Desc": "the printer is not capable of any type of color printing ."}{"node_name": "SUPPORTED", "type": "field", "idx": 55686, "Desc": "the printer is capable of some type of color printing , such as highlight color or full process color ."}{"node_name": "NONE", "type": "field", "idx": 55694, "Desc": "no compression is used ."}{"node_name": "DEFLATE", "type": "field", "idx": 55695, "Desc": "zip public domain inflate / deflate compression technology ."}{"node_name": "GZIP", "type": "field", "idx": 55696, "Desc": "gnu zip compression technology described in rfc 1952 ."}{"node_name": "COMPRESS", "type": "field", "idx": 55697, "Desc": "unix compression technology ."}{"node_name": "NATIVE", "type": "field", "idx": 55757, "Desc": "the native platform print dialog should be used ."}{"node_name": "COMMON", "type": "field", "idx": 55758, "Desc": "the cross-platform print dialog should be used ."}{"node_name": "FIDELITY_TRUE", "type": "field", "idx": 55774, "Desc": "the job must be printed exactly as specified . or else rejected ."}{"node_name": "FIDELITY_FALSE", "type": "field", "idx": 55775, "Desc": "the printer should make reasonable attempts to print the job , even if it cannot print it exactly as specified ."}{"node_name": "NONE", "type": "field", "idx": 55783, "Desc": "perform no binding ."}{"node_name": "STAPLE", "type": "field", "idx": 55784, "Desc": "bind the document ( s ) with one or more staples . the exact number and placement of the staples is site-defined ."}{"node_name": "COVER", "type": "field", "idx": 55785, "Desc": "this value is specified when it is desired to select a non-printed ( or pre-printed ) cover for the document . this does not supplant the specification of a printed cover ( on cover stock medium ) by the document itself ."}{"node_name": "BIND", "type": "field", "idx": 55786, "Desc": "this value indicates that a binding is to be applied to the document ; the type and placement of the binding is site-defined ."}{"node_name": "SADDLE_STITCH", "type": "field", "idx": 55787, "Desc": "bind the document ( s ) with one or more staples ( wire stitches ) along the middle fold . the exact number and placement of the staples and the middle fold is implementation- and / or site-defined ."}{"node_name": "EDGE_STITCH", "type": "field", "idx": 55788, "Desc": "bind the document ( s ) with one or more staples ( wire stitches ) along one edge . the exact number and placement of the staples is implementation- and / or site- defined ."}{"node_name": "STAPLE_TOP_LEFT", "type": "field", "idx": 55789, "Desc": "bind the document ( s ) with one or more staples in the top left corner ."}{"node_name": "STAPLE_BOTTOM_LEFT", "type": "field", "idx": 55790, "Desc": "bind the document ( s ) with one or more staples in the bottom left corner ."}{"node_name": "STAPLE_TOP_RIGHT", "type": "field", "idx": 55791, "Desc": "bind the document ( s ) with one or more staples in the top right corner ."}{"node_name": "STAPLE_BOTTOM_RIGHT", "type": "field", "idx": 55792, "Desc": "bind the document ( s ) with one or more staples in the bottom right corner ."}{"node_name": "EDGE_STITCH_LEFT", "type": "field", "idx": 55793, "Desc": "bind the document ( s ) with one or more staples ( wire stitches ) along the left edge . the exact number and placement of the staples is implementation- and / or site-defined ."}{"node_name": "EDGE_STITCH_TOP", "type": "field", "idx": 55794, "Desc": "bind the document ( s ) with one or more staples ( wire stitches ) along the top edge . the exact number and placement of the staples is implementation- and / or site-defined ."}{"node_name": "EDGE_STITCH_RIGHT", "type": "field", "idx": 55795, "Desc": "bind the document ( s ) with one or more staples ( wire stitches ) along the right edge . the exact number and placement of the staples is implementation- and / or site-defined ."}{"node_name": "EDGE_STITCH_BOTTOM", "type": "field", "idx": 55796, "Desc": "bind the document ( s ) with one or more staples ( wire stitches ) along the bottom edge . the exact number and placement of the staples is implementation- and / or site-defined ."}{"node_name": "STAPLE_DUAL_LEFT", "type": "field", "idx": 55797, "Desc": "bind the document ( s ) with two staples ( wire stitches ) along the left edge assuming a portrait document ( see above ) ."}{"node_name": "STAPLE_DUAL_TOP", "type": "field", "idx": 55798, "Desc": "bind the document ( s ) with two staples ( wire stitches ) along the top edge assuming a portrait document ( see above ) ."}{"node_name": "STAPLE_DUAL_RIGHT", "type": "field", "idx": 55799, "Desc": "bind the document ( s ) with two staples ( wire stitches ) along the right edge assuming a portrait document ( see above ) ."}{"node_name": "STAPLE_DUAL_BOTTOM", "type": "field", "idx": 55800, "Desc": "bind the document ( s ) with two staples ( wire stitches ) along the bottom edge assuming a portrait document ( see above ) ."}{"node_name": "NONE", "type": "field", "idx": 55920, "Desc": "no job sheets are printed ."}{"node_name": "STANDARD", "type": "field", "idx": 55921, "Desc": "one or more site specific standard job sheets are printed . e.g. a single start sheet is printed , or both start and end sheets are printed ."}{"node_name": "UNKNOWN", "type": "field", "idx": 55929, "Desc": "the job state is unknown ."}{"node_name": "PENDING", "type": "field", "idx": 55930, "Desc": "the job is a candidate to start processing , but is not yet processing ."}{"node_name": "PENDING_HELD", "type": "field", "idx": 55931, "Desc": "the job is not a candidate for processing for any number of reasons but will return to the pending state as soon as the reasons are no longer present . the job's jobstatereasons attribute must indicate why the job is no longer a candidate for processing ."}{"node_name": "PROCESSING", "type": "field", "idx": 55932, "Desc": "the job is processing . one or more of the following activities is occurring : the job is using , or is attempting to use , one or more purely software processes that are analyzing , creating , or interpreting a pdl , etc . the job is using , or is attempting to use , one or more hardware devices that are interpreting a pdl , making marks on a medium , and / or performing finishing , such as stapling , etc . the printer has made the job ready for printing , but the output device is not yet printing it , either because the job hasn't reached the output device or because the job is queued in the output device or some other spooler , awaiting the output device to print it . when the job is in the processing state , the entire job state includes the detailed status represented in the printer's printerstate and printerstatereasons attributes . implementations may , though they need not , include additional values in the job's jobstatereasons attribute to indicate the progress of the job , such as adding the job_printing value to indicate when the output device is actually making marks on paper and / or the processing_to_stop_point value to indicate that the printer is in the process of canceling or aborting the job ."}{"node_name": "PROCESSING_STOPPED", "type": "field", "idx": 55933, "Desc": "the job has stopped while processing for any number of reasons and will return to the processing state as soon as the reasons are no longer present . the job's jobstatereasons attribute may indicate why the job has stopped processing . for example , if the output device is stopped , the printer_stopped value may be included in the job's jobstatereasons attribute . note : when an output device is stopped , the device usually indicates its condition in human readable form locally at the device . a client can obtain more complete device status remotely by querying the printer's printerstate and printerstatereasons attributes ."}{"node_name": "CANCELED", "type": "field", "idx": 55934, "Desc": "the job has been canceled by some human agency , the printer has completed canceling the job , and all job status attributes have reached their final values for the job . while the printer is canceling the job , the job remains in its current state , but the job's jobstatereasons attribute should contain the processing_to_stop_point value and one of the canceled_by_user , canceled_by_operator , or canceled_at_device values . when the job moves to the canceled state , the processing_to_stop_point value , if present , must be removed , but the canceled_by_xxx value , if present , must remain ."}{"node_name": "ABORTED", "type": "field", "idx": 55935, "Desc": "the job has been aborted by the system ( usually while the job was in the processing or processing_stopped state ) , the printer has completed aborting the job , and all job status attributes have reached their final values for the job . while the printer is aborting the job , the job remains in its current state , but the job's jobstatereasons attribute should contain the processing_to_stop_point and aborted_by_system values . when the job moves to the aborted state , the processing_to_stop_point value , if present , must be removed , but the aborted_by_system value , if present , must remain ."}{"node_name": "COMPLETED", "type": "field", "idx": 55936, "Desc": "the job has completed successfully or with warnings or errors after processing , all of the job media sheets have been successfully stacked in the appropriate output bin ( s ) , and all job status attributes have reached their final values for the job . the job's jobstatereasons attribute should contain one of these values : completed_successfully , completed_with_warnings , or completed_with_errors ."}{"node_name": "JOB_INCOMING", "type": "field", "idx": 55944, "Desc": "the printer has created the print job , but the printer has not finished accessing or accepting all the print data yet ."}{"node_name": "JOB_DATA_INSUFFICIENT", "type": "field", "idx": 55945, "Desc": "the printer has created the print job , but the printer is expecting additional print data before it can move the job into the processing state . if a printer starts processing before it has received all data , the printer removes the job_data_insufficient reason , but the job_incoming reason remains . if a printer starts processing after it has received all data , the printer removes the job_data_insufficient and job_incoming reasons at the same time ."}{"node_name": "DOCUMENT_ACCESS_ERROR", "type": "field", "idx": 55946, "Desc": "the printer could not access one or more documents passed by reference ( i.e. , the print data representation object is a url ) . this reason is intended to cover any file access problem , including file does not exist and access denied because of an access control problem . whether the printer aborts the job and moves the job to the aborted job state or prints all documents that are accessible and moves the job to the completed job state and adds the completed_with_errors reason to the job's jobstatereasons attribute depends on implementation and / or site policy . this value should be supported if the printer supports doc flavors with url print data representation objects ."}{"node_name": "SUBMISSION_INTERRUPTED", "type": "field", "idx": 55947, "Desc": "the job was not completely submitted for some unforeseen reason . possibilities include ( 1 ) the printer has crashed before the job was fully submitted by the client , ( 2 ) the printer or the document transfer method has crashed in some non-recoverable way before the document data was entirely transferred to the printer , ( 3 ) the client crashed before the job was fully submitted ."}{"node_name": "JOB_OUTGOING", "type": "field", "idx": 55948, "Desc": "the printer is transmitting the job to the output device ."}{"node_name": "JOB_HOLD_UNTIL_SPECIFIED", "type": "field", "idx": 55949, "Desc": "the value of the job's jobholduntil attribute was specified with a date-time that is still in the future . the job must not be a candidate for processing until this reason is removed and there are no other reasons to hold the job . this value should be supported if the jobholduntil job template attribute is supported ."}{"node_name": "RESOURCES_ARE_NOT_READY", "type": "field", "idx": 55950, "Desc": "at least one of the resources needed by the job , such as media , fonts , resource objects , etc ., is not ready on any of the physical printers for which the job is a candidate . this condition may be detected when the job is accepted , or subsequently while the job is pending or processing , depending on implementation . the job may remain in its current state or be moved to the pending_held state , depending on implementation and / or job scheduling policy ."}{"node_name": "PRINTER_STOPPED_PARTLY", "type": "field", "idx": 55951, "Desc": "the value of the printer's printerstatereasons attribute contains a printerstatereason value of stopped_partly ."}{"node_name": "PRINTER_STOPPED", "type": "field", "idx": 55952, "Desc": "the value of the printer's printerstate attribute ia stopped ."}{"node_name": "JOB_INTERPRETING", "type": "field", "idx": 55953, "Desc": "the job is in the processing state , but more specifically , the printer ia interpreting the document data ."}{"node_name": "JOB_QUEUED", "type": "field", "idx": 55954, "Desc": "the job is in the processing state , but more specifically , the printer has queued the document data ."}{"node_name": "JOB_TRANSFORMING", "type": "field", "idx": 55955, "Desc": "the job is in the processing state , but more specifically , the printer is interpreting document data and producing another electronic representation ."}{"node_name": "JOB_QUEUED_FOR_MARKER", "type": "field", "idx": 55956, "Desc": "the job is in the pending_held , pending , or processing state , but more specifically , the printer has completed enough processing of the document to be able to start marking and the job is waiting for the marker . systems that require human intervention to release jobs put the job into the pending_held job state . systems that automatically select a job to use the marker put the job into the pending job state or keep the job in the processing job state while waiting for the marker , depending on implementation . all implementations put the job into ( or back into ) the processing state when marking does begin ."}{"node_name": "JOB_PRINTING", "type": "field", "idx": 55957, "Desc": "the output device is marking media . this value is useful for printers which spend a great deal of time processing ( 1 ) when no marking is happening and then want to show that marking is now happening or ( 2 ) when the job is in the process of being canceled or aborted while the job remains in the processing state , but the marking has not yet stopped so that impression or sheet counts are still increasing for the job ."}{"node_name": "JOB_CANCELED_BY_USER", "type": "field", "idx": 55958, "Desc": "the job was canceled by the owner of the job , i.e. , by a user whose authenticated identity is the same as the value of the originating user that created the print job , or by some other authorized end-user , such as a member of the job owner's security group . this value should be supported ."}{"node_name": "JOB_CANCELED_BY_OPERATOR", "type": "field", "idx": 55959, "Desc": "the job was canceled by the operator , i.e. , by a user who has been authenticated as having operator privileges ( whether local or remote ) . if the security policy is to allow anyone to cancel anyone's job , then this value may be used when the job is canceled by someone other than the owner of the job . for such a security policy , in effect , everyone is an operator as far as canceling jobs is concerned . this value should be supported if the implementation permits canceling by someone other than the owner of the job ."}{"node_name": "JOB_CANCELED_AT_DEVICE", "type": "field", "idx": 55960, "Desc": "the job was canceled by an unidentified local user , i.e. , a user at a console at the device . this value should be supported if the implementation supports canceling jobs at the console ."}{"node_name": "ABORTED_BY_SYSTEM", "type": "field", "idx": 55961, "Desc": "the job was aborted by the system . either the job ( 1 ) is in the process of being aborted , ( 2 ) has been aborted by the system and placed in the aborted state , or ( 3 ) has been aborted by the system and placed in the pending_held state , so that a user or operator can manually try the job again . this value should be supported ."}{"node_name": "UNSUPPORTED_COMPRESSION", "type": "field", "idx": 55962, "Desc": "the job was aborted by the system because the printer determined while attempting to decompress the document's data that the compression is actually not among those supported by the printer . this value must be supported , since compression is a required doc description attribute ."}{"node_name": "COMPRESSION_ERROR", "type": "field", "idx": 55963, "Desc": "the job was aborted by the system because the printer encountered an error in the document data while decompressing it . if the printer posts this reason , the document data has already passed any tests that would have led to the unsupported_compression job state reason ."}{"node_name": "UNSUPPORTED_DOCUMENT_FORMAT", "type": "field", "idx": 55964, "Desc": "the job was aborted by the system because the document data's document format ( doc flavor ) is not among those supported by the printer . if the client specifies a doc flavor with a mime type of \" application / octet-stream \" , the printer may abort the job if the printer cannot determine the document data's actual format through auto-sensing ( even if the printer supports the document format if specified explicitly ) . this value must be supported , since a doc flavor is required to be specified for each doc ."}{"node_name": "DOCUMENT_FORMAT_ERROR", "type": "field", "idx": 55965, "Desc": "the job was aborted by the system because the printer encountered an error in the document data while processing it . if the printer posts this reason , the document data has already passed any tests that would have led to the unsupported_document_format job state reason ."}{"node_name": "PROCESSING_TO_STOP_POINT", "type": "field", "idx": 55966, "Desc": "the requester has canceled the job or the printer has aborted the job , but the printer is still performing some actions on the job until a specified stop point occurs or job termination / cleanup is completed . if the implementation requires some measurable time to cancel the job in the processing or processing_stopped job states , the printer must use this reason to indicate that the printer is still performing some actions on the job while the job remains in the processing or processing_stopped state . after all the job's job description attributes have stopped incrementing , the printer moves the job from the processing state to the canceled or aborted job states ."}{"node_name": "SERVICE_OFF_LINE", "type": "field", "idx": 55967, "Desc": "the printer is off-line and accepting no jobs . all pending jobs are put into the pending_held state . this situation could be true if the service's or document transform's input is impaired or broken ."}{"node_name": "JOB_COMPLETED_SUCCESSFULLY", "type": "field", "idx": 55968, "Desc": "the job completed successfully . this value should be supported ."}{"node_name": "JOB_COMPLETED_WITH_WARNINGS", "type": "field", "idx": 55969, "Desc": "the job completed with warnings . this value should be supported if the implementation detects warnings ."}{"node_name": "JOB_COMPLETED_WITH_ERRORS", "type": "field", "idx": 55970, "Desc": "the job completed with errors ( and possibly warnings too ) . this value should be supported if the implementation detects errors ."}{"node_name": "JOB_RESTARTABLE", "type": "field", "idx": 55971, "Desc": "this job is retained and is currently able to be restarted . if job_restartable is contained in the job's jobstatereasons attribute , then the printer must accept a request to restart that job . this value should be supported if restarting jobs is supported . [ the capability for restarting jobs is not in the java print service api at present . ]"}{"node_name": "QUEUED_IN_DEVICE", "type": "field", "idx": 55972, "Desc": "the job has been forwarded to a device or print system that is unable to send back status . the printer sets the job's jobstate attribute to completed and adds the queued_in_device reason to the job's jobstatereasons attribute to indicate that the printer has no additional information about the job and never will have any better information ."}{"node_name": "NA_LETTER_WHITE", "type": "field", "idx": 56000, "Desc": "white letter paper ."}{"node_name": "NA_LETTER_TRANSPARENT", "type": "field", "idx": 56001, "Desc": "letter transparency ."}{"node_name": "ISO_A4_WHITE", "type": "field", "idx": 56002, "Desc": "white a4 paper ."}{"node_name": "ISO_A4_TRANSPARENT", "type": "field", "idx": 56003, "Desc": "a4 transparency ."}{"node_name": "INCH", "type": "field", "idx": 56009, "Desc": "value to indicate units of inches ( in ) . it is actually the conversion factor by which to multiply inches to yield \u00b5m ( 25400 ) ."}{"node_name": "MM", "type": "field", "idx": 56010, "Desc": "value to indicate units of millimeters ( mm ) . it is actually the conversion factor by which to multiply mm to yield \u00b5m ( 1000 ) ."}{"node_name": "A", "type": "field", "idx": 56043, "Desc": "specifies the engineering a size , 8.5 inch by 11 inch ."}{"node_name": "B", "type": "field", "idx": 56044, "Desc": "specifies the engineering b size , 11 inch by 17 inch ."}{"node_name": "C", "type": "field", "idx": 56045, "Desc": "specifies the engineering c size , 17 inch by 22 inch ."}{"node_name": "D", "type": "field", "idx": 56046, "Desc": "specifies the engineering d size , 22 inch by 34 inch ."}{"node_name": "E", "type": "field", "idx": 56047, "Desc": "specifies the engineering e size , 34 inch by 44 inch ."}{"node_name": "A0", "type": "field", "idx": 56049, "Desc": "specifies the iso a0 size , 841 mm by 1189 mm ."}{"node_name": "A1", "type": "field", "idx": 56050, "Desc": "specifies the iso a1 size , 594 mm by 841 mm ."}{"node_name": "A2", "type": "field", "idx": 56051, "Desc": "specifies the iso a2 size , 420 mm by 594 mm ."}{"node_name": "A3", "type": "field", "idx": 56052, "Desc": "specifies the iso a3 size , 297 mm by 420 mm ."}{"node_name": "A4", "type": "field", "idx": 56053, "Desc": "specifies the iso a4 size , 210 mm by 297 mm ."}{"node_name": "A5", "type": "field", "idx": 56054, "Desc": "specifies the iso a5 size , 148 mm by 210 mm ."}{"node_name": "A6", "type": "field", "idx": 56055, "Desc": "specifies the iso a6 size , 105 mm by 148 mm ."}{"node_name": "A7", "type": "field", "idx": 56056, "Desc": "specifies the iso a7 size , 74 mm by 105 mm ."}{"node_name": "A8", "type": "field", "idx": 56057, "Desc": "specifies the iso a8 size , 52 mm by 74 mm ."}{"node_name": "A9", "type": "field", "idx": 56058, "Desc": "specifies the iso a9 size , 37 mm by 52 mm ."}{"node_name": "A10", "type": "field", "idx": 56059, "Desc": "specifies the iso a10 size , 26 mm by 37 mm ."}{"node_name": "B0", "type": "field", "idx": 56060, "Desc": "specifies the iso b0 size , 1000 mm by 1414 mm ."}{"node_name": "B1", "type": "field", "idx": 56061, "Desc": "specifies the iso b1 size , 707 mm by 1000 mm ."}{"node_name": "B2", "type": "field", "idx": 56062, "Desc": "specifies the iso b2 size , 500 mm by 707 mm ."}{"node_name": "B3", "type": "field", "idx": 56063, "Desc": "specifies the iso b3 size , 353 mm by 500 mm ."}{"node_name": "B4", "type": "field", "idx": 56064, "Desc": "specifies the iso b4 size , 250 mm by 353 mm ."}{"node_name": "B5", "type": "field", "idx": 56065, "Desc": "specifies the iso b5 size , 176 mm by 250 mm ."}{"node_name": "B6", "type": "field", "idx": 56066, "Desc": "specifies the iso b6 size , 125 mm by 176 mm ."}{"node_name": "B7", "type": "field", "idx": 56067, "Desc": "specifies the iso b7 size , 88 mm by 125 mm ."}{"node_name": "B8", "type": "field", "idx": 56068, "Desc": "specifies the iso b8 size , 62 mm by 88 mm ."}{"node_name": "B9", "type": "field", "idx": 56069, "Desc": "specifies the iso b9 size , 44 mm by 62 mm ."}{"node_name": "B10", "type": "field", "idx": 56070, "Desc": "specifies the iso b10 size , 31 mm by 44 mm ."}{"node_name": "C3", "type": "field", "idx": 56071, "Desc": "specifies the iso c3 size , 324 mm by 458 mm ."}{"node_name": "C4", "type": "field", "idx": 56072, "Desc": "specifies the iso c4 size , 229 mm by 324 mm ."}{"node_name": "C5", "type": "field", "idx": 56073, "Desc": "specifies the iso c5 size , 162 mm by 229 mm ."}{"node_name": "C6", "type": "field", "idx": 56074, "Desc": "specifies the iso c6 size , 114 mm by 162 mm ."}{"node_name": "DESIGNATED_LONG", "type": "field", "idx": 56075, "Desc": "specifies the iso designated long size , 110 mm by 220 mm ."}{"node_name": "B0", "type": "field", "idx": 56077, "Desc": "specifies the jis b0 size , 1030 mm by 1456 mm ."}{"node_name": "B1", "type": "field", "idx": 56078, "Desc": "specifies the jis b1 size , 728 mm by 1030 mm ."}{"node_name": "B2", "type": "field", "idx": 56079, "Desc": "specifies the jis b2 size , 515 mm by 728 mm ."}{"node_name": "B3", "type": "field", "idx": 56080, "Desc": "specifies the jis b3 size , 364 mm by 515 mm ."}{"node_name": "B4", "type": "field", "idx": 56081, "Desc": "specifies the jis b4 size , 257 mm by 364 mm ."}{"node_name": "B5", "type": "field", "idx": 56082, "Desc": "specifies the jis b5 size , 182 mm by 257 mm ."}{"node_name": "B6", "type": "field", "idx": 56083, "Desc": "specifies the jis b6 size , 128 mm by 182 mm ."}{"node_name": "B7", "type": "field", "idx": 56084, "Desc": "specifies the jis b7 size , 91 mm by 128 mm ."}{"node_name": "B8", "type": "field", "idx": 56085, "Desc": "specifies the jis b8 size , 64 mm by 91 mm ."}{"node_name": "B9", "type": "field", "idx": 56086, "Desc": "specifies the jis b9 size , 45 mm by 64 mm ."}{"node_name": "B10", "type": "field", "idx": 56087, "Desc": "specifies the jis b10 size , 32 mm by 45 mm ."}{"node_name": "CHOU_1", "type": "field", "idx": 56088, "Desc": "specifies the jis chou ( \" long \") #1 envelope size , 142 mm by 332 mm ."}{"node_name": "CHOU_2", "type": "field", "idx": 56089, "Desc": "specifies the jis chou ( \" long \") #2 envelope size , 119 mm by 277 mm ."}{"node_name": "CHOU_3", "type": "field", "idx": 56090, "Desc": "specifies the jis chou ( \" long \") #3 envelope size , 120 mm by 235 mm ."}{"node_name": "CHOU_4", "type": "field", "idx": 56091, "Desc": "specifies the jis chou ( \" long \") #4 envelope size , 90 mm by 205 mm ."}{"node_name": "CHOU_30", "type": "field", "idx": 56092, "Desc": "specifies the jis chou ( \" long \") #30 envelope size , 92 mm by 235 mm ."}{"node_name": "CHOU_40", "type": "field", "idx": 56093, "Desc": "specifies the jis chou ( \" long \") #40 envelope size , 90 mm by 225 mm ."}{"node_name": "KAKU_0", "type": "field", "idx": 56094, "Desc": "specifies the jis kaku ( \" square \") #0 envelope size , 287 mm by 382 mm ."}{"node_name": "KAKU_1", "type": "field", "idx": 56095, "Desc": "specifies the jis kaku ( \" square \") #1 envelope size , 270 mm by 382 mm ."}{"node_name": "KAKU_2", "type": "field", "idx": 56096, "Desc": "specifies the jis kaku ( \" square \") #2 envelope size , 240 mm by 332 mm ."}{"node_name": "KAKU_3", "type": "field", "idx": 56097, "Desc": "specifies the jis kaku ( \" square \") #3 envelope size , 216 mm by 277 mm ."}{"node_name": "KAKU_4", "type": "field", "idx": 56098, "Desc": "specifies the jis kaku ( \" square \") #4 envelope size , 197 mm by 267 mm ."}{"node_name": "KAKU_5", "type": "field", "idx": 56099, "Desc": "specifies the jis kaku ( \" square \") #5 envelope size , 190 mm by 240 mm ."}{"node_name": "KAKU_6", "type": "field", "idx": 56100, "Desc": "specifies the jis kaku ( \" square \") #6 envelope size , 162 mm by 229 mm ."}{"node_name": "KAKU_7", "type": "field", "idx": 56101, "Desc": "specifies the jis kaku ( \" square \") #7 envelope size , 142 mm by 205 mm ."}{"node_name": "KAKU_8", "type": "field", "idx": 56102, "Desc": "specifies the jis kaku ( \" square \") #8 envelope size , 119 mm by 197 mm ."}{"node_name": "KAKU_20", "type": "field", "idx": 56103, "Desc": "specifies the jis kaku ( \" square \") #20 envelope size , 229 mm by 324 mm ."}{"node_name": "KAKU_A4", "type": "field", "idx": 56104, "Desc": "specifies the jis kaku ( \" square \") a4 envelope size , 228 mm by 312 mm ."}{"node_name": "YOU_1", "type": "field", "idx": 56105, "Desc": "specifies the jis you ( \" western \") #1 envelope size , 120 mm by 176 mm ."}{"node_name": "YOU_2", "type": "field", "idx": 56106, "Desc": "specifies the jis you ( \" western \") #2 envelope size , 114 mm by 162 mm ."}{"node_name": "YOU_3", "type": "field", "idx": 56107, "Desc": "specifies the jis you ( \" western \") #3 envelope size , 98 mm by 148 mm ."}{"node_name": "YOU_4", "type": "field", "idx": 56108, "Desc": "specifies the jis you ( \" western \") #4 envelope size , 105 mm by 235 mm ."}{"node_name": "YOU_5", "type": "field", "idx": 56109, "Desc": "specifies the jis you ( \" western \") #5 envelope size , 95 mm by 217 mm ."}{"node_name": "YOU_6", "type": "field", "idx": 56110, "Desc": "specifies the jis you ( \" western \") #6 envelope size , 98 mm by 190 mm ."}{"node_name": "YOU_7", "type": "field", "idx": 56111, "Desc": "specifies the jis you ( \" western \") #7 envelope size , 92 mm by 165 mm ."}{"node_name": "LETTER", "type": "field", "idx": 56143, "Desc": "specifies the north american letter size , 8.5 inches by 11 inches ."}{"node_name": "LEGAL", "type": "field", "idx": 56144, "Desc": "specifies the north american legal size , 8.5 inches by 14 inches ."}{"node_name": "NA_5X7", "type": "field", "idx": 56145, "Desc": "specifies the north american 5 inch by 7 inch paper ."}{"node_name": "NA_8X10", "type": "field", "idx": 56146, "Desc": "specifies the north american 8 inch by 10 inch paper ."}{"node_name": "NA_NUMBER_9_ENVELOPE", "type": "field", "idx": 56147, "Desc": "specifies the north american number 9 business envelope size , 3.875 inches by 8.875 inches ."}{"node_name": "NA_NUMBER_10_ENVELOPE", "type": "field", "idx": 56148, "Desc": "specifies the north american number 10 business envelope size , 4.125 inches by 9.5 inches ."}{"node_name": "NA_NUMBER_11_ENVELOPE", "type": "field", "idx": 56149, "Desc": "specifies the north american number 11 business envelope size , 4.5 inches by 10.375 inches ."}{"node_name": "NA_NUMBER_12_ENVELOPE", "type": "field", "idx": 56150, "Desc": "specifies the north american number 12 business envelope size , 4.75 inches by 11 inches ."}{"node_name": "NA_NUMBER_14_ENVELOPE", "type": "field", "idx": 56151, "Desc": "specifies the north american number 14 business envelope size , 5 inches by 11.5 inches ."}{"node_name": "NA_6X9_ENVELOPE", "type": "field", "idx": 56152, "Desc": "specifies the north american 6 inch by 9 inch envelope size ."}{"node_name": "NA_7X9_ENVELOPE", "type": "field", "idx": 56153, "Desc": "specifies the north american 7 inch by 9 inch envelope size ."}{"node_name": "NA_9x11_ENVELOPE", "type": "field", "idx": 56154, "Desc": "specifies the north american 9 inch by 11 inch envelope size ."}{"node_name": "NA_9x12_ENVELOPE", "type": "field", "idx": 56155, "Desc": "specifies the north american 9 inch by 12 inch envelope size ."}{"node_name": "NA_10x13_ENVELOPE", "type": "field", "idx": 56156, "Desc": "specifies the north american 10 inch by 13 inch envelope size ."}{"node_name": "NA_10x14_ENVELOPE", "type": "field", "idx": 56157, "Desc": "specifies the north american 10 inch by 14 inch envelope size ."}{"node_name": "NA_10X15_ENVELOPE", "type": "field", "idx": 56158, "Desc": "specifies the north american 10 inch by 15 inch envelope size ."}{"node_name": "EXECUTIVE", "type": "field", "idx": 56160, "Desc": "specifies the executive size , 7.25 inches by 10.5 inches ."}{"node_name": "LEDGER", "type": "field", "idx": 56161, "Desc": "specifies the ledger size , 11 inches by 17 inches ."}{"node_name": "TABLOID", "type": "field", "idx": 56162, "Desc": "specifies the tabloid size , 11 inches by 17 inches ."}{"node_name": "INVOICE", "type": "field", "idx": 56163, "Desc": "specifies the invoice size , 5.5 inches by 8.5 inches ."}{"node_name": "FOLIO", "type": "field", "idx": 56164, "Desc": "specifies the folio size , 8.5 inches by 13 inches ."}{"node_name": "QUARTO", "type": "field", "idx": 56165, "Desc": "specifies the quarto size , 8.5 inches by 10.83 inches ."}{"node_name": "ITALY_ENVELOPE", "type": "field", "idx": 56166, "Desc": "specifies the italy envelope size , 110 mm by 230 mm ."}{"node_name": "MONARCH_ENVELOPE", "type": "field", "idx": 56167, "Desc": "specifies the monarch envelope size , 3.87 inch by 7.5 inch ."}{"node_name": "PERSONAL_ENVELOPE", "type": "field", "idx": 56168, "Desc": "specifies the personal envelope size , 3.625 inch by 6.5 inch ."}{"node_name": "JAPANESE_POSTCARD", "type": "field", "idx": 56169, "Desc": "specifies the japanese postcard size , 100 mm by 148 mm ."}{"node_name": "JAPANESE_DOUBLE_POSTCARD", "type": "field", "idx": 56170, "Desc": "specifies the japanese double postcard size , 148 mm by 200 mm ."}{"node_name": "ISO_A0", "type": "field", "idx": 56172, "Desc": "a0 size ."}{"node_name": "ISO_A1", "type": "field", "idx": 56173, "Desc": "a1 size ."}{"node_name": "ISO_A2", "type": "field", "idx": 56174, "Desc": "a2 size ."}{"node_name": "ISO_A3", "type": "field", "idx": 56175, "Desc": "a3 size ."}{"node_name": "ISO_A4", "type": "field", "idx": 56176, "Desc": "a4 size ."}{"node_name": "ISO_A5", "type": "field", "idx": 56177, "Desc": "a5 size ."}{"node_name": "ISO_A6", "type": "field", "idx": 56178, "Desc": "a6 size ."}{"node_name": "ISO_A7", "type": "field", "idx": 56179, "Desc": "a7 size ."}{"node_name": "ISO_A8", "type": "field", "idx": 56180, "Desc": "a8 size ."}{"node_name": "ISO_A9", "type": "field", "idx": 56181, "Desc": "a9 size ."}{"node_name": "ISO_A10", "type": "field", "idx": 56182, "Desc": "a10 size ."}{"node_name": "ISO_B0", "type": "field", "idx": 56183, "Desc": "iso b0 size ."}{"node_name": "ISO_B1", "type": "field", "idx": 56184, "Desc": "iso b1 size ."}{"node_name": "ISO_B2", "type": "field", "idx": 56185, "Desc": "iso b2 size ."}{"node_name": "ISO_B3", "type": "field", "idx": 56186, "Desc": "iso b3 size ."}{"node_name": "ISO_B4", "type": "field", "idx": 56187, "Desc": "iso b4 size ."}{"node_name": "ISO_B5", "type": "field", "idx": 56188, "Desc": "iso b5 size ."}{"node_name": "ISO_B6", "type": "field", "idx": 56189, "Desc": "iso b6 size ."}{"node_name": "ISO_B7", "type": "field", "idx": 56190, "Desc": "iso b7 size ."}{"node_name": "ISO_B8", "type": "field", "idx": 56191, "Desc": "iso b8 size ."}{"node_name": "ISO_B9", "type": "field", "idx": 56192, "Desc": "iso b9 size ."}{"node_name": "ISO_B10", "type": "field", "idx": 56193, "Desc": "iso b10 size ."}{"node_name": "JIS_B0", "type": "field", "idx": 56194, "Desc": "jis b0 size ."}{"node_name": "JIS_B1", "type": "field", "idx": 56195, "Desc": "jis b1 size ."}{"node_name": "JIS_B2", "type": "field", "idx": 56196, "Desc": "jis b2 size ."}{"node_name": "JIS_B3", "type": "field", "idx": 56197, "Desc": "jis b3 size ."}{"node_name": "JIS_B4", "type": "field", "idx": 56198, "Desc": "jis b4 size ."}{"node_name": "JIS_B5", "type": "field", "idx": 56199, "Desc": "jis b5 size ."}{"node_name": "JIS_B6", "type": "field", "idx": 56200, "Desc": "jis b6 size ."}{"node_name": "JIS_B7", "type": "field", "idx": 56201, "Desc": "jis b7 size ."}{"node_name": "JIS_B8", "type": "field", "idx": 56202, "Desc": "jis b8 size ."}{"node_name": "JIS_B9", "type": "field", "idx": 56203, "Desc": "jis b9 size ."}{"node_name": "JIS_B10", "type": "field", "idx": 56204, "Desc": "jis b10 size ."}{"node_name": "ISO_C0", "type": "field", "idx": 56205, "Desc": "iso c0 size ."}{"node_name": "ISO_C1", "type": "field", "idx": 56206, "Desc": "iso c1 size ."}{"node_name": "ISO_C2", "type": "field", "idx": 56207, "Desc": "iso c2 size ."}{"node_name": "ISO_C3", "type": "field", "idx": 56208, "Desc": "iso c3 size ."}{"node_name": "ISO_C4", "type": "field", "idx": 56209, "Desc": "iso c4 size ."}{"node_name": "ISO_C5", "type": "field", "idx": 56210, "Desc": "iso c5 size ."}{"node_name": "ISO_C6", "type": "field", "idx": 56211, "Desc": "letter size ."}{"node_name": "NA_LETTER", "type": "field", "idx": 56212, "Desc": "letter size ."}{"node_name": "NA_LEGAL", "type": "field", "idx": 56213, "Desc": "legal size ."}{"node_name": "EXECUTIVE", "type": "field", "idx": 56214, "Desc": "executive size ."}{"node_name": "LEDGER", "type": "field", "idx": 56215, "Desc": "ledger size ."}{"node_name": "TABLOID", "type": "field", "idx": 56216, "Desc": "tabloid size ."}{"node_name": "INVOICE", "type": "field", "idx": 56217, "Desc": "invoice size ."}{"node_name": "FOLIO", "type": "field", "idx": 56218, "Desc": "folio size ."}{"node_name": "QUARTO", "type": "field", "idx": 56219, "Desc": "quarto size ."}{"node_name": "JAPANESE_POSTCARD", "type": "field", "idx": 56220, "Desc": "japanese postcard size ."}{"node_name": "JAPANESE_DOUBLE_POSTCARD", "type": "field", "idx": 56221, "Desc": "japanese double postcard size ."}{"node_name": "A", "type": "field", "idx": 56222, "Desc": "a size ."}{"node_name": "B", "type": "field", "idx": 56223, "Desc": "b size ."}{"node_name": "C", "type": "field", "idx": 56224, "Desc": "c size ."}{"node_name": "D", "type": "field", "idx": 56225, "Desc": "d size ."}{"node_name": "E", "type": "field", "idx": 56226, "Desc": "e size ."}{"node_name": "ISO_DESIGNATED_LONG", "type": "field", "idx": 56227, "Desc": "iso designated long size ."}{"node_name": "ITALY_ENVELOPE", "type": "field", "idx": 56228, "Desc": "italy envelope size ."}{"node_name": "MONARCH_ENVELOPE", "type": "field", "idx": 56229, "Desc": "monarch envelope size ."}{"node_name": "PERSONAL_ENVELOPE", "type": "field", "idx": 56230, "Desc": "personal envelope size ."}{"node_name": "NA_NUMBER_9_ENVELOPE", "type": "field", "idx": 56231, "Desc": "number 9 envelope size ."}{"node_name": "NA_NUMBER_10_ENVELOPE", "type": "field", "idx": 56232, "Desc": "number 10 envelope size ."}{"node_name": "NA_NUMBER_11_ENVELOPE", "type": "field", "idx": 56233, "Desc": "number 11 envelope size ."}{"node_name": "NA_NUMBER_12_ENVELOPE", "type": "field", "idx": 56234, "Desc": "number 12 envelope size ."}{"node_name": "NA_NUMBER_14_ENVELOPE", "type": "field", "idx": 56235, "Desc": "number 14 envelope size ."}{"node_name": "NA_6X9_ENVELOPE", "type": "field", "idx": 56236, "Desc": "6x9 north american envelope size ."}{"node_name": "NA_7X9_ENVELOPE", "type": "field", "idx": 56237, "Desc": "7x9 north american envelope size ."}{"node_name": "NA_9X11_ENVELOPE", "type": "field", "idx": 56238, "Desc": "9x11 north american envelope size ."}{"node_name": "NA_9X12_ENVELOPE", "type": "field", "idx": 56239, "Desc": "9x12 north american envelope size ."}{"node_name": "NA_10X13_ENVELOPE", "type": "field", "idx": 56240, "Desc": "10x13 north american envelope size ."}{"node_name": "NA_10X14_ENVELOPE", "type": "field", "idx": 56241, "Desc": "10x14north american envelope size ."}{"node_name": "NA_10X15_ENVELOPE", "type": "field", "idx": 56242, "Desc": "10x15 north american envelope size ."}{"node_name": "NA_5X7", "type": "field", "idx": 56243, "Desc": "5x7 north american paper ."}{"node_name": "NA_8X10", "type": "field", "idx": 56244, "Desc": "8x10 north american paper ."}{"node_name": "TOP", "type": "field", "idx": 56250, "Desc": "the top input tray in the printer ."}{"node_name": "MIDDLE", "type": "field", "idx": 56251, "Desc": "the middle input tray in the printer ."}{"node_name": "BOTTOM", "type": "field", "idx": 56252, "Desc": "the bottom input tray in the printer ."}{"node_name": "ENVELOPE", "type": "field", "idx": 56253, "Desc": "the envelope input tray in the printer ."}{"node_name": "MANUAL", "type": "field", "idx": 56254, "Desc": "the manual feed input tray in the printer ."}{"node_name": "LARGE_CAPACITY", "type": "field", "idx": 56255, "Desc": "the large capacity input tray in the printer ."}{"node_name": "MAIN", "type": "field", "idx": 56256, "Desc": "the main input tray in the printer ."}{"node_name": "SIDE", "type": "field", "idx": 56257, "Desc": "the side input tray ."}{"node_name": "SINGLE_DOCUMENT", "type": "field", "idx": 56263, "Desc": "single document -- see above for further information ."}{"node_name": "SEPARATE_DOCUMENTS_UNCOLLATED_COPIES", "type": "field", "idx": 56264, "Desc": "separate documents uncollated copies -- see above for further information ."}{"node_name": "SEPARATE_DOCUMENTS_COLLATED_COPIES", "type": "field", "idx": 56265, "Desc": "separate documents collated copies -- see above for further information ."}{"node_name": "SINGLE_DOCUMENT_NEW_SHEET", "type": "field", "idx": 56266, "Desc": "single document new sheet -- see above for further information ."}{"node_name": "PORTRAIT", "type": "field", "idx": 56307, "Desc": "the content will be imaged across the short edge of the medium ."}{"node_name": "LANDSCAPE", "type": "field", "idx": 56308, "Desc": "the content will be imaged across the long edge of the medium . landscape is defined to be a rotation of the print-stream page to be imaged by +90 degrees with respect to the medium ( i.e. anti-clockwise ) from the portrait orientation . note : the +90 direction was chosen because simple finishing on the long edge is the same edge whether portrait or landscape ."}{"node_name": "REVERSE_LANDSCAPE", "type": "field", "idx": 56309, "Desc": "the content will be imaged across the long edge of the medium , but in the opposite manner from landscape . reverse-landscape is defined to be a rotation of the print-stream page to be imaged by -90 degrees with respect to the medium ( i.e. clockwise ) from the portrait orientation . note : the reverse_landscape value was added because some applications rotate landscape -90 degrees from portrait , rather than +90 degrees ."}{"node_name": "REVERSE_PORTRAIT", "type": "field", "idx": 56310, "Desc": "the content will be imaged across the short edge of the medium , but in the opposite manner from portrait . reverse-portrait is defined to be a rotation of the print-stream page to be imaged by 180 degrees with respect to the medium from the portrait orientation . note : the reverse_portrait value was added for use with the finishings attribute in cases where the opposite edge is desired for finishing a portrait document on simple finishing devices that have only one finishing position . thus a \" text / plain \" portrait document can be stapled \" on the right \" by a simple finishing device as is common use with some middle eastern languages such as hebrew ."}{"node_name": "NOT_ATTEMPTED", "type": "field", "idx": 56355, "Desc": "the printer makes no attempt to make the external job attribute values take precedence over embedded instructions in the documents ' print data ."}{"node_name": "ATTEMPTED", "type": "field", "idx": 56356, "Desc": "the printer attempts to make the external job attribute values take precedence over embedded instructions in the documents ' print data , however there is no guarantee ."}{"node_name": "TOBOTTOM_TORIGHT", "type": "field", "idx": 56364, "Desc": "pages are laid out in columns starting at the top left , proceeding towards the bottom & right ."}{"node_name": "TOBOTTOM_TOLEFT", "type": "field", "idx": 56365, "Desc": "pages are laid out in columns starting at the top right , proceeding towards the bottom & left ."}{"node_name": "TOTOP_TORIGHT", "type": "field", "idx": 56366, "Desc": "pages are laid out in columns starting at the bottom left , proceeding towards the top & right ."}{"node_name": "TOTOP_TOLEFT", "type": "field", "idx": 56367, "Desc": "pages are laid out in columns starting at the bottom right , proceeding towards the top & left ."}{"node_name": "TORIGHT_TOBOTTOM", "type": "field", "idx": 56368, "Desc": "pages are laid out in rows starting at the top left , proceeding towards the right & bottom ."}{"node_name": "TORIGHT_TOTOP", "type": "field", "idx": 56369, "Desc": "pages are laid out in rows starting at the bottom left , proceeding towards the right & top ."}{"node_name": "TOLEFT_TOBOTTOM", "type": "field", "idx": 56370, "Desc": "pages are laid out in rows starting at the top right , proceeding towards the left & bottom ."}{"node_name": "TOLEFT_TOTOP", "type": "field", "idx": 56371, "Desc": "pages are laid out in rows starting at the bottom right , proceeding towards the left & top ."}{"node_name": "NOT_ACCEPTING_JOBS", "type": "field", "idx": 56385, "Desc": "the printer is currently rejecting any jobs sent to it ."}{"node_name": "ACCEPTING_JOBS", "type": "field", "idx": 56386, "Desc": "the printer is currently accepting jobs ."}{"node_name": "UNKNOWN", "type": "field", "idx": 56449, "Desc": "the printer state is unknown ."}{"node_name": "IDLE", "type": "field", "idx": 56450, "Desc": "indicates that new jobs can start processing without waiting ."}{"node_name": "PROCESSING", "type": "field", "idx": 56451, "Desc": "indicates that jobs are processing ; new jobs will wait before processing ."}{"node_name": "STOPPED", "type": "field", "idx": 56452, "Desc": "indicates that no jobs can be processed and intervention is required ."}{"node_name": "OTHER", "type": "field", "idx": 56460, "Desc": "the printer has detected an error other than ones listed below ."}{"node_name": "MEDIA_NEEDED", "type": "field", "idx": 56461, "Desc": "a tray has run out of media ."}{"node_name": "MEDIA_JAM", "type": "field", "idx": 56462, "Desc": "the device has a media jam ."}{"node_name": "MOVING_TO_PAUSED", "type": "field", "idx": 56463, "Desc": "someone has paused the printer , but the device ( s ) are taking an appreciable time to stop . later , when all output has stopped , the printerstate becomes stopped , and the paused value replaces the moving_to_paused value in the printerstatereasons attribute . this value must be supported if the printer can be paused and the implementation takes significant time to pause a device in certain circumstances ."}{"node_name": "PAUSED", "type": "field", "idx": 56464, "Desc": "someone has paused the printer and the printer's printerstate is stopped . in this state , a printer must not produce printed output , but it must perform other operations requested by a client . if a printer had been printing a job when the printer was paused , the printer must resume printing that job when the printer is no longer paused and leave no evidence in the printed output of such a pause . this value must be supported if the printer can be paused ."}{"node_name": "SHUTDOWN", "type": "field", "idx": 56465, "Desc": "someone has removed a printer from service , and the device may be powered down or physically removed . in this state , a printer must not produce printed output , and unless the printer is realized by a print server that is still active , the printer must perform no other operations requested by a client . if a printer had been printing a job when it was shut down , the printer need not resume printing that job when the printer is no longer shut down . if the printer resumes printing such a job , it may leave evidence in the printed output of such a shutdown , e.g. the part printed before the shutdown may be printed a second time after the shutdown ."}{"node_name": "CONNECTING_TO_DEVICE", "type": "field", "idx": 56466, "Desc": "the printer has scheduled a job on the output device and is in the process of connecting to a shared network output device ( and might not be able to actually start printing the job for an arbitrarily long time depending on the usage of the output device by other servers on the network ) ."}{"node_name": "TIMED_OUT", "type": "field", "idx": 56467, "Desc": "the server was able to connect to the output device ( or is always connected ) , but was unable to get a response from the output device ."}{"node_name": "STOPPING", "type": "field", "idx": 56468, "Desc": "the printer is in the process of stopping the device and will be stopped in a while . when the device is stopped , the printer will change the printerstate to stopped . the stopping reason is never an error , even for a printer with a single output device . when an output device ceases accepting jobs , the printer's printerstatereasons will have this reason while the output device completes printing ."}{"node_name": "STOPPED_PARTLY", "type": "field", "idx": 56469, "Desc": "when a printer controls more than one output device , this reason indicates that one or more output devices are stopped . if the reason's severity is a report , fewer than half of the output devices are stopped . if the reason's severity is a warning , half or more but fewer than all of the output devices are stopped ."}{"node_name": "TONER_LOW", "type": "field", "idx": 56470, "Desc": "the device is low on toner ."}{"node_name": "TONER_EMPTY", "type": "field", "idx": 56471, "Desc": "the device is out of toner ."}{"node_name": "SPOOL_AREA_FULL", "type": "field", "idx": 56472, "Desc": "the limit of persistent storage allocated for spooling has been reached . the printer is temporarily unable to accept more jobs . the printer will remove this reason when it is able to accept more jobs . this value should be used by a non-spooling printer that only accepts one or a small number jobs at a time or a spooling printer that has filled the spool space ."}{"node_name": "COVER_OPEN", "type": "field", "idx": 56473, "Desc": "one or more covers on the device are open ."}{"node_name": "INTERLOCK_OPEN", "type": "field", "idx": 56474, "Desc": "one or more interlock devices on the printer are unlocked ."}{"node_name": "DOOR_OPEN", "type": "field", "idx": 56475, "Desc": "one or more doors on the device are open ."}{"node_name": "INPUT_TRAY_MISSING", "type": "field", "idx": 56476, "Desc": "one or more input trays are not in the device ."}{"node_name": "MEDIA_LOW", "type": "field", "idx": 56477, "Desc": "at least one input tray is low on media ."}{"node_name": "MEDIA_EMPTY", "type": "field", "idx": 56478, "Desc": "at least one input tray is empty ."}{"node_name": "OUTPUT_TRAY_MISSING", "type": "field", "idx": 56479, "Desc": "one or more output trays are not in the device ."}{"node_name": "OUTPUT_AREA_ALMOST_FULL", "type": "field", "idx": 56480, "Desc": "one or more output areas are almost full ( e.g. tray , stacker , collator ) ."}{"node_name": "OUTPUT_AREA_FULL", "type": "field", "idx": 56481, "Desc": "one or more output areas are full ( e.g. tray , stacker , collator ) ."}{"node_name": "MARKER_SUPPLY_LOW", "type": "field", "idx": 56482, "Desc": "the device is low on at least one marker supply ( e.g. toner , ink , ribbon ) ."}{"node_name": "MARKER_SUPPLY_EMPTY", "type": "field", "idx": 56483, "Desc": "the device is out of at least one marker supply ( e.g. toner , ink , ribbon ) ."}{"node_name": "MARKER_WASTE_ALMOST_FULL", "type": "field", "idx": 56484, "Desc": "the device marker supply waste receptacle is almost full ."}{"node_name": "MARKER_WASTE_FULL", "type": "field", "idx": 56485, "Desc": "the device marker supply waste receptacle is full ."}{"node_name": "FUSER_OVER_TEMP", "type": "field", "idx": 56486, "Desc": "the fuser temperature is above normal ."}{"node_name": "FUSER_UNDER_TEMP", "type": "field", "idx": 56487, "Desc": "the fuser temperature is below normal ."}{"node_name": "OPC_NEAR_EOL", "type": "field", "idx": 56488, "Desc": "the optical photo conductor is near end of life ."}{"node_name": "OPC_LIFE_OVER", "type": "field", "idx": 56489, "Desc": "the optical photo conductor is no longer functioning ."}{"node_name": "DEVELOPER_LOW", "type": "field", "idx": 56490, "Desc": "the device is low on developer ."}{"node_name": "DEVELOPER_EMPTY", "type": "field", "idx": 56491, "Desc": "the device is out of developer ."}{"node_name": "INTERPRETER_RESOURCE_UNAVAILABLE", "type": "field", "idx": 56492, "Desc": "an interpreter resource is unavailable ( e.g. , font , form ) ."}{"node_name": "DRAFT", "type": "field", "idx": 56523, "Desc": "lowest quality available on the printer ."}{"node_name": "NORMAL", "type": "field", "idx": 56524, "Desc": "normal or intermediate quality on the printer ."}{"node_name": "HIGH", "type": "field", "idx": 56525, "Desc": "highest quality available on the printer ."}{"node_name": "FTP", "type": "field", "idx": 56541, "Desc": "file transfer protocol ( ftp ) ."}{"node_name": "HTTP", "type": "field", "idx": 56542, "Desc": "hypertext transfer protocol ( http ) ."}{"node_name": "HTTPS", "type": "field", "idx": 56543, "Desc": "secure hypertext transfer protocol ( https ) ."}{"node_name": "GOPHER", "type": "field", "idx": 56544, "Desc": "gopher protocol ."}{"node_name": "NEWS", "type": "field", "idx": 56545, "Desc": "usenet news ."}{"node_name": "NNTP", "type": "field", "idx": 56546, "Desc": "usenet news using network news transfer protocol ( nntp ) ."}{"node_name": "WAIS", "type": "field", "idx": 56547, "Desc": "wide area information server ( wais ) protocol ."}{"node_name": "FILE", "type": "field", "idx": 56548, "Desc": "host-specific file names ."}{"node_name": "REPORT", "type": "field", "idx": 56564, "Desc": "indicates that the printerstatereason is a \" report \" ( least severe ) . an implementation may choose to omit some or all reports . some reports specify finer granularity about the printer state ; others serve as a precursor to a warning . a report must contain nothing that could affect the printed output ."}{"node_name": "WARNING", "type": "field", "idx": 56565, "Desc": "indicates that the printerstatereason is a \" warning . \" an implementation may choose to omit some or all warnings . warnings serve as a precursor to an error . a warning must contain nothing that prevents a job from completing , though in some cases the output may be of lower quality ."}{"node_name": "ERROR", "type": "field", "idx": 56566, "Desc": "indicates that the printerstatereason is an \" error \" ( most severe ) . an implementation must include all errors . if this attribute contains one or more errors , the printer's printerstate must be stopped ."}{"node_name": "UNCOLLATED", "type": "field", "idx": 56574, "Desc": "sheets within a document appear in uncollated order when multiple copies are printed ."}{"node_name": "COLLATED", "type": "field", "idx": 56575, "Desc": "sheets within a document appear in collated order when multiple copies are printed ."}{"node_name": "ONE_SIDED", "type": "field", "idx": 56583, "Desc": "imposes each consecutive print-stream page upon the same side of consecutive media sheets ."}{"node_name": "TWO_SIDED_LONG_EDGE", "type": "field", "idx": 56584, "Desc": "imposes each consecutive pair of print-stream pages upon front and back sides of consecutive media sheets , such that the orientation of each pair of print-stream pages on the medium would be correct for the reader as if for binding on the long edge . this imposition is also known as \" duplex \" ( see duplex ) ."}{"node_name": "TWO_SIDED_SHORT_EDGE", "type": "field", "idx": 56585, "Desc": "imposes each consecutive pair of print-stream pages upon front and back sides of consecutive media sheets , such that the orientation of each pair of print-stream pages on the medium would be correct for the reader as if for binding on the short edge . this imposition is also known as \" tumble \" ( see tumble ) ."}{"node_name": "DUPLEX", "type": "field", "idx": 56586, "Desc": "an alias for \" two sided long edge \" ( see two_sided_long_edge ) ."}{"node_name": "TUMBLE", "type": "field", "idx": 56587, "Desc": "an alias for \" two sided short edge \" ( see two_sided_short_edge ) ."}{"node_name": "TEXT_PLAIN_HOST", "type": "field", "idx": 56629, "Desc": "doc flavor with mime type = \" text / plain \" , encoded in the host platform encoding . see hostencoding . print data representation class name = \" [ b \" ( byte array ) ."}{"node_name": "TEXT_PLAIN_UTF_8", "type": "field", "idx": 56630, "Desc": "doc flavor with mime type = \" text / plain ; charset= utf-8 \" , print data representation class name = \" [ b \" ( byte array ) ."}{"node_name": "TEXT_PLAIN_UTF_16", "type": "field", "idx": 56631, "Desc": "doc flavor with mime type = \" text / plain ; charset= utf-16 \" , print data representation class name = \" [ b \" ( byte array ) ."}{"node_name": "TEXT_PLAIN_UTF_16BE", "type": "field", "idx": 56632, "Desc": "doc flavor with mime type = \" text / plain ; charset= utf-16be \" ( big-endian byte ordering ) , print data representation class name = \" [ b \" ( byte array ) ."}{"node_name": "TEXT_PLAIN_UTF_16LE", "type": "field", "idx": 56633, "Desc": "doc flavor with mime type = \" text / plain ; charset= utf-16le \" ( little-endian byte ordering ) , print data representation class name = \" [ b \" ( byte array ) ."}{"node_name": "TEXT_PLAIN_US_ASCII", "type": "field", "idx": 56634, "Desc": "doc flavor with mime type = \" text / plain ; charset= us-ascii \" , print data representation class name = \" [ b \" ( byte array ) ."}{"node_name": "TEXT_HTML_HOST", "type": "field", "idx": 56635, "Desc": "doc flavor with mime type = \" text / html \" , encoded in the host platform encoding . see hostencoding . print data representation class name = \" [ b \" ( byte array ) ."}{"node_name": "TEXT_HTML_UTF_8", "type": "field", "idx": 56636, "Desc": "doc flavor with mime type = \" text / html ; charset= utf-8 \" , print data representation class name = \" [ b \" ( byte array ) ."}{"node_name": "TEXT_HTML_UTF_16", "type": "field", "idx": 56637, "Desc": "doc flavor with mime type = \" text / html ; charset= utf-16 \" , print data representation class name = \" [ b \" ( byte array ) ."}{"node_name": "TEXT_HTML_UTF_16BE", "type": "field", "idx": 56638, "Desc": "doc flavor with mime type = \" text / html ; charset= utf-16be \" ( big-endian byte ordering ) , print data representation class name = \" [ b \" ( byte array ) ."}{"node_name": "TEXT_HTML_UTF_16LE", "type": "field", "idx": 56639, "Desc": "doc flavor with mime type = \" text / html ; charset= utf-16le \" ( little-endian byte ordering ) , print data representation class name = \" [ b \" ( byte array ) ."}{"node_name": "TEXT_HTML_US_ASCII", "type": "field", "idx": 56640, "Desc": "doc flavor with mime type = \" text / html ; charset= us-ascii \" , print data representation class name = \" [ b \" ( byte array ) ."}{"node_name": "PDF", "type": "field", "idx": 56641, "Desc": "doc flavor with mime type = \" application / pdf \" , print data representation class name = \" [ b \" ( byte array ) ."}{"node_name": "POSTSCRIPT", "type": "field", "idx": 56642, "Desc": "doc flavor with mime type = \" application / postscript \" , print data representation class name = \" [ b \" ( byte array ) ."}{"node_name": "PCL", "type": "field", "idx": 56643, "Desc": "doc flavor with mime type = \" application / vnd.hp-pcl \" , print data representation class name = \" [ b \" ( byte array ) ."}{"node_name": "GIF", "type": "field", "idx": 56644, "Desc": "doc flavor with mime type = \" image / gif \" , print data representation class name = \" [ b \" ( byte array ) ."}{"node_name": "JPEG", "type": "field", "idx": 56645, "Desc": "doc flavor with mime type = \" image / jpeg \" , print data representation class name = \" [ b \" ( byte array ) ."}{"node_name": "PNG", "type": "field", "idx": 56646, "Desc": "doc flavor with mime type = \" image / png \" , print data representation class name = \" [ b \" ( byte array ) ."}{"node_name": "AUTOSENSE", "type": "field", "idx": 56647, "Desc": "doc flavor with mime type = \" application / octet-stream \" , print data representation class name = \" [ b \" ( byte array ) . the client must determine that data described using this docflavor is valid for the printer ."}{"node_name": "TEXT_PLAIN", "type": "field", "idx": 56651, "Desc": "doc flavor with mime type = \" text / plain ; charset= utf-16 \" , print data representation class name = \" [ c \" ( character array ) ."}{"node_name": "TEXT_HTML", "type": "field", "idx": 56652, "Desc": "doc flavor with mime type = \" text / html ; charset= utf-16 \" , print data representation class name = \" [ c \" ( character array ) ."}{"node_name": "TEXT_PLAIN_HOST", "type": "field", "idx": 56656, "Desc": "doc flavor with mime type = \" text / plain \" , encoded in the host platform encoding . see hostencoding . print data representation class name = \" java.io.inputstream \" ( byte stream ) ."}{"node_name": "TEXT_PLAIN_UTF_8", "type": "field", "idx": 56657, "Desc": "doc flavor with mime type = \" text / plain ; charset= utf-8 \" , print data representation class name = \" java.io.inputstream \" ( byte stream ) ."}{"node_name": "TEXT_PLAIN_UTF_16", "type": "field", "idx": 56658, "Desc": "doc flavor with mime type = \" text / plain ; charset= utf-16 \" , print data representation class name = \" java.io.inputstream \" ( byte stream ) ."}{"node_name": "TEXT_PLAIN_UTF_16BE", "type": "field", "idx": 56659, "Desc": "doc flavor with mime type = \" text / plain ; charset= utf-16be \" ( big-endian byte ordering ) , print data representation class name = \" java.io.inputstream \" ( byte stream ) ."}{"node_name": "TEXT_PLAIN_UTF_16LE", "type": "field", "idx": 56660, "Desc": "doc flavor with mime type = \" text / plain ; charset= utf-16le \" ( little-endian byte ordering ) , print data representation class name = \" java.io.inputstream \" ( byte stream ) ."}{"node_name": "TEXT_PLAIN_US_ASCII", "type": "field", "idx": 56661, "Desc": "doc flavor with mime type = \" text / plain ; charset= us-ascii \" , print data representation class name = \" java.io.inputstream \" ( byte stream ) ."}{"node_name": "TEXT_HTML_HOST", "type": "field", "idx": 56662, "Desc": "doc flavor with mime type = \" text / html \" , encoded in the host platform encoding . see hostencoding . print data representation class name = \" java.io.inputstream \" ( byte stream ) ."}{"node_name": "TEXT_HTML_UTF_8", "type": "field", "idx": 56663, "Desc": "doc flavor with mime type = \" text / html ; charset= utf-8 \" , print data representation class name = \" java.io.inputstream \" ( byte stream ) ."}{"node_name": "TEXT_HTML_UTF_16", "type": "field", "idx": 56664, "Desc": "doc flavor with mime type = \" text / html ; charset= utf-16 \" , print data representation class name = \" java.io.inputstream \" ( byte stream ) ."}{"node_name": "TEXT_HTML_UTF_16BE", "type": "field", "idx": 56665, "Desc": "doc flavor with mime type = \" text / html ; charset= utf-16be \" ( big-endian byte ordering ) , print data representation class name = \" java.io.inputstream \" ( byte stream ) ."}{"node_name": "TEXT_HTML_UTF_16LE", "type": "field", "idx": 56666, "Desc": "doc flavor with mime type = \" text / html ; charset= utf-16le \" ( little-endian byte ordering ) , print data representation class name = \" java.io.inputstream \" ( byte stream ) ."}{"node_name": "TEXT_HTML_US_ASCII", "type": "field", "idx": 56667, "Desc": "doc flavor with mime type = \" text / html ; charset= us-ascii \" , print data representation class name = \" java.io.inputstream \" ( byte stream ) ."}{"node_name": "PDF", "type": "field", "idx": 56668, "Desc": "doc flavor with mime type = \" application / pdf \" , print data representation class name = \" java.io.inputstream \" ( byte stream ) ."}{"node_name": "POSTSCRIPT", "type": "field", "idx": 56669, "Desc": "doc flavor with mime type = \" application / postscript \" , print data representation class name = \" java.io.inputstream \" ( byte stream ) ."}{"node_name": "PCL", "type": "field", "idx": 56670, "Desc": "doc flavor with mime type = \" application / vnd.hp-pcl \" , print data representation class name = \" java.io.inputstream \" ( byte stream ) ."}{"node_name": "GIF", "type": "field", "idx": 56671, "Desc": "doc flavor with mime type = \" image / gif \" , print data representation class name = \" java.io.inputstream \" ( byte stream ) ."}{"node_name": "JPEG", "type": "field", "idx": 56672, "Desc": "doc flavor with mime type = \" image / jpeg \" , print data representation class name = \" java.io.inputstream \" ( byte stream ) ."}{"node_name": "PNG", "type": "field", "idx": 56673, "Desc": "doc flavor with mime type = \" image / png \" , print data representation class name = \" java.io.inputstream \" ( byte stream ) ."}{"node_name": "AUTOSENSE", "type": "field", "idx": 56674, "Desc": "doc flavor with mime type = \" application / octet-stream \" , print data representation class name = \" java.io.inputstream \" ( byte stream ) . the client must determine that data described using this docflavor is valid for the printer ."}{"node_name": "hostEncoding", "type": "field", "idx": 56678, "Desc": "a string representing the host operating system encoding . this will follow the conventions documented in rfc 2278 : iana charset registration procedures except where historical names are returned for compatibility with previous versions of the java platform . the value returned from method is valid only for the vm which returns it , for use in a docflavor . this is the charset for all the \" host \" pre-defined docflavors in the executing vm ."}{"node_name": "TEXT_PLAIN", "type": "field", "idx": 56693, "Desc": "doc flavor with mime type = \" text / plain ; charset= utf-16 \" , print data representation class name = \" java.io.reader \" ( character stream ) ."}{"node_name": "TEXT_HTML", "type": "field", "idx": 56694, "Desc": "doc flavor with mime type = \" text / html ; charset= utf-16 \" , print data representation class name = \" java.io.reader \" ( character stream ) ."}{"node_name": "RENDERABLE_IMAGE", "type": "field", "idx": 56698, "Desc": "service formatted print data doc flavor with print data representation class name = \" java.awt.image.renderable.renderableimage \" ( renderable image object ) ."}{"node_name": "PRINTABLE", "type": "field", "idx": 56699, "Desc": "service formatted print data doc flavor with print data representation class name = \" java.awt.print.printable \" ( printable object ) ."}{"node_name": "PAGEABLE", "type": "field", "idx": 56700, "Desc": "service formatted print data doc flavor with print data representation class name = \" java.awt.print.pageable \" ( pageable object ) ."}{"node_name": "TEXT_PLAIN", "type": "field", "idx": 56704, "Desc": "doc flavor with mime type = \" text / plain ; charset= utf-16 \" , print data representation class name = \" java.lang.string \" ."}{"node_name": "TEXT_HTML", "type": "field", "idx": 56705, "Desc": "doc flavor with mime type = \" text / html ; charset= utf-16 \" , print data representation class name = \" java.lang.string \" ."}{"node_name": "TEXT_PLAIN_HOST", "type": "field", "idx": 56709, "Desc": "doc flavor with mime type = \" text / plain \" , encoded in the host platform encoding . see hostencoding . print data representation class name = \" java.net.url \" ( byte stream ) ."}{"node_name": "TEXT_PLAIN_UTF_8", "type": "field", "idx": 56710, "Desc": "doc flavor with mime type = \" text / plain ; charset= utf-8 \" , print data representation class name = \" java.net.url \" ( byte stream ) ."}{"node_name": "TEXT_PLAIN_UTF_16", "type": "field", "idx": 56711, "Desc": "doc flavor with mime type = \" text / plain ; charset= utf-16 \" , print data representation class name = java.net.url \"\" ( byte stream ) ."}{"node_name": "TEXT_PLAIN_UTF_16BE", "type": "field", "idx": 56712, "Desc": "doc flavor with mime type = \" text / plain ; charset= utf-16be \" ( big-endian byte ordering ) , print data representation class name = \" java.net.url \" ( byte stream ) ."}{"node_name": "TEXT_PLAIN_UTF_16LE", "type": "field", "idx": 56713, "Desc": "doc flavor with mime type = \" text / plain ; charset= utf-16le \" ( little-endian byte ordering ) , print data representation class name = \" java.net.url \" ( byte stream ) ."}{"node_name": "TEXT_PLAIN_US_ASCII", "type": "field", "idx": 56714, "Desc": "doc flavor with mime type = \" text / plain ; charset= us-ascii \" , print data representation class name = \" java.net.url \" ( byte stream ) ."}{"node_name": "TEXT_HTML_HOST", "type": "field", "idx": 56715, "Desc": "doc flavor with mime type = \" text / html \" , encoded in the host platform encoding . see hostencoding . print data representation class name = \" java.net.url \" ( byte stream ) ."}{"node_name": "TEXT_HTML_UTF_8", "type": "field", "idx": 56716, "Desc": "doc flavor with mime type = \" text / html ; charset= utf-8 \" , print data representation class name = \" java.net.url \" ( byte stream ) ."}{"node_name": "TEXT_HTML_UTF_16", "type": "field", "idx": 56717, "Desc": "doc flavor with mime type = \" text / html ; charset= utf-16 \" , print data representation class name = \" java.net.url \" ( byte stream ) ."}{"node_name": "TEXT_HTML_UTF_16BE", "type": "field", "idx": 56718, "Desc": "doc flavor with mime type = \" text / html ; charset= utf-16be \" ( big-endian byte ordering ) , print data representation class name = \" java.net.url \" ( byte stream ) ."}{"node_name": "TEXT_HTML_UTF_16LE", "type": "field", "idx": 56719, "Desc": "doc flavor with mime type = \" text / html ; charset= utf-16le \" ( little-endian byte ordering ) , print data representation class name = \" java.net.url \" ( byte stream ) ."}{"node_name": "TEXT_HTML_US_ASCII", "type": "field", "idx": 56720, "Desc": "doc flavor with mime type = \" text / html ; charset= us-ascii \" , print data representation class name = \" java.net.url \" ( byte stream ) ."}{"node_name": "PDF", "type": "field", "idx": 56721, "Desc": "doc flavor with mime type = \" application / pdf \" , print data representation class name = \" java.net.url \" ."}{"node_name": "POSTSCRIPT", "type": "field", "idx": 56722, "Desc": "doc flavor with mime type = \" application / postscript \" , print data representation class name = \" java.net.url \" ."}{"node_name": "PCL", "type": "field", "idx": 56723, "Desc": "doc flavor with mime type = \" application / vnd.hp-pcl \" , print data representation class name = \" java.net.url \" ."}{"node_name": "GIF", "type": "field", "idx": 56724, "Desc": "doc flavor with mime type = \" image / gif \" , print data representation class name = \" java.net.url \" ."}{"node_name": "JPEG", "type": "field", "idx": 56725, "Desc": "doc flavor with mime type = \" image / jpeg \" , print data representation class name = \" java.net.url \" ."}{"node_name": "PNG", "type": "field", "idx": 56726, "Desc": "doc flavor with mime type = \" image / png \" , print data representation class name = \" java.net.url \" ."}{"node_name": "AUTOSENSE", "type": "field", "idx": 56727, "Desc": "doc flavor with mime type = \" application / octet-stream \" , print data representation class name = \" java.net.url \" . the client must determine that data described using this docflavor is valid for the printer ."}{"node_name": "JOB_CANCELED", "type": "field", "idx": 56773, "Desc": "the job was canceled by the printservice ."}{"node_name": "JOB_COMPLETE", "type": "field", "idx": 56774, "Desc": "the document is completely printed ."}{"node_name": "JOB_FAILED", "type": "field", "idx": 56775, "Desc": "the print service reports that the job cannot be completed . the application must resubmit the job ."}{"node_name": "REQUIRES_ATTENTION", "type": "field", "idx": 56776, "Desc": "the print service indicates that a - possibly transient - problem may require external intervention before the print service can continue . one example of an event that can generate this message is when the printer runs out of paper ."}{"node_name": "NO_MORE_EVENTS", "type": "field", "idx": 56777, "Desc": "not all print services may be capable of delivering interesting events , or even telling when a job is complete . this message indicates the print job has no further information or communication with the print service . this message should always be delivered if a terminal event ( completed / failed / canceled ) is not delivered . for example , if messages such as job_complete have not been received before receiving this message , the only inference that should be drawn is that the print service does not support delivering such an event ."}{"node_name": "DATA_TRANSFER_COMPLETE", "type": "field", "idx": 56778, "Desc": "the job is not necessarily printed yet , but the data has been transferred successfully from the client to the print service . the client may free data resources ."}{"node_name": "JCOMPONENT_UI", "type": "field", "idx": 56891, "Desc": "denotes a ui implemented as a swing component . the value of the string is the fully qualified classname : \" javax.swing.jcomponent \" ."}{"node_name": "PANEL_UI", "type": "field", "idx": 56892, "Desc": "denotes a ui implemented as an awt panel . the value of the string is the fully qualified classname : \" java.awt.panel \""}{"node_name": "DIALOG_UI", "type": "field", "idx": 56893, "Desc": "denotes a ui implemented as an awt dialog . the value of the string is the fully qualified classname : \" java.awt.dialog \""}{"node_name": "JDIALOG_UI", "type": "field", "idx": 56894, "Desc": "denotes a ui implemented as a swing dialog . the value of the string is the fully qualified classname : \" javax.swing.jdialog \""}{"node_name": "ABOUT_UIROLE", "type": "field", "idx": 56895, "Desc": "denotes a ui which performs an informative \" about \" role ."}{"node_name": "ADMIN_UIROLE", "type": "field", "idx": 56896, "Desc": "denotes a ui which performs an administrative role ."}{"node_name": "MAIN_UIROLE", "type": "field", "idx": 56897, "Desc": "denotes a ui which performs the normal end user role ."}{"node_name": "RESERVED_UIROLE", "type": "field", "idx": 56898, "Desc": "not a valid role but role id's greater than this may be used for private roles supported by a service . knowledge of the function performed by this role is required to make proper use of it ."}{"node_name": "URIInaccessible", "type": "field", "idx": 56932, "Desc": "indicates that the printer cannot access the uri address . for example , the printer might report this error if it goes to get the print data and cannot even establish a connection to the uri address ."}{"node_name": "URISchemeNotSupported", "type": "field", "idx": 56933, "Desc": "indicates that the printer does not support the uri scheme ( \" http \" , \" ftp \" , etc . ) in the uri address ."}{"node_name": "URIOtherProblem", "type": "field", "idx": 56934, "Desc": "indicates any kind of problem not specifically identified by the other reasons ."}{"node_name": "context", "type": "field", "idx": 56965, "Desc": "the default scriptcontext of this abstractscriptengine ."}{"node_name": "ENGINE_SCOPE", "type": "field", "idx": 57033, "Desc": "enginescope attributes are visible during the lifetime of a single scriptengine and a set of attributes is maintained for each engine ."}{"node_name": "GLOBAL_SCOPE", "type": "field", "idx": 57034, "Desc": "globalscope attributes are visible to all engines created by same scriptenginefactory ."}{"node_name": "ARGV", "type": "field", "idx": 57065, "Desc": "reserved key for a named value that passes an array of positional arguments to a script ."}{"node_name": "FILENAME", "type": "field", "idx": 57066, "Desc": "reserved key for a named value that is the name of the file being executed ."}{"node_name": "ENGINE", "type": "field", "idx": 57067, "Desc": "reserved key for a named value that is the name of the scriptengine implementation ."}{"node_name": "ENGINE_VERSION", "type": "field", "idx": 57068, "Desc": "reserved key for a named value that identifies the version of the scriptengine implementation ."}{"node_name": "NAME", "type": "field", "idx": 57069, "Desc": "reserved key for a named value that identifies the short name of the scripting language . the name is used by the scriptenginemanager to locate a scriptengine with a given name in the getenginebyname method ."}{"node_name": "LANGUAGE", "type": "field", "idx": 57070, "Desc": "reserved key for a named value that is the full name of scripting language supported by the implementation ."}{"node_name": "LANGUAGE_VERSION", "type": "field", "idx": 57071, "Desc": "reserved key for the named value that identifies the version of the scripting language supported by the implementation ."}{"node_name": "writer", "type": "field", "idx": 57184, "Desc": "this is the writer to be used to output from scripts . by default , a printwriter based on system.out is used . accessor methods getwriter , setwriter are used to manage writer ."}{"node_name": "errorWriter", "type": "field", "idx": 57185, "Desc": "this is the writer to be used to output errors from scripts . by default , a printwriter based on system.err is used . accessor methods geterrorwriter , seterrorwriter are used to manage errorWriter ."}{"node_name": "reader", "type": "field", "idx": 57186, "Desc": "this is the reader to be used for input from scripts . by default , a inputstreamreader based on system.in is used and default charset is used by this reader . accessor methods getreader , setreader are used to manage reader ."}{"node_name": "engineScope", "type": "field", "idx": 57187, "Desc": "this is the engine scope bindings . by default , a simplebindings is used . accessor methods setbindings , getbindings are used to manage engineScope ."}{"node_name": "globalScope", "type": "field", "idx": 57188, "Desc": "this is the global scope bindings . by default , a null value ( which means no global scope ) is used . accessor methods setbindings , getbindings are used to manage globalScope ."}{"node_name": "UNSPECIFIED_OPTION", "type": "field", "idx": 57235, "Desc": "unspecified option type . the getoptiontype method returns this value if this confirmationcallback was instantiated with options instead of an optiontype ."}{"node_name": "YES_NO_OPTION", "type": "field", "idx": 57236, "Desc": "yes / no confirmation option . an underlying security service specifies this as the optiontype to a confirmationcallback constructor if it requires a confirmation which can be answered with either yes or no ."}{"node_name": "YES_NO_CANCEL_OPTION", "type": "field", "idx": 57237, "Desc": "yes / no / cancel confirmation option . an underlying security service specifies this as the optiontype to a confirmationcallback constructor if it requires a confirmation which can be answered with either yes , no or cancel ."}{"node_name": "OK_CANCEL_OPTION", "type": "field", "idx": 57238, "Desc": "ok / cancel confirmation option . an underlying security service specifies this as the optiontype to a confirmationcallback constructor if it requires a confirmation which can be answered with either ok or cancel ."}{"node_name": "YES", "type": "field", "idx": 57239, "Desc": "yes option . if an optiontype was specified to this confirmationcallback , this option may be specified as a defaultoption or returned as the selected index ."}{"node_name": "NO", "type": "field", "idx": 57240, "Desc": "no option . if an optiontype was specified to this confirmationcallback , this option may be specified as a defaultoption or returned as the selected index ."}{"node_name": "CANCEL", "type": "field", "idx": 57241, "Desc": "cancel option . if an optiontype was specified to this confirmationcallback , this option may be specified as a defaultoption or returned as the selected index ."}{"node_name": "OK", "type": "field", "idx": 57242, "Desc": "ok option . if an optiontype was specified to this confirmationcallback , this option may be specified as a defaultoption or returned as the selected index ."}{"node_name": "INFORMATION", "type": "field", "idx": 57243, "Desc": "information message type ."}{"node_name": "WARNING", "type": "field", "idx": 57244, "Desc": "warning message type ."}{"node_name": "ERROR", "type": "field", "idx": 57245, "Desc": "error message type ."}{"node_name": "INFORMATION", "type": "field", "idx": 57310, "Desc": "information message ."}{"node_name": "WARNING", "type": "field", "idx": 57311, "Desc": "warning message ."}{"node_name": "ERROR", "type": "field", "idx": 57312, "Desc": "error message ."}{"node_name": "KRB_NT_UNKNOWN", "type": "field", "idx": 57393, "Desc": "unknown name type ."}{"node_name": "KRB_NT_PRINCIPAL", "type": "field", "idx": 57394, "Desc": "user principal name type ."}{"node_name": "KRB_NT_SRV_INST", "type": "field", "idx": 57395, "Desc": "service and other unique instance ( krbtgt ) name type ."}{"node_name": "KRB_NT_SRV_HST", "type": "field", "idx": 57396, "Desc": "service with host name as instance ( telnet , rcommands ) name type ."}{"node_name": "KRB_NT_SRV_XHST", "type": "field", "idx": 57397, "Desc": "service with host as remaining components name type ."}{"node_name": "KRB_NT_UID", "type": "field", "idx": 57398, "Desc": "unique id name type ."}{"node_name": "KRB_NT_ENTERPRISE", "type": "field", "idx": 57399, "Desc": "enterprise name ( alias )"}{"node_name": "REQUIRED", "type": "field", "idx": 57508, "Desc": "required loginmodule ."}{"node_name": "REQUISITE", "type": "field", "idx": 57509, "Desc": "requisite loginmodule ."}{"node_name": "SUFFICIENT", "type": "field", "idx": 57510, "Desc": "sufficient loginmodule ."}{"node_name": "OPTIONAL", "type": "field", "idx": 57511, "Desc": "optional loginmodule ."}{"node_name": "RFC1779", "type": "field", "idx": 57658, "Desc": "rfc 1779 string format of distinguished names ."}{"node_name": "RFC2253", "type": "field", "idx": 57659, "Desc": "rfc 2253 string format of distinguished names ."}{"node_name": "CANONICAL", "type": "field", "idx": 57660, "Desc": "canonical string format of distinguished names ."}{"node_name": "QOP", "type": "field", "idx": 57733, "Desc": "the name of a property that specifies the quality-of-protection to use . the property contains a comma-separated , ordered list of quality-of-protection values that the client or server is willing to support . a qop value is one of \" auth \" - authentication only \" auth-int \" - authentication plus integrity protection \" auth-conf \" - authentication plus integrity and confidentiality protection the order of the list specifies the preference order of the client or server . if this property is absent , the default qop is \" auth \" . the value of this constant is \" javax.security.sasl.qop \" ."}{"node_name": "STRENGTH", "type": "field", "idx": 57734, "Desc": "the name of a property that specifies the cipher strength to use . the property contains a comma-separated , ordered list of cipher strength values that the client or server is willing to support . a strength value is one of \" low \" \" medium \" \" high \" the order of the list specifies the preference order of the client or server . an implementation should allow configuration of the meaning of these values . an application may use the java cryptography extension ( jce ) with jce-aware mechanisms to control the selection of cipher suites that match the strength values . if this property is absent , the default strength is \" high , medium , low \" . the value of this constant is \" javax.security.sasl.strength \" ."}{"node_name": "SERVER_AUTH", "type": "field", "idx": 57735, "Desc": "the name of a property that specifies whether the server must authenticate to the client . the property contains \" true \" if the server must authenticate the to client ; \" false \" otherwise . the default is \" false \" . the value of this constant is \" javax.security.sasl.server.authentication \" ."}{"node_name": "BOUND_SERVER_NAME", "type": "field", "idx": 57736, "Desc": "the name of a property that specifies the bound server name for an unbound server . a server is created as an unbound server by setting the servername argument in createsaslserver ( java.lang.string , java.lang.string , java.lang.string , java.util.map < java.lang.string , ? > , javax.security.auth.callback.callbackhandler ) as null . the property contains the bound host name after the authentication exchange has completed . it is only available on the server side . the value of this constant is \" javax.security.sasl.bound.server.name \" ."}{"node_name": "MAX_BUFFER", "type": "field", "idx": 57737, "Desc": "the name of a property that specifies the maximum size of the receive buffer in bytes of saslclient / saslserver . the property contains the string representation of an integer . if this property is absent , the default size is defined by the mechanism . the value of this constant is \" javax.security.sasl.maxbuffer \" ."}{"node_name": "RAW_SEND_SIZE", "type": "field", "idx": 57738, "Desc": "the name of a property that specifies the maximum size of the raw send buffer in bytes of saslclient / saslserver . the property contains the string representation of an integer . the value of this property is negotiated between the client and server during the authentication exchange . the value of this constant is \" javax.security.sasl.rawsendsize \" ."}{"node_name": "REUSE", "type": "field", "idx": 57739, "Desc": "the name of a property that specifies whether to reuse previously authenticated session information . the property contains \" true \" if the mechanism implementation may attempt to reuse previously authenticated session information ; it contains \" false \" if the implementation must not reuse previously authenticated session information . a setting of \" true \" serves only as a hint : it does not necessarily entail actual reuse because reuse might not be possible due to a number of reasons , including , but not limited to , lack of mechanism support for reuse , expiration of reusable information , and the peer's refusal to support reuse . the property's default value is \" false \" . the value of this constant is \" javax.security.sasl.reuse \" . note that all other parameters and properties required to create a sasl client / server instance must be provided regardless of whether this property has been supplied . that is , you cannot supply any less information in anticipation of reuse . mechanism implementations that support reuse might allow customization of its implementation , for factors such as cache size , timeouts , and criteria for reusability . such customizations are implementation-dependent ."}{"node_name": "POLICY_NOPLAINTEXT", "type": "field", "idx": 57740, "Desc": "the name of a property that specifies whether mechanisms susceptible to simple plain passive attacks ( e.g. , \" plain \") are not permitted . the property contains \" true \" if such mechanisms are not permitted ; \" false \" if such mechanisms are permitted . the default is \" false \" . the value of this constant is \" javax.security.sasl.policy.noplaintext \" ."}{"node_name": "POLICY_NOACTIVE", "type": "field", "idx": 57741, "Desc": "the name of a property that specifies whether mechanisms susceptible to active ( non-dictionary ) attacks are not permitted . the property contains \" true \" if mechanisms susceptible to active attacks are not permitted ; \" false \" if such mechanisms are permitted . the default is \" false \" . the value of this constant is \" javax.security.sasl.policy.noactive \" ."}{"node_name": "POLICY_NODICTIONARY", "type": "field", "idx": 57742, "Desc": "the name of a property that specifies whether mechanisms susceptible to passive dictionary attacks are not permitted . the property contains \" true \" if mechanisms susceptible to dictionary attacks are not permitted ; \" false \" if such mechanisms are permitted . the default is \" false \" . the value of this constant is \" javax.security.sasl.policy.nodictionary \" ."}{"node_name": "POLICY_NOANONYMOUS", "type": "field", "idx": 57743, "Desc": "the name of a property that specifies whether mechanisms that accept anonymous login are not permitted . the property contains \" true \" if mechanisms that accept anonymous login are not permitted ; \" false \" if such mechanisms are permitted . the default is \" false \" . the value of this constant is \" javax.security.sasl.policy.noanonymous \" ."}{"node_name": "POLICY_FORWARD_SECRECY", "type": "field", "idx": 57744, "Desc": "the name of a property that specifies whether mechanisms that implement forward secrecy between sessions are required . forward secrecy means that breaking into one session will not automatically provide information for breaking into future sessions . the property contains \" true \" if mechanisms that implement forward secrecy between sessions are required ; \" false \" if such mechanisms are not required . the default is \" false \" . the value of this constant is \" javax.security.sasl.policy.forward \" ."}{"node_name": "POLICY_PASS_CREDENTIALS", "type": "field", "idx": 57745, "Desc": "the name of a property that specifies whether mechanisms that pass client credentials are required . the property contains \" true \" if mechanisms that pass client credentials are required ; \" false \" if such mechanisms are not required . the default is \" false \" . the value of this constant is \" javax.security.sasl.policy.credentials \" ."}{"node_name": "CREDENTIALS", "type": "field", "idx": 57746, "Desc": "the name of a property that specifies the credentials to use . the property contains a mechanism-specific java credential object . mechanism implementations may examine the value of this property to determine whether it is a class that they support . the property may be used to supply credentials to a mechanism that supports delegated authentication . the value of this constant is \" javax.security.sasl.credentials \" ."}{"node_name": "META", "type": "field", "idx": 58019, "Desc": "status byte for metamessage ( 0xff , or 255 ) , which is used in midi files . it has the same value as shortmessage.system_reset , which is used in the real-time \" midi wire \" protocol ."}{"node_name": "UNKNOWN_LENGTH", "type": "field", "idx": 58121, "Desc": "represents unknown length ."}{"node_name": "type", "type": "field", "idx": 58122, "Desc": "the type of midi file ."}{"node_name": "divisionType", "type": "field", "idx": 58123, "Desc": "the division type of the midi file ."}{"node_name": "resolution", "type": "field", "idx": 58124, "Desc": "the timing resolution of the midi file ."}{"node_name": "byteLength", "type": "field", "idx": 58125, "Desc": "the length of the midi file in bytes ."}{"node_name": "microsecondLength", "type": "field", "idx": 58126, "Desc": "the duration of the midi file in microseconds ."}{"node_name": "data", "type": "field", "idx": 58149, "Desc": "the midi message data . the first byte is the status byte for the message ; subsequent bytes up to the length of the message are data bytes for this message ."}{"node_name": "length", "type": "field", "idx": 58150, "Desc": "the number of bytes in the midi message , including the status byte and any data bytes ."}{"node_name": "PPQ", "type": "field", "idx": 58220, "Desc": "the tempo-based timing type , for which the resolution is expressed in pulses ( ticks ) per quarter note ."}{"node_name": "SMPTE_24", "type": "field", "idx": 58221, "Desc": "the smpte-based timing type with 24 frames per second ( resolution is expressed in ticks per frame ) ."}{"node_name": "SMPTE_25", "type": "field", "idx": 58222, "Desc": "the smpte-based timing type with 25 frames per second ( resolution is expressed in ticks per frame ) ."}{"node_name": "SMPTE_30DROP", "type": "field", "idx": 58223, "Desc": "the smpte-based timing type with 29.97 frames per second ( resolution is expressed in ticks per frame ) ."}{"node_name": "SMPTE_30", "type": "field", "idx": 58224, "Desc": "the smpte-based timing type with 30 frames per second ( resolution is expressed in ticks per frame ) ."}{"node_name": "divisionType", "type": "field", "idx": 58225, "Desc": "the timing division type of the sequence ."}{"node_name": "resolution", "type": "field", "idx": 58226, "Desc": "the timing resolution of the sequence ."}{"node_name": "tracks", "type": "field", "idx": 58227, "Desc": "the midi tracks in this sequence ."}{"node_name": "LOOP_CONTINUOUSLY", "type": "field", "idx": 58245, "Desc": "a value indicating that looping should continue indefinitely rather than complete after a specific number of loops ."}{"node_name": "INTERNAL_CLOCK", "type": "field", "idx": 58317, "Desc": "a master synchronization mode that makes the sequencer get its timing information from its internal clock . this is not a legal slave sync mode ."}{"node_name": "MIDI_SYNC", "type": "field", "idx": 58318, "Desc": "a master or slave synchronization mode that specifies the use of midi clock messages . if this mode is used as the master sync mode , the sequencer gets its timing information from system real-time midi clock messages . this mode only applies as the master sync mode for sequencers that are also midi receivers . if this is the slave sync mode , the sequencer sends system real-time midi clock messages to its receiver . midi clock messages are sent at a rate of 24 per quarter note ."}{"node_name": "MIDI_TIME_CODE", "type": "field", "idx": 58319, "Desc": "a master or slave synchronization mode that specifies the use of midi time code . if this mode is used as the master sync mode , the sequencer gets its timing information from midi time code messages . this mode only applies as the master sync mode to sequencers that are also midi receivers . if this mode is used as the slave sync mode , the sequencer sends midi time code messages to its receiver . ( see the midi 1.0 detailed specification for a description of midi time code . )"}{"node_name": "NO_SYNC", "type": "field", "idx": 58320, "Desc": "a slave synchronization mode indicating that no timing information should be sent to the receiver . this is not a legal master sync mode ."}{"node_name": "MIDI_TIME_CODE", "type": "field", "idx": 58328, "Desc": "status byte for midi time code quarter frame message ( 0xf1 , or 241 ) ."}{"node_name": "SONG_POSITION_POINTER", "type": "field", "idx": 58329, "Desc": "status byte for song position pointer message ( 0xf2 , or 242 ) ."}{"node_name": "SONG_SELECT", "type": "field", "idx": 58330, "Desc": "status byte for midi song select message ( 0xf3 , or 243 ) ."}{"node_name": "TUNE_REQUEST", "type": "field", "idx": 58331, "Desc": "status byte for tune request message ( 0xf6 , or 246 ) ."}{"node_name": "END_OF_EXCLUSIVE", "type": "field", "idx": 58332, "Desc": "status byte for end of system exclusive message ( 0xf7 , or 247 ) ."}{"node_name": "TIMING_CLOCK", "type": "field", "idx": 58333, "Desc": "status byte for timing clock message ( 0xf8 , or 24 8) ."}{"node_name": "START", "type": "field", "idx": 58334, "Desc": "status byte for start message ( 0xfa , or 250 ) ."}{"node_name": "CONTINUE", "type": "field", "idx": 58335, "Desc": "status byte for continue message ( 0xfb , or 251 ) ."}{"node_name": "STOP", "type": "field", "idx": 58336, "Desc": "status byte for stop message ( 0xfc , or 252 ) ."}{"node_name": "ACTIVE_SENSING", "type": "field", "idx": 58337, "Desc": "status byte for active sensing message ( 0xfe , or 254 ) ."}{"node_name": "SYSTEM_RESET", "type": "field", "idx": 58338, "Desc": "status byte for system reset message ( 0xff , or 255 ) ."}{"node_name": "NOTE_OFF", "type": "field", "idx": 58339, "Desc": "command value for note off message ( 0x80 , or 12 8) ."}{"node_name": "NOTE_ON", "type": "field", "idx": 58340, "Desc": "command value for note on message ( 0x90 , or 144 ) ."}{"node_name": "POLY_PRESSURE", "type": "field", "idx": 58341, "Desc": "command value for polyphonic key pressure ( aftertouch ) message ( 0xa0 , or 160 ) ."}{"node_name": "CONTROL_CHANGE", "type": "field", "idx": 58342, "Desc": "command value for control change message ( 0xb0 , or 176 ) ."}{"node_name": "PROGRAM_CHANGE", "type": "field", "idx": 58343, "Desc": "command value for program change message ( 0xc0 , or 192 ) ."}{"node_name": "CHANNEL_PRESSURE", "type": "field", "idx": 58344, "Desc": "command value for channel pressure ( aftertouch ) message ( 0xd0 , or 20 8) ."}{"node_name": "PITCH_BEND", "type": "field", "idx": 58345, "Desc": "command value for pitch bend message ( 0xe0 , or 224 ) ."}{"node_name": "SYSTEM_EXCLUSIVE", "type": "field", "idx": 58471, "Desc": "status byte for system exclusive message ( 0xf0 , or 240 ) ."}{"node_name": "SPECIAL_SYSTEM_EXCLUSIVE", "type": "field", "idx": 58472, "Desc": "status byte for special system exclusive message ( 0xf7 , or 247 ) , which is used in midi files . it has the same value as end_of_exclusive , which is used in the real-time \" midi wire \" protocol ."}{"node_name": "active", "type": "field", "idx": 58507, "Desc": "indicates whether the voice is currently processing a midi note . see the explanation of active and inactive voices ."}{"node_name": "channel", "type": "field", "idx": 58508, "Desc": "the midi channel on which this voice is playing . the value is a zero-based channel number if the voice is active , or unspecified if the voice is inactive ."}{"node_name": "bank", "type": "field", "idx": 58509, "Desc": "the bank number of the instrument that this voice is currently using . this is a number dictated by the midi bank-select message ; it does not refer to a soundbank object . the value ranges from 0 to 16383 if the voice is active , and is unspecified if the voice is inactive ."}{"node_name": "program", "type": "field", "idx": 58510, "Desc": "the program number of the instrument that this voice is currently using . the value ranges from 0 to 127 if the voice is active , and is unspecified if the voice is inactive ."}{"node_name": "note", "type": "field", "idx": 58511, "Desc": "the midi note that this voice is playing . the range for an active voice is from 0 to 127 in semitones , with 60 referring to middle c . the value is unspecified if the voice is inactive ."}{"node_name": "volume", "type": "field", "idx": 58512, "Desc": "the current midi volume level for the voice . the value ranges from 0 to 127 if the voice is active , and is unspecified if the voice is inactive . note that this value does not necessarily reflect the instantaneous level of the sound produced by this voice ; that level is the result of many contributing factors , including the current instrument and the shape of the amplitude envelope it produces ."}{"node_name": "WAVE", "type": "field", "idx": 58538, "Desc": "specifies a wave file ."}{"node_name": "AU", "type": "field", "idx": 58539, "Desc": "specifies an au file ."}{"node_name": "AIFF", "type": "field", "idx": 58540, "Desc": "specifies an aiff file ."}{"node_name": "AIFC", "type": "field", "idx": 58541, "Desc": "specifies an aiff-c file ."}{"node_name": "SND", "type": "field", "idx": 58542, "Desc": "specifies a snd file ."}{"node_name": "PCM_SIGNED", "type": "field", "idx": 58552, "Desc": "specifies signed , linear pcm data ."}{"node_name": "PCM_UNSIGNED", "type": "field", "idx": 58553, "Desc": "specifies unsigned , linear pcm data ."}{"node_name": "PCM_FLOAT", "type": "field", "idx": 58554, "Desc": "specifies floating-point pcm data ."}{"node_name": "ULAW", "type": "field", "idx": 58555, "Desc": "specifies u-law encoded data ."}{"node_name": "ALAW", "type": "field", "idx": 58556, "Desc": "specifies a-law encoded data ."}{"node_name": "encoding", "type": "field", "idx": 58564, "Desc": "the audio encoding technique used by this format ."}{"node_name": "sampleRate", "type": "field", "idx": 58565, "Desc": "the number of samples played or recorded per second , for sounds that have this format ."}{"node_name": "sampleSizeInBits", "type": "field", "idx": 58566, "Desc": "the number of bits in each sample of a sound that has this format ."}{"node_name": "channels", "type": "field", "idx": 58567, "Desc": "the number of audio channels in this format ( 1 for mono , 2 for stereo ) ."}{"node_name": "frameSize", "type": "field", "idx": 58568, "Desc": "the number of bytes in each frame of a sound that has this format ."}{"node_name": "frameRate", "type": "field", "idx": 58569, "Desc": "the number of frames played or recorded per second , for sounds that have this format ."}{"node_name": "bigEndian", "type": "field", "idx": 58570, "Desc": "indicates whether the audio data is stored in big-endian or little-endian order ."}{"node_name": "format", "type": "field", "idx": 58608, "Desc": "the format of the audio data contained in the stream ."}{"node_name": "frameLength", "type": "field", "idx": 58609, "Desc": "this stream's length , in sample frames ."}{"node_name": "frameSize", "type": "field", "idx": 58610, "Desc": "the size of each frame , in bytes ."}{"node_name": "framePos", "type": "field", "idx": 58611, "Desc": "the current position in this stream , in sample frames ( zero-based ) ."}{"node_name": "NOT_SPECIFIED", "type": "field", "idx": 58642, "Desc": "an integer that stands for an unknown numeric value . this value is appropriate only for signed quantities that do not normally take negative values . examples include file sizes , frame sizes , buffer sizes , and sample rates . a number of java sound constructors accept a value of not_specified for such parameters . other methods may also accept or return this value , as documented ."}{"node_name": "MUTE", "type": "field", "idx": 58730, "Desc": "represents a control for the mute status of a line . note that mute status does not affect gain ."}{"node_name": "APPLY_REVERB", "type": "field", "idx": 58731, "Desc": "represents a control for whether reverberation is applied to a line . note that the status of this control not affect the reverberation settings for a line , but does affect whether these settings are used ."}{"node_name": "LOOP_CONTINUOUSLY", "type": "field", "idx": 58735, "Desc": "a value indicating that looping should continue indefinitely rather than complete after a specific number of loops ."}{"node_name": "REVERB", "type": "field", "idx": 58821, "Desc": "represents a control over a set of possible reverberation settings . each reverberation setting is described by an instance of the reverbtype class . ( to access these settings , invoke enumcontrol.getvalues() on an enumerated control of type reverb . )"}{"node_name": "MASTER_GAIN", "type": "field", "idx": 58861, "Desc": "represents a control for the overall gain on a line . gain is a quantity in decibels ( db ) that is added to the intrinsic decibel level of the audio signal -- that is , the level of the signal before it is altered by the gain control . a positive gain amplifies ( boosts ) the signal's volume , and a negative gain attenuates ( cuts ) it . the gain setting defaults to a value of 0.0 db , meaning the signal's loudness is unaffected . note that gain measures db , not amplitude . the relationship between a gain in decibels and the corresponding linear amplitude multiplier is : linearscalar = pow ( 10.0 , gaindb / 20.0 ) the floatcontrol class has methods to impose a maximum and minimum allowable value for gain . however , because an audio signal might already be at a high amplitude , the maximum setting does not guarantee that the signal will be undistorted when the gain is applied to it ( unless the maximum is zero or negative ) . to avoid numeric overflow from excessively large gain settings , a gain control can implement clipping , meaning that the signal's amplitude will be limited to the maximum value representable by its audio format , instead of wrapping around . these comments apply to gain controls in general , not just master gain controls . a line can have more than one gain control . for example , a mixer ( which is itself a line ) might have a master gain control , an auxiliary return control , a reverb return control , and , on each of its source lines , an individual aux send and reverb send ."}{"node_name": "AUX_SEND", "type": "field", "idx": 58862, "Desc": "represents a control for the auxiliary send gain on a line ."}{"node_name": "AUX_RETURN", "type": "field", "idx": 58863, "Desc": "represents a control for the auxiliary return gain on a line ."}{"node_name": "REVERB_SEND", "type": "field", "idx": 58864, "Desc": "represents a control for the pre-reverb gain on a line . this control may be used to affect how much of a line's signal is directed to a mixer's internal reverberation unit ."}{"node_name": "REVERB_RETURN", "type": "field", "idx": 58865, "Desc": "represents a control for the post-reverb gain on a line . this control may be used to control the relative amplitude of the signal returned from an internal reverberation unit ."}{"node_name": "VOLUME", "type": "field", "idx": 58866, "Desc": "represents a control for the volume on a line ."}{"node_name": "PAN", "type": "field", "idx": 58867, "Desc": "represents a control for the relative pan ( left-right positioning ) of the signal . the signal may be mono ; the pan setting affects how it is distributed by the mixer in a stereo mix . the valid range of values is - 1.0 ( left channel only ) to 1.0 ( right channel only ) . the default is 0.0 ( centered ) ."}{"node_name": "BALANCE", "type": "field", "idx": 58868, "Desc": "represents a control for the relative balance of a stereo signal between two stereo speakers . the valid range of values is - 1.0 ( left channel only ) to 1.0 ( right channel only ) . the default is 0.0 ( centered ) ."}{"node_name": "SAMPLE_RATE", "type": "field", "idx": 58869, "Desc": "represents a control that changes the sample rate of audio playback . the net effect of changing the sample rate depends on the relationship between the media's natural rate and the rate that is set via this control . the natural rate is the sample rate that is specified in the data line's audioformat object . for example , if the natural rate of the media is 11025 samples per second and the sample rate is set to 22050 samples per second , the media will play back at twice the normal speed . changing the sample rate with this control does not affect the data line's audio format . also note that whenever you change a sound's sample rate , a change in the sound's pitch results . for example , doubling the sample rate has the effect of doubling the frequencies in the sound's spectrum , which raises the pitch by an octave ."}{"node_name": "OPEN", "type": "field", "idx": 58903, "Desc": "a type of event that is sent when a line opens , reserving system resources for itself ."}{"node_name": "CLOSE", "type": "field", "idx": 58904, "Desc": "a type of event that is sent when a line closes , freeing the system resources it had obtained when it was opened ."}{"node_name": "START", "type": "field", "idx": 58905, "Desc": "a type of event that is sent when a line begins to engage in active input or output of audio data in response to a start request ."}{"node_name": "STOP", "type": "field", "idx": 58906, "Desc": "a type of event that is sent when a line ceases active input or output of audio data in response to a stop request , or because the end of media has been reached ."}{"node_name": "MICROPHONE", "type": "field", "idx": 58959, "Desc": "a type of port that gets audio from a built-in microphone or a microphone jack ."}{"node_name": "LINE_IN", "type": "field", "idx": 58960, "Desc": "a type of port that gets audio from a line-level audio input jack ."}{"node_name": "COMPACT_DISC", "type": "field", "idx": 58961, "Desc": "a type of port that gets audio from a cd-rom drive ."}{"node_name": "SPEAKER", "type": "field", "idx": 58962, "Desc": "a type of port that sends audio to a built-in speaker or a speaker jack ."}{"node_name": "HEADPHONE", "type": "field", "idx": 58963, "Desc": "a type of port that sends audio to a headphone jack ."}{"node_name": "LINE_OUT", "type": "field", "idx": 58964, "Desc": "a type of port that sends audio to a line-level audio output jack ."}{"node_name": "UNICODE_STREAM_PARAM", "type": "field", "idx": 59151, "Desc": "a constant indicating to a rowsetreaderimpl object that a given parameter is a unicode stream . this rowsetreaderimpl object is provided as an extension of the syncprovider abstract class defined in the syncfactory static factory spi mechanism ."}{"node_name": "BINARY_STREAM_PARAM", "type": "field", "idx": 59152, "Desc": "a constant indicating to a rowsetreaderimpl object that a given parameter is a binary stream . a rowsetreaderimpl object is provided as an extension of the syncprovider abstract class defined in the syncfactory static factory spi mechanism ."}{"node_name": "ASCII_STREAM_PARAM", "type": "field", "idx": 59153, "Desc": "a constant indicating to a rowsetreaderimpl object that a given parameter is an ascii stream . a rowsetreaderimpl object is provided as an extension of the syncprovider abstract class defined in the syncfactory static factory spi mechanism ."}{"node_name": "binaryStream", "type": "field", "idx": 59154, "Desc": "the inputstream object that will be returned by the method getbinarystream , which is specified in the resultset interface ."}{"node_name": "unicodeStream", "type": "field", "idx": 59155, "Desc": "the inputstream object that will be returned by the method getunicodestream , which is specified in the resultset interface ."}{"node_name": "asciiStream", "type": "field", "idx": 59156, "Desc": "the inputstream object that will be returned by the method getasciistream , which is specified in the resultset interface ."}{"node_name": "charStream", "type": "field", "idx": 59157, "Desc": "the reader object that will be returned by the method getcharacterstream , which is specified in the resultset interface ."}{"node_name": "CROSS_JOIN", "type": "field", "idx": 59599, "Desc": "an ansi-style join providing a cross product of two tables"}{"node_name": "INNER_JOIN", "type": "field", "idx": 59600, "Desc": "an ansi-style join providing a inner join between two tables . any unmatched rows in either table of the join should be discarded ."}{"node_name": "LEFT_OUTER_JOIN", "type": "field", "idx": 59601, "Desc": "an ansi-style join providing a left outer join between two tables . in sql , this is described where all records should be returned from the left side of the join statement ."}{"node_name": "RIGHT_OUTER_JOIN", "type": "field", "idx": 59602, "Desc": "an ansi-style join providing a right outer join between two tables . in sql , this is described where all records from the table on the right side of the join statement even if the table on the left has no matching record ."}{"node_name": "FULL_JOIN", "type": "field", "idx": 59603, "Desc": "an ansi-style join providing a full join . specifies that all rows from either table be returned regardless of matching records on the other table ."}{"node_name": "ROWSET_SYNC_PROVIDER", "type": "field", "idx": 60339, "Desc": "the standard property-id for a synchronization provider implementation name ."}{"node_name": "ROWSET_SYNC_VENDOR", "type": "field", "idx": 60340, "Desc": "the standard property-id for a synchronization provider implementation vendor name ."}{"node_name": "ROWSET_SYNC_PROVIDER_VERSION", "type": "field", "idx": 60341, "Desc": "the standard property-id for a synchronization provider implementation version tag ."}{"node_name": "GRADE_NONE", "type": "field", "idx": 60363, "Desc": "indicates that no synchronization with the originating data source is provided . a syncprovider implementation returning this grade will simply attempt to write updates in the rowset object to the underlying data source without checking the validity of any data ."}{"node_name": "GRADE_CHECK_MODIFIED_AT_COMMIT", "type": "field", "idx": 60364, "Desc": "indicates a low level optimistic synchronization grade with respect to the originating data source . a syncprovider implementation returning this grade will check only rows that have changed ."}{"node_name": "GRADE_CHECK_ALL_AT_COMMIT", "type": "field", "idx": 60365, "Desc": "indicates a high level optimistic synchronization grade with respect to the originating data source . a syncprovider implementation returning this grade will check all rows , including rows that have not changed ."}{"node_name": "GRADE_LOCK_WHEN_MODIFIED", "type": "field", "idx": 60366, "Desc": "indicates a pessimistic synchronization grade with respect to the originating data source . a syncprovider implementation returning this grade will lock the row in the originating data source ."}{"node_name": "GRADE_LOCK_WHEN_LOADED", "type": "field", "idx": 60367, "Desc": "indicates the most pessimistic synchronization grade with respect to the originating data source . a syncprovider implementation returning this grade will lock the entire view and / or table affected by the original statement used to populate a rowset object ."}{"node_name": "DATASOURCE_NO_LOCK", "type": "field", "idx": 60368, "Desc": "indicates that no locks remain on the originating data source . this is the default lock setting for all syncprovider implementations unless otherwise directed by a rowset object ."}{"node_name": "DATASOURCE_ROW_LOCK", "type": "field", "idx": 60369, "Desc": "indicates that a lock is placed on the rows that are touched by the original sql statement used to populate the rowset object that is using this syncprovider object ."}{"node_name": "DATASOURCE_TABLE_LOCK", "type": "field", "idx": 60370, "Desc": "indicates that a lock is placed on all tables that are touched by the original sql statement used to populate the rowset object that is using this syncprovider object ."}{"node_name": "DATASOURCE_DB_LOCK", "type": "field", "idx": 60371, "Desc": "indicates that a lock is placed on the entire data source that is the source of data for the rowset object that is using this syncprovider object ."}{"node_name": "UPDATABLE_VIEW_SYNC", "type": "field", "idx": 60372, "Desc": "indicates that a syncprovider implementation supports synchronization between a rowset object and the sql view used to populate it ."}{"node_name": "NONUPDATABLE_VIEW_SYNC", "type": "field", "idx": 60373, "Desc": "indicates that a syncprovider implementation does not support synchronization between a rowset object and the sql view used to populate it ."}{"node_name": "UPDATE_ROW_CONFLICT", "type": "field", "idx": 60395, "Desc": "indicates that a conflict occurred while the rowset object was attempting to update a row in the data source . the values in the data source row to be updated differ from the rowset object's original values for that row , which means that the row in the data source has been updated or deleted since the last synchronization ."}{"node_name": "DELETE_ROW_CONFLICT", "type": "field", "idx": 60396, "Desc": "indicates that a conflict occurred while the rowset object was attempting to delete a row in the data source . the values in the data source row to be updated differ from the rowset object's original values for that row , which means that the row in the data source has been updated or deleted since the last synchronization ."}{"node_name": "INSERT_ROW_CONFLICT", "type": "field", "idx": 60397, "Desc": "indicates that a conflict occurred while the rowset object was attempting to insert a row into the data source . this means that a row with the same primary key as the row to be inserted has been inserted into the data source since the last synchronization ."}{"node_name": "NO_ROW_CONFLICT", "type": "field", "idx": 60398, "Desc": "indicates that no conflict occurred while the rowset object was attempting to update , delete or insert a row in the data source . the values in the syncresolver will contain null values only as an indication that no information in pertinent to the conflict resolution in this row ."}{"node_name": "PUBLIC_XML_SCHEMA", "type": "field", "idx": 60426, "Desc": "the public identifier for the xml schema definition that defines the xml tags and their valid values for a webrowset implementation ."}{"node_name": "SCHEMA_SYSTEM_ID", "type": "field", "idx": 60427, "Desc": "the url for the xml schema definition file that defines the xml tags and their valid values for a webrowset implementation ."}{"node_name": "enabled", "type": "field", "idx": 60556, "Desc": "specifies whether action is enabled ; the default is true ."}{"node_name": "changeSupport", "type": "field", "idx": 60557, "Desc": "if any propertychangelisteners have been registered , the changesupport field describes them ."}{"node_name": "MODEL_CHANGED_PROPERTY", "type": "field", "idx": 60626, "Desc": "identifies a change in the button model ."}{"node_name": "TEXT_CHANGED_PROPERTY", "type": "field", "idx": 60627, "Desc": "identifies a change in the button's text ."}{"node_name": "MNEMONIC_CHANGED_PROPERTY", "type": "field", "idx": 60628, "Desc": "identifies a change to the button's mnemonic ."}{"node_name": "MARGIN_CHANGED_PROPERTY", "type": "field", "idx": 60629, "Desc": "identifies a change in the button's margins ."}{"node_name": "VERTICAL_ALIGNMENT_CHANGED_PROPERTY", "type": "field", "idx": 60630, "Desc": "identifies a change in the button's vertical alignment ."}{"node_name": "HORIZONTAL_ALIGNMENT_CHANGED_PROPERTY", "type": "field", "idx": 60631, "Desc": "identifies a change in the button's horizontal alignment ."}{"node_name": "VERTICAL_TEXT_POSITION_CHANGED_PROPERTY", "type": "field", "idx": 60632, "Desc": "identifies a change in the button's vertical text position ."}{"node_name": "HORIZONTAL_TEXT_POSITION_CHANGED_PROPERTY", "type": "field", "idx": 60633, "Desc": "identifies a change in the button's horizontal text position ."}{"node_name": "BORDER_PAINTED_CHANGED_PROPERTY", "type": "field", "idx": 60634, "Desc": "identifies a change to having the border drawn , or having it not drawn ."}{"node_name": "FOCUS_PAINTED_CHANGED_PROPERTY", "type": "field", "idx": 60635, "Desc": "identifies a change to having the border highlighted when focused , or not ."}{"node_name": "ROLLOVER_ENABLED_CHANGED_PROPERTY", "type": "field", "idx": 60636, "Desc": "identifies a change from rollover enabled to disabled or back to enabled ."}{"node_name": "CONTENT_AREA_FILLED_CHANGED_PROPERTY", "type": "field", "idx": 60637, "Desc": "identifies a change to having the button paint the content area ."}{"node_name": "ICON_CHANGED_PROPERTY", "type": "field", "idx": 60638, "Desc": "identifies a change to the icon that represents the button ."}{"node_name": "PRESSED_ICON_CHANGED_PROPERTY", "type": "field", "idx": 60639, "Desc": "identifies a change to the icon used when the button has been pressed ."}{"node_name": "SELECTED_ICON_CHANGED_PROPERTY", "type": "field", "idx": 60640, "Desc": "identifies a change to the icon used when the button has been selected ."}{"node_name": "ROLLOVER_ICON_CHANGED_PROPERTY", "type": "field", "idx": 60641, "Desc": "identifies a change to the icon used when the cursor is over the button ."}{"node_name": "ROLLOVER_SELECTED_ICON_CHANGED_PROPERTY", "type": "field", "idx": 60642, "Desc": "identifies a change to the icon used when the cursor is over the button and it has been selected ."}{"node_name": "DISABLED_ICON_CHANGED_PROPERTY", "type": "field", "idx": 60643, "Desc": "identifies a change to the icon used when the button has been disabled ."}{"node_name": "DISABLED_SELECTED_ICON_CHANGED_PROPERTY", "type": "field", "idx": 60644, "Desc": "identifies a change to the icon used when the button has been disabled and selected ."}{"node_name": "model", "type": "field", "idx": 60645, "Desc": "the data model that determines the button's state ."}{"node_name": "changeListener", "type": "field", "idx": 60646, "Desc": "the button model's changelistener ."}{"node_name": "actionListener", "type": "field", "idx": 60647, "Desc": "the button model's actionlistener ."}{"node_name": "itemListener", "type": "field", "idx": 60648, "Desc": "the button model's itemlistener ."}{"node_name": "changeEvent", "type": "field", "idx": 60649, "Desc": "only one changeevent is needed per button instance since the event's only state is the source property . the source of events generated is always \" this \" ."}{"node_name": "listenerList", "type": "field", "idx": 60798, "Desc": "the list of listeners ."}{"node_name": "changeEvent", "type": "field", "idx": 60799, "Desc": "the change event ."}{"node_name": "listenerList", "type": "field", "idx": 60815, "Desc": "the listener list ."}{"node_name": "listenerList", "type": "field", "idx": 60837, "Desc": "the list of changelisteners for this model . subclasses may store their own listeners here ."}{"node_name": "DEFAULT", "type": "field", "idx": 60848, "Desc": "not currently used ."}{"node_name": "NAME", "type": "field", "idx": 60849, "Desc": "the key used for storing the string name for the action , used for a menu or button ."}{"node_name": "SHORT_DESCRIPTION", "type": "field", "idx": 60850, "Desc": "the key used for storing a short string description for the action , used for tooltip text ."}{"node_name": "LONG_DESCRIPTION", "type": "field", "idx": 60851, "Desc": "the key used for storing a longer string description for the action , could be used for context-sensitive help ."}{"node_name": "SMALL_ICON", "type": "field", "idx": 60852, "Desc": "the key used for storing a small icon , such as imageicon . this is typically used with menus such as jmenuitem . if the same action is used with menus and buttons you'll typically specify both a small_icon and a large_icon_key . the menu will use the small_icon and the button will use the large_icon_key ."}{"node_name": "ACTION_COMMAND_KEY", "type": "field", "idx": 60853, "Desc": "the key used to determine the command string for the actionevent that will be created when an action is going to be notified as the result of residing in a keymap associated with a jcomponent ."}{"node_name": "ACCELERATOR_KEY", "type": "field", "idx": 60854, "Desc": "the key used for storing a keystroke to be used as the accelerator for the action ."}{"node_name": "MNEMONIC_KEY", "type": "field", "idx": 60855, "Desc": "the key used for storing an integer that corresponds to one of the keyevent key codes . the value is commonly used to specify a mnemonic . for example : myaction.putvalue ( action.mnemonic_key , keyevent.vk_a ) sets the mnemonic of myaction to ' a ' , while myaction.putvalue ( action.mnemonic_key , keyevent.getextendedkeycodeforchar ( '')) sets the mnemonic of myaction to cyrillic letter \" ef \" ."}{"node_name": "SELECTED_KEY", "type": "field", "idx": 60856, "Desc": "the key used for storing a boolean that corresponds to the selected state . this is typically used only for components that have a meaningful selection state . for example , jradiobutton and jcheckbox make use of this but instances of jmenu don't . this property differs from the others in that it is both read by the component and set by the component . for example , if an action is attached to a jcheckbox the selected state of the jcheckbox will be set from that of the action . if the user clicks on the jcheckbox the selected state of the jcheckbox and the action will both be updated . note : the value of SELECTED_KEY is prefixed with ' swing ' to avoid possible collisions with existing actions ."}{"node_name": "DISPLAYED_MNEMONIC_INDEX_KEY", "type": "field", "idx": 60857, "Desc": "the key used for storing an integer that corresponds to the index in the text ( identified by the name property ) that the decoration for a mnemonic should be rendered at . if the value of this property is greater than or equal to the length of the text , it will treated as -1 . note : the value of DISPLAYED_MNEMONIC_INDEX_KEY is prefixed with ' swing ' to avoid possible collisions with existing actions ."}{"node_name": "LARGE_ICON_KEY", "type": "field", "idx": 60858, "Desc": "the key used for storing an icon . this is typically used by buttons , such as jbutton and jtogglebutton . if the same action is used with menus and buttons you'll typically specify both a small_icon and a large_icon_key . the menu will use the small_icon and the button the large_icon_key . note : the value of LARGE_ICON_KEY is prefixed with ' swing ' to avoid possible collisions with existing actions ."}{"node_name": "RAISED", "type": "field", "idx": 60924, "Desc": "raised bevel type ."}{"node_name": "LOWERED", "type": "field", "idx": 60925, "Desc": "lowered bevel type ."}{"node_name": "bevelType", "type": "field", "idx": 60926, "Desc": "the bevel type ."}{"node_name": "highlightOuter", "type": "field", "idx": 60927, "Desc": "the color to use for the bevel outer highlight ."}{"node_name": "highlightInner", "type": "field", "idx": 60928, "Desc": "the color to use for the bevel inner highlight ."}{"node_name": "shadowInner", "type": "field", "idx": 60929, "Desc": "the color to use for the bevel inner shadow ."}{"node_name": "shadowOuter", "type": "field", "idx": 60930, "Desc": "the color to use for the bevel outer shadow"}{"node_name": "outsideBorder", "type": "field", "idx": 60993, "Desc": "the outside border ."}{"node_name": "insideBorder", "type": "field", "idx": 60994, "Desc": "the inside border ."}{"node_name": "left", "type": "field", "idx": 61013, "Desc": "the left inset of the border ."}{"node_name": "right", "type": "field", "idx": 61014, "Desc": "the right inset of the border ."}{"node_name": "top", "type": "field", "idx": 61015, "Desc": "the top inset of the border ."}{"node_name": "bottom", "type": "field", "idx": 61016, "Desc": "the bottom inset of the border ."}{"node_name": "RAISED", "type": "field", "idx": 61037, "Desc": "raised etched type ."}{"node_name": "LOWERED", "type": "field", "idx": 61038, "Desc": "lowered etched type ."}{"node_name": "etchType", "type": "field", "idx": 61039, "Desc": "the type of etch to be drawn by the border ."}{"node_name": "highlight", "type": "field", "idx": 61040, "Desc": "the color to use for the etched highlight ."}{"node_name": "shadow", "type": "field", "idx": 61041, "Desc": "the color to use for the etched shadow ."}{"node_name": "thickness", "type": "field", "idx": 61071, "Desc": "thickness of the border ."}{"node_name": "lineColor", "type": "field", "idx": 61072, "Desc": "color of the border ."}{"node_name": "roundedCorners", "type": "field", "idx": 61073, "Desc": "whether or not the border has rounded corners ."}{"node_name": "color", "type": "field", "idx": 61100, "Desc": "the color rendered for the border ."}{"node_name": "tileIcon", "type": "field", "idx": 61101, "Desc": "the icon to be used for tiling the border ."}{"node_name": "title", "type": "field", "idx": 61179, "Desc": "the title the border should display ."}{"node_name": "border", "type": "field", "idx": 61180, "Desc": "the border ."}{"node_name": "titlePosition", "type": "field", "idx": 61181, "Desc": "the position for the title ."}{"node_name": "titleJustification", "type": "field", "idx": 61182, "Desc": "the justification for the title ."}{"node_name": "titleFont", "type": "field", "idx": 61183, "Desc": "the font for rendering the title ."}{"node_name": "titleColor", "type": "field", "idx": 61184, "Desc": "the color of the title ."}{"node_name": "DEFAULT_POSITION", "type": "field", "idx": 61185, "Desc": "use the default vertical orientation for the title text ."}{"node_name": "ABOVE_TOP", "type": "field", "idx": 61186, "Desc": "position the title above the border's top line ."}{"node_name": "TOP", "type": "field", "idx": 61187, "Desc": "position the title in the middle of the border's top line ."}{"node_name": "BELOW_TOP", "type": "field", "idx": 61188, "Desc": "position the title below the border's top line ."}{"node_name": "ABOVE_BOTTOM", "type": "field", "idx": 61189, "Desc": "position the title above the border's bottom line ."}{"node_name": "BOTTOM", "type": "field", "idx": 61190, "Desc": "position the title in the middle of the border's bottom line ."}{"node_name": "BELOW_BOTTOM", "type": "field", "idx": 61191, "Desc": "position the title below the border's bottom line ."}{"node_name": "DEFAULT_JUSTIFICATION", "type": "field", "idx": 61192, "Desc": "use the default justification for the title text ."}{"node_name": "LEFT", "type": "field", "idx": 61193, "Desc": "position title text at the left side of the border line ."}{"node_name": "CENTER", "type": "field", "idx": 61194, "Desc": "position title text in the center of the border line ."}{"node_name": "RIGHT", "type": "field", "idx": 61195, "Desc": "position title text at the right side of the border line ."}{"node_name": "LEADING", "type": "field", "idx": 61196, "Desc": "position title text at the left side of the border line for left to right orientation , at the right side of the border line for right to left orientation ."}{"node_name": "TRAILING", "type": "field", "idx": 61197, "Desc": "position title text at the right side of the border line for left to right orientation , at the left side of the border line for right to left orientation ."}{"node_name": "EDGE_SPACING", "type": "field", "idx": 61198, "Desc": "space between the border and the component's edge"}{"node_name": "TEXT_SPACING", "type": "field", "idx": 61199, "Desc": "space between the border and text"}{"node_name": "TEXT_INSET_H", "type": "field", "idx": 61200, "Desc": "horizontal inset of text that is left or right justified"}{"node_name": "X_AXIS", "type": "field", "idx": 61441, "Desc": "specifies that components should be laid out left to right ."}{"node_name": "Y_AXIS", "type": "field", "idx": 61442, "Desc": "specifies that components should be laid out top to bottom ."}{"node_name": "LINE_AXIS", "type": "field", "idx": 61443, "Desc": "specifies that components should be laid out in the direction of a line of text as determined by the target container's componentorientation property ."}{"node_name": "PAGE_AXIS", "type": "field", "idx": 61444, "Desc": "specifies that components should be laid out in the direction that lines flow across a page as determined by the target container's componentorientation property ."}{"node_name": "buttons", "type": "field", "idx": 61473, "Desc": "the list of buttons participating in this group ."}{"node_name": "accessibleContext", "type": "field", "idx": 61541, "Desc": "accessiblecontext associated with this cellrendererpan"}{"node_name": "TRANSPARENCY_ENABLED_PROPERTY", "type": "field", "idx": 61576, "Desc": "identifies that the transparency of the color ( alpha value ) can be selected"}{"node_name": "changeEvent", "type": "field", "idx": 61608, "Desc": "only one changeevent is needed per model instance since the event's only ( read-only ) state is the source property . the source of events generated here is always \" this \" ."}{"node_name": "listenerList", "type": "field", "idx": 61609, "Desc": "the listener list ."}{"node_name": "LOG_OPTION", "type": "field", "idx": 61649, "Desc": "log graphics operations ."}{"node_name": "FLASH_OPTION", "type": "field", "idx": 61650, "Desc": "flash graphics operations ."}{"node_name": "BUFFERED_OPTION", "type": "field", "idx": 61651, "Desc": "show buffered operations in a separate frame ."}{"node_name": "NONE_OPTION", "type": "field", "idx": 61652, "Desc": "don't debug graphics operations ."}{"node_name": "changeEvent", "type": "field", "idx": 61870, "Desc": "only one changeevent is needed per model instance since the event's only ( read-only ) state is the source property . the source of events generated here is always \" this \" ."}{"node_name": "listenerList", "type": "field", "idx": 61871, "Desc": "the listeners waiting for model changes ."}{"node_name": "stateMask", "type": "field", "idx": 61909, "Desc": "the bitmask used to store the state of the button ."}{"node_name": "actionCommand", "type": "field", "idx": 61910, "Desc": "the action command string fired by the button ."}{"node_name": "group", "type": "field", "idx": 61911, "Desc": "the button group that the button belongs to ."}{"node_name": "mnemonic", "type": "field", "idx": 61912, "Desc": "the button's mnemonic ."}{"node_name": "changeEvent", "type": "field", "idx": 61913, "Desc": "only one changeevent is needed per button model instance since the event's only state is the source property . the source of events generated is always \" this \" ."}{"node_name": "listenerList", "type": "field", "idx": 61914, "Desc": "stores the listeners on this model ."}{"node_name": "ARMED", "type": "field", "idx": 61915, "Desc": "identifies the \" armed \" bit in the bitmask , which indicates partial commitment towards choosing / triggering the button ."}{"node_name": "SELECTED", "type": "field", "idx": 61916, "Desc": "identifies the \" selected \" bit in the bitmask , which indicates that the button has been selected . only needed for certain types of buttons - such as radio button or check box ."}{"node_name": "PRESSED", "type": "field", "idx": 61917, "Desc": "identifies the \" pressed \" bit in the bitmask , which indicates that the button is pressed ."}{"node_name": "ENABLED", "type": "field", "idx": 61918, "Desc": "identifies the \" enabled \" bit in the bitmask , which indicates that the button can be selected by an input device ( such as a mouse pointer ) ."}{"node_name": "ROLLOVER", "type": "field", "idx": 61919, "Desc": "identifies the \" rollover \" bit in the bitmask , which indicates that the mouse is over the button ."}{"node_name": "value", "type": "field", "idx": 61934, "Desc": "the value of this cell ."}{"node_name": "editorComponent", "type": "field", "idx": 61952, "Desc": "the swing component being edited ."}{"node_name": "delegate", "type": "field", "idx": 61953, "Desc": "the delegate class which handles all methods sent from the celleditor ."}{"node_name": "clickCountToStart", "type": "field", "idx": 61954, "Desc": "an integer specifying the number of clicks needed to start editing . even if clickcounttostart is defined as zero , it will not initiate until a click occurs ."}{"node_name": "noFocusBorder", "type": "field", "idx": 62063, "Desc": "no focus border"}{"node_name": "listenerList", "type": "field", "idx": 62183, "Desc": "the list of listeners ."}{"node_name": "leadAnchorNotificationEnabled", "type": "field", "idx": 62184, "Desc": "whether or not the lead anchor notification is enabled ."}{"node_name": "changeEvent", "type": "field", "idx": 62291, "Desc": "only one modelchangeevent is needed per model instance since the event's only ( read-only ) state is the source property . the source of events generated here is always \" this \" ."}{"node_name": "listenerList", "type": "field", "idx": 62292, "Desc": "the collection of registered listeners"}{"node_name": "ANCESTOR_ADDED", "type": "field", "idx": 62349, "Desc": "an ancestor-component was added to the hierarchy of visible objects ( made visible ) , and is currently being displayed ."}{"node_name": "ANCESTOR_REMOVED", "type": "field", "idx": 62350, "Desc": "an ancestor-component was removed from the hierarchy of visible objects ( hidden ) and is no longer being displayed ."}{"node_name": "ANCESTOR_MOVED", "type": "field", "idx": 62351, "Desc": "an ancestor-component changed its position on the screen ."}{"node_name": "INSERT", "type": "field", "idx": 62392, "Desc": "insert type ."}{"node_name": "REMOVE", "type": "field", "idx": 62393, "Desc": "remove type ."}{"node_name": "CHANGE", "type": "field", "idx": 62394, "Desc": "change type ."}{"node_name": "listenerList", "type": "field", "idx": 62411, "Desc": "the list of listenertype - listener pairs"}{"node_name": "ENTERED", "type": "field", "idx": 62427, "Desc": "entered type ."}{"node_name": "EXITED", "type": "field", "idx": 62428, "Desc": "exited type ."}{"node_name": "ACTIVATED", "type": "field", "idx": 62429, "Desc": "activated type ."}{"node_name": "INTERNAL_FRAME_FIRST", "type": "field", "idx": 62479, "Desc": "the first number in the range of ids used for internal frame events ."}{"node_name": "INTERNAL_FRAME_LAST", "type": "field", "idx": 62480, "Desc": "the last number in the range of ids used for internal frame events ."}{"node_name": "INTERNAL_FRAME_OPENED", "type": "field", "idx": 62481, "Desc": "the \" window opened \" event . this event is delivered only the first time the internal frame is made visible ."}{"node_name": "INTERNAL_FRAME_CLOSING", "type": "field", "idx": 62482, "Desc": "the \" window is closing \" event . this event is delivered when the user attempts to close the internal frame , such as by clicking the internal frame's close button , or when a program attempts to close the internal frame by invoking the setclosed method ."}{"node_name": "INTERNAL_FRAME_CLOSED", "type": "field", "idx": 62483, "Desc": "the \" window closed \" event . this event is delivered after the internal frame has been closed as the result of a call to the setclosed or dispose method ."}{"node_name": "INTERNAL_FRAME_ICONIFIED", "type": "field", "idx": 62484, "Desc": "the \" window iconified \" event . this event indicates that the internal frame was shrunk down to a small icon ."}{"node_name": "INTERNAL_FRAME_DEICONIFIED", "type": "field", "idx": 62485, "Desc": "the \" window deiconified \" event type . this event indicates that the internal frame has been restored to its normal size ."}{"node_name": "INTERNAL_FRAME_ACTIVATED", "type": "field", "idx": 62486, "Desc": "the \" window activated \" event type . this event indicates that keystrokes and mouse clicks are directed towards this internal frame ."}{"node_name": "INTERNAL_FRAME_DEACTIVATED", "type": "field", "idx": 62487, "Desc": "the \" window deactivated \" event type . this event indicates that keystrokes and mouse clicks are no longer directed to the internal frame ."}{"node_name": "CONTENTS_CHANGED", "type": "field", "idx": 62509, "Desc": "identifies one or more changes in the lists contents ."}{"node_name": "INTERVAL_ADDED", "type": "field", "idx": 62510, "Desc": "identifies the addition of one or more contiguous items to the list"}{"node_name": "INTERVAL_REMOVED", "type": "field", "idx": 62511, "Desc": "identifies the removal of one or more contiguous items from the list"}{"node_name": "fromIndex", "type": "field", "idx": 62648, "Desc": "the index of the column from where it was moved or removed"}{"node_name": "toIndex", "type": "field", "idx": 62649, "Desc": "the index of the column to where it was moved or added"}{"node_name": "INSERT", "type": "field", "idx": 62668, "Desc": "identifies the addition of new rows or columns ."}{"node_name": "UPDATE", "type": "field", "idx": 62669, "Desc": "identifies a change to existing data ."}{"node_name": "DELETE", "type": "field", "idx": 62670, "Desc": "identifies the removal of rows or columns ."}{"node_name": "HEADER_ROW", "type": "field", "idx": 62671, "Desc": "identifies the header row ."}{"node_name": "ALL_COLUMNS", "type": "field", "idx": 62672, "Desc": "specifies all columns in a row or rows ."}{"node_name": "type", "type": "field", "idx": 62673, "Desc": "the type of the event ."}{"node_name": "firstRow", "type": "field", "idx": 62674, "Desc": "the first row that has changed ."}{"node_name": "lastRow", "type": "field", "idx": 62675, "Desc": "the last row that has changed ."}{"node_name": "column", "type": "field", "idx": 62676, "Desc": "the column for the event ."}{"node_name": "path", "type": "field", "idx": 62705, "Desc": "path to the value this event represents ."}{"node_name": "path", "type": "field", "idx": 62716, "Desc": "path to the parent of the nodes that have changed ."}{"node_name": "childIndices", "type": "field", "idx": 62717, "Desc": "indices identifying the position of where the children were ."}{"node_name": "children", "type": "field", "idx": 62718, "Desc": "children that have been removed ."}{"node_name": "paths", "type": "field", "idx": 62750, "Desc": "paths this event represents ."}{"node_name": "areNew", "type": "field", "idx": 62751, "Desc": "for each path identifies if that path is in fact new ."}{"node_name": "oldLeadSelectionPath", "type": "field", "idx": 62752, "Desc": "leadselectionpath before the paths changed , may be null ."}{"node_name": "newLeadSelectionPath", "type": "field", "idx": 62753, "Desc": "leadselectionpath after the paths changed , may be null ."}{"node_name": "FOCUS_MANAGER_CLASS_PROPERTY", "type": "field", "idx": 62874, "Desc": "FOCUS_MANAGER_CLASS_PROPERTY is obsolete , and its use is discouraged since its specification is incompatible with the 1.4 focus apis . the current focusmanager is no longer a property of the ui . client code must query for the current focusmanager using keyboardfocusmanager.getcurrentkeyboardfocusmanager() . see the focus specification for more information ."}{"node_name": "DEFAULT_SIZE", "type": "field", "idx": 62910, "Desc": "indicates the size from the component or gap should be used for a particular range value ."}{"node_name": "PREFERRED_SIZE", "type": "field", "idx": 62911, "Desc": "indicates the preferred size from the component or gap should be used for a particular range value ."}{"node_name": "BORDER_PAINTED_FLAT_CHANGED_PROPERTY", "type": "field", "idx": 63175, "Desc": "identifies a change to the flat property ."}{"node_name": "SELECTION_MODEL_PROPERTY", "type": "field", "idx": 63235, "Desc": "the selection model property name ."}{"node_name": "PREVIEW_PANEL_PROPERTY", "type": "field", "idx": 63236, "Desc": "the preview panel property name ."}{"node_name": "CHOOSER_PANELS_PROPERTY", "type": "field", "idx": 63237, "Desc": "the chooserpanel array property name ."}{"node_name": "accessibleContext", "type": "field", "idx": 63238, "Desc": "the accessible context ."}{"node_name": "dataModel", "type": "field", "idx": 63318, "Desc": "this protected field is implementation specific . do not access directly or override . use the accessor methods instead ."}{"node_name": "renderer", "type": "field", "idx": 63319, "Desc": "this protected field is implementation specific . do not access directly or override . use the accessor methods instead ."}{"node_name": "editor", "type": "field", "idx": 63320, "Desc": "this protected field is implementation specific . do not access directly or override . use the accessor methods instead ."}{"node_name": "maximumRowCount", "type": "field", "idx": 63321, "Desc": "this protected field is implementation specific . do not access directly or override . use the accessor methods instead ."}{"node_name": "isEditable", "type": "field", "idx": 63322, "Desc": "this protected field is implementation specific . do not access directly or override . use the accessor methods instead ."}{"node_name": "keySelectionManager", "type": "field", "idx": 63323, "Desc": "this protected field is implementation specific . do not access directly or override . use the accessor methods instead ."}{"node_name": "actionCommand", "type": "field", "idx": 63324, "Desc": "this protected field is implementation specific . do not access directly or override . use the accessor methods instead ."}{"node_name": "lightWeightPopupEnabled", "type": "field", "idx": 63325, "Desc": "this protected field is implementation specific . do not access directly or override . use the accessor methods instead ."}{"node_name": "selectedItemReminder", "type": "field", "idx": 63326, "Desc": "this protected field is implementation specific . do not access directly or override ."}{"node_name": "ui", "type": "field", "idx": 63470, "Desc": "the look and feel delegate for this component ."}{"node_name": "listenerList", "type": "field", "idx": 63471, "Desc": "a list of event listeners for this component ."}{"node_name": "WHEN_FOCUSED", "type": "field", "idx": 63472, "Desc": "constant used for registerkeyboardaction that means that the command should be invoked when the component has the focus ."}{"node_name": "WHEN_ANCESTOR_OF_FOCUSED_COMPONENT", "type": "field", "idx": 63473, "Desc": "constant used for registerkeyboardaction that means that the command should be invoked when the receiving component is an ancestor of the focused component or is itself the focused component ."}{"node_name": "WHEN_IN_FOCUSED_WINDOW", "type": "field", "idx": 63474, "Desc": "constant used for registerkeyboardaction that means that the command should be invoked when the receiving component is in the window that has the focus or is itself the focused component ."}{"node_name": "UNDEFINED_CONDITION", "type": "field", "idx": 63475, "Desc": "constant used by some of the apis to mean that no condition is defined ."}{"node_name": "TOOL_TIP_TEXT_KEY", "type": "field", "idx": 63476, "Desc": "the comment to display when the cursor is over the component , also known as a \" value tip \" , \" flyover help \" , or \" flyover label \" ."}{"node_name": "LIVE_DRAG_MODE", "type": "field", "idx": 63710, "Desc": "indicates that the entire contents of the item being dragged should appear inside the desktop pane ."}{"node_name": "OUTLINE_DRAG_MODE", "type": "field", "idx": 63711, "Desc": "indicates that an outline only of the item being dragged should appear inside the desktop pane ."}{"node_name": "rootPane", "type": "field", "idx": 63749, "Desc": ""}{"node_name": "rootPaneCheckingEnabled", "type": "field", "idx": 63750, "Desc": "if true then calls to add and setlayout will be forwarded to the contentpane . this is initially false , but is set to true when the jdialog is constructed ."}{"node_name": "accessibleContext", "type": "field", "idx": 63751, "Desc": "accessiblecontext associated with this jdialog"}{"node_name": "W3C_LENGTH_UNITS", "type": "field", "idx": 63891, "Desc": "key for a client property used to indicate whether w3c compliant length units are used for html rendering . by default this is not enabled ; to enable it set the client property with this name to boolean.true ."}{"node_name": "HONOR_DISPLAY_PROPERTIES", "type": "field", "idx": 63892, "Desc": "key for a client property used to indicate whether the default font and foreground color from the component are used if a font or foreground color is not specified in the styled text . the default varies based on the look and feel ; to enable it set the client property with this name to boolean.true ."}{"node_name": "OPEN_DIALOG", "type": "field", "idx": 63958, "Desc": "type value indicating that the jfilechooser supports an \" open \" file operation ."}{"node_name": "SAVE_DIALOG", "type": "field", "idx": 63959, "Desc": "type value indicating that the jfilechooser supports a \" save \" file operation ."}{"node_name": "CUSTOM_DIALOG", "type": "field", "idx": 63960, "Desc": "type value indicating that the jfilechooser supports a developer-specified file operation ."}{"node_name": "CANCEL_OPTION", "type": "field", "idx": 63961, "Desc": "return value if cancel is chosen ."}{"node_name": "APPROVE_OPTION", "type": "field", "idx": 63962, "Desc": "return value if approve ( yes , ok ) is chosen ."}{"node_name": "ERROR_OPTION", "type": "field", "idx": 63963, "Desc": "return value if an error occurred ."}{"node_name": "FILES_ONLY", "type": "field", "idx": 63964, "Desc": "instruction to display only files ."}{"node_name": "DIRECTORIES_ONLY", "type": "field", "idx": 63965, "Desc": "instruction to display only directories ."}{"node_name": "FILES_AND_DIRECTORIES", "type": "field", "idx": 63966, "Desc": "instruction to display both files and directories ."}{"node_name": "CANCEL_SELECTION", "type": "field", "idx": 63967, "Desc": "instruction to cancel the current selection ."}{"node_name": "APPROVE_SELECTION", "type": "field", "idx": 63968, "Desc": "instruction to approve the current selection ( same as pressing yes or ok ) ."}{"node_name": "APPROVE_BUTTON_TEXT_CHANGED_PROPERTY", "type": "field", "idx": 63969, "Desc": "identifies change in the text on the approve ( yes , ok ) button ."}{"node_name": "APPROVE_BUTTON_TOOL_TIP_TEXT_CHANGED_PROPERTY", "type": "field", "idx": 63970, "Desc": "identifies change in the tooltip text for the approve ( yes , ok ) button ."}{"node_name": "APPROVE_BUTTON_MNEMONIC_CHANGED_PROPERTY", "type": "field", "idx": 63971, "Desc": "identifies change in the mnemonic for the approve ( yes , ok ) button ."}{"node_name": "CONTROL_BUTTONS_ARE_SHOWN_CHANGED_PROPERTY", "type": "field", "idx": 63972, "Desc": "instruction to display the control buttons ."}{"node_name": "DIRECTORY_CHANGED_PROPERTY", "type": "field", "idx": 63973, "Desc": "identifies user's directory change ."}{"node_name": "SELECTED_FILE_CHANGED_PROPERTY", "type": "field", "idx": 63974, "Desc": "identifies change in user's single-file selection ."}{"node_name": "SELECTED_FILES_CHANGED_PROPERTY", "type": "field", "idx": 63975, "Desc": "identifies change in user's multiple-file selection ."}{"node_name": "MULTI_SELECTION_ENABLED_CHANGED_PROPERTY", "type": "field", "idx": 63976, "Desc": "enables multiple-file selections ."}{"node_name": "FILE_SYSTEM_VIEW_CHANGED_PROPERTY", "type": "field", "idx": 63977, "Desc": "says that a different object is being used to find available drives on the system ."}{"node_name": "FILE_VIEW_CHANGED_PROPERTY", "type": "field", "idx": 63978, "Desc": "says that a different object is being used to retrieve file information ."}{"node_name": "FILE_HIDING_CHANGED_PROPERTY", "type": "field", "idx": 63979, "Desc": "identifies a change in the display-hidden-files property ."}{"node_name": "FILE_FILTER_CHANGED_PROPERTY", "type": "field", "idx": 63980, "Desc": "user changed the kind of files to display ."}{"node_name": "FILE_SELECTION_MODE_CHANGED_PROPERTY", "type": "field", "idx": 63981, "Desc": "identifies a change in the kind of selection ( single , multiple , etc . ) ."}{"node_name": "ACCESSORY_CHANGED_PROPERTY", "type": "field", "idx": 63982, "Desc": "says that a different accessory component is in use ( for example , to preview files ) ."}{"node_name": "ACCEPT_ALL_FILE_FILTER_USED_CHANGED_PROPERTY", "type": "field", "idx": 63983, "Desc": "identifies whether a the acceptallfilefilter is used or not ."}{"node_name": "DIALOG_TITLE_CHANGED_PROPERTY", "type": "field", "idx": 63984, "Desc": "identifies a change in the dialog title ."}{"node_name": "DIALOG_TYPE_CHANGED_PROPERTY", "type": "field", "idx": 63985, "Desc": "identifies a change in the type of files displayed ( files only , directories only , or both files and directories ) ."}{"node_name": "CHOOSABLE_FILE_FILTER_CHANGED_PROPERTY", "type": "field", "idx": 63986, "Desc": "identifies a change in the list of predefined file filters the user can choose from ."}{"node_name": "accessibleContext", "type": "field", "idx": 63987, "Desc": "accessiblecontext associated with this jfilechooser"}{"node_name": "COMMIT", "type": "field", "idx": 64129, "Desc": "constant identifying that when focus is lost , commitedit should be invoked . if in committing the new value a parseexception is thrown , the invalid value will remain ."}{"node_name": "COMMIT_OR_REVERT", "type": "field", "idx": 64130, "Desc": "constant identifying that when focus is lost , commitedit should be invoked . if in committing the new value a parseexception is thrown , the value will be reverted ."}{"node_name": "REVERT", "type": "field", "idx": 64131, "Desc": "constant identifying that when focus is lost , editing value should be reverted to current value set on the jformattedtextfield ."}{"node_name": "PERSIST", "type": "field", "idx": 64132, "Desc": "constant identifying that when focus is lost , the edited value should be left ."}{"node_name": "rootPane", "type": "field", "idx": 64173, "Desc": "the jrootpane instance that manages the contentpane and optional menubar for this frame , as well as the glasspane ."}{"node_name": "rootPaneCheckingEnabled", "type": "field", "idx": 64174, "Desc": "if true then calls to add and setlayout will be forwarded to the contentpane . this is initially false , but is set to true when the jframe is constructed ."}{"node_name": "accessibleContext", "type": "field", "idx": 64175, "Desc": "the accessible context property ."}{"node_name": "rootPane", "type": "field", "idx": 64267, "Desc": "the jrootpane instance that manages the content pane and optional menu bar for this internal frame , as well as the glass pane ."}{"node_name": "rootPaneCheckingEnabled", "type": "field", "idx": 64268, "Desc": "if true then calls to add and setlayout will be forwarded to the contentpane . this is initially false , but is set to true when the jinternalframe is constructed ."}{"node_name": "closable", "type": "field", "idx": 64269, "Desc": "the frame can be closed ."}{"node_name": "isClosed", "type": "field", "idx": 64270, "Desc": "the frame has been closed ."}{"node_name": "maximizable", "type": "field", "idx": 64271, "Desc": "the frame can be expanded to the size of the desktop pane ."}{"node_name": "isMaximum", "type": "field", "idx": 64272, "Desc": "the frame has been expanded to its maximum size ."}{"node_name": "iconable", "type": "field", "idx": 64273, "Desc": "the frame can \" iconified \" ( shrunk down and displayed as an icon-image ) ."}{"node_name": "isIcon", "type": "field", "idx": 64274, "Desc": "the frame has been iconified ."}{"node_name": "resizable", "type": "field", "idx": 64275, "Desc": "the frame's size can be changed ."}{"node_name": "isSelected", "type": "field", "idx": 64276, "Desc": "the frame is currently selected ."}{"node_name": "frameIcon", "type": "field", "idx": 64277, "Desc": "the icon shown in the top-left corner of this internal frame ."}{"node_name": "title", "type": "field", "idx": 64278, "Desc": "the title displayed in this internal frame's title bar ."}{"node_name": "desktopIcon", "type": "field", "idx": 64279, "Desc": "the icon that is displayed when this internal frame is iconified ."}{"node_name": "CONTENT_PANE_PROPERTY", "type": "field", "idx": 64280, "Desc": "bound property name ."}{"node_name": "MENU_BAR_PROPERTY", "type": "field", "idx": 64281, "Desc": "bound property name ."}{"node_name": "TITLE_PROPERTY", "type": "field", "idx": 64282, "Desc": "bound property name ."}{"node_name": "LAYERED_PANE_PROPERTY", "type": "field", "idx": 64283, "Desc": "bound property name ."}{"node_name": "ROOT_PANE_PROPERTY", "type": "field", "idx": 64284, "Desc": "bound property name ."}{"node_name": "GLASS_PANE_PROPERTY", "type": "field", "idx": 64285, "Desc": "bound property name ."}{"node_name": "FRAME_ICON_PROPERTY", "type": "field", "idx": 64286, "Desc": "bound property name ."}{"node_name": "IS_SELECTED_PROPERTY", "type": "field", "idx": 64287, "Desc": "constrained property name indicated that this frame has selected status ."}{"node_name": "IS_CLOSED_PROPERTY", "type": "field", "idx": 64288, "Desc": "constrained property name indicating that the internal frame is closed ."}{"node_name": "IS_MAXIMUM_PROPERTY", "type": "field", "idx": 64289, "Desc": "constrained property name indicating that the internal frame is maximized ."}{"node_name": "IS_ICON_PROPERTY", "type": "field", "idx": 64290, "Desc": "constrained property name indicating that the internal frame is iconified ."}{"node_name": "labelFor", "type": "field", "idx": 64453, "Desc": "the component this label is for ; null if the label is not the label for a component"}{"node_name": "DEFAULT_LAYER", "type": "field", "idx": 64589, "Desc": "convenience object defining the default layer . equivalent to integer.valueof ( 0 ) ."}{"node_name": "PALETTE_LAYER", "type": "field", "idx": 64590, "Desc": "convenience object defining the palette layer . equivalent to integer.valueof ( 100 ) ."}{"node_name": "MODAL_LAYER", "type": "field", "idx": 64591, "Desc": "convenience object defining the modal layer . equivalent to integer.valueof ( 200 ) ."}{"node_name": "POPUP_LAYER", "type": "field", "idx": 64592, "Desc": "convenience object defining the popup layer . equivalent to integer.valueof ( 300 ) ."}{"node_name": "DRAG_LAYER", "type": "field", "idx": 64593, "Desc": "convenience object defining the drag layer . equivalent to integer.valueof ( 400 ) ."}{"node_name": "FRAME_CONTENT_LAYER", "type": "field", "idx": 64594, "Desc": "convenience object defining the frame content layer . this layer is normally only use to position the contentpane and menubar components of jframe . equivalent to integer.valueof ( -30000 ) ."}{"node_name": "LAYER_PROPERTY", "type": "field", "idx": 64595, "Desc": "bound property"}{"node_name": "VERTICAL", "type": "field", "idx": 64693, "Desc": "indicates a vertical layout of cells , in a single column ; the default layout ."}{"node_name": "VERTICAL_WRAP", "type": "field", "idx": 64694, "Desc": "indicates a \" newspaper style \" layout with cells flowing vertically then horizontally ."}{"node_name": "HORIZONTAL_WRAP", "type": "field", "idx": 64695, "Desc": "indicates a \" newspaper style \" layout with cells flowing horizontally then vertically ."}{"node_name": "popupListener", "type": "field", "idx": 64842, "Desc": "the window-closing listener for the popup ."}{"node_name": "UNINITIALIZED_VALUE", "type": "field", "idx": 65095, "Desc": "indicates that the user has not yet selected a value ."}{"node_name": "DEFAULT_OPTION", "type": "field", "idx": 65096, "Desc": "type meaning look and feel should not supply any options -- only use the options from the joptionpane ."}{"node_name": "YES_NO_OPTION", "type": "field", "idx": 65097, "Desc": "type used for showconfirmdialog ."}{"node_name": "YES_NO_CANCEL_OPTION", "type": "field", "idx": 65098, "Desc": "type used for showconfirmdialog ."}{"node_name": "OK_CANCEL_OPTION", "type": "field", "idx": 65099, "Desc": "type used for showconfirmdialog ."}{"node_name": "YES_OPTION", "type": "field", "idx": 65100, "Desc": "return value from class method if yes is chosen ."}{"node_name": "NO_OPTION", "type": "field", "idx": 65101, "Desc": "return value from class method if no is chosen ."}{"node_name": "CANCEL_OPTION", "type": "field", "idx": 65102, "Desc": "return value from class method if cancel is chosen ."}{"node_name": "OK_OPTION", "type": "field", "idx": 65103, "Desc": "return value form class method if ok is chosen ."}{"node_name": "CLOSED_OPTION", "type": "field", "idx": 65104, "Desc": "return value from class method if user closes window without selecting anything , more than likely this should be treated as either a cancel_option or no_option ."}{"node_name": "ERROR_MESSAGE", "type": "field", "idx": 65105, "Desc": "used for error messages ."}{"node_name": "INFORMATION_MESSAGE", "type": "field", "idx": 65106, "Desc": "used for information messages ."}{"node_name": "WARNING_MESSAGE", "type": "field", "idx": 65107, "Desc": "used for warning messages ."}{"node_name": "QUESTION_MESSAGE", "type": "field", "idx": 65108, "Desc": "used for questions ."}{"node_name": "PLAIN_MESSAGE", "type": "field", "idx": 65109, "Desc": "no icon is used ."}{"node_name": "ICON_PROPERTY", "type": "field", "idx": 65110, "Desc": "bound property name for icon ."}{"node_name": "MESSAGE_PROPERTY", "type": "field", "idx": 65111, "Desc": "bound property name for message ."}{"node_name": "VALUE_PROPERTY", "type": "field", "idx": 65112, "Desc": "bound property name for value ."}{"node_name": "OPTIONS_PROPERTY", "type": "field", "idx": 65113, "Desc": "bound property name for option ."}{"node_name": "INITIAL_VALUE_PROPERTY", "type": "field", "idx": 65114, "Desc": "bound property name for initialvalue ."}{"node_name": "MESSAGE_TYPE_PROPERTY", "type": "field", "idx": 65115, "Desc": "bound property name for type ."}{"node_name": "OPTION_TYPE_PROPERTY", "type": "field", "idx": 65116, "Desc": "bound property name for optiontype ."}{"node_name": "SELECTION_VALUES_PROPERTY", "type": "field", "idx": 65117, "Desc": "bound property name for selectionvalues ."}{"node_name": "INITIAL_SELECTION_VALUE_PROPERTY", "type": "field", "idx": 65118, "Desc": "bound property name for initialselectionvalue ."}{"node_name": "INPUT_VALUE_PROPERTY", "type": "field", "idx": 65119, "Desc": "bound property name for inputvalue ."}{"node_name": "WANTS_INPUT_PROPERTY", "type": "field", "idx": 65120, "Desc": "bound property name for wantsinput ."}{"node_name": "icon", "type": "field", "idx": 65121, "Desc": "icon used in pane ."}{"node_name": "message", "type": "field", "idx": 65122, "Desc": "message to display ."}{"node_name": "options", "type": "field", "idx": 65123, "Desc": "options to display to the user ."}{"node_name": "initialValue", "type": "field", "idx": 65124, "Desc": "value that should be initially selected in options ."}{"node_name": "messageType", "type": "field", "idx": 65125, "Desc": "message type ."}{"node_name": "optionType", "type": "field", "idx": 65126, "Desc": "option type , one of default_option , yes_no_option , yes_no_cancel_option or ok_cancel_option ."}{"node_name": "value", "type": "field", "idx": 65127, "Desc": "currently selected value , will be a valid option , or uninitialized_value or null ."}{"node_name": "selectionValues", "type": "field", "idx": 65128, "Desc": "array of values the user can choose from . look and feel will provide the ui component to choose this from ."}{"node_name": "inputValue", "type": "field", "idx": 65129, "Desc": "value the user has input ."}{"node_name": "initialSelectionValue", "type": "field", "idx": 65130, "Desc": "initial value to select in selectionvalues ."}{"node_name": "wantsInput", "type": "field", "idx": 65131, "Desc": "if true , a ui widget will be provided to the user to get input ."}{"node_name": "orientation", "type": "field", "idx": 65533, "Desc": "whether the progress bar is horizontal or vertical . the default is horizontal ."}{"node_name": "paintBorder", "type": "field", "idx": 65534, "Desc": "whether to display a border around the progress bar . the default is true ."}{"node_name": "model", "type": "field", "idx": 65535, "Desc": "the object that holds the data for the progress bar ."}{"node_name": "progressString", "type": "field", "idx": 65536, "Desc": "an optional string that can be displayed on the progress bar . the default is null . setting this to a non-null value does not imply that the string will be displayed . to display the string , paintstring must be true ."}{"node_name": "paintString", "type": "field", "idx": 65537, "Desc": "whether to display a string of text on the progress bar . the default is false . setting this to true causes a textual display of the progress to be rendered on the progress bar . if the progressstring is null , the percentage of completion is displayed on the progress bar . otherwise , the progressstring is rendered on the progress bar ."}{"node_name": "changeEvent", "type": "field", "idx": 65538, "Desc": "only one changeevent is needed per instance since the event's only interesting property is the immutable source , which is the progress bar . the event is lazily created the first time that an event notification is fired ."}{"node_name": "changeListener", "type": "field", "idx": 65539, "Desc": "listens for change events sent by the progress bar's model , redispatching them to change-event listeners registered upon this progress bar ."}{"node_name": "NONE", "type": "field", "idx": 65658, "Desc": "constant used for the windowdecorationstyle property . indicates that the jrootpane should not provide any sort of window decorations ."}{"node_name": "FRAME", "type": "field", "idx": 65659, "Desc": "constant used for the windowdecorationstyle property . indicates that the jrootpane should provide decorations appropriate for a frame ."}{"node_name": "PLAIN_DIALOG", "type": "field", "idx": 65660, "Desc": "constant used for the windowdecorationstyle property . indicates that the jrootpane should provide decorations appropriate for a dialog ."}{"node_name": "INFORMATION_DIALOG", "type": "field", "idx": 65661, "Desc": "constant used for the windowdecorationstyle property . indicates that the jrootpane should provide decorations appropriate for a dialog used to display an informational message ."}{"node_name": "ERROR_DIALOG", "type": "field", "idx": 65662, "Desc": "constant used for the windowdecorationstyle property . indicates that the jrootpane should provide decorations appropriate for a dialog used to display an error message ."}{"node_name": "COLOR_CHOOSER_DIALOG", "type": "field", "idx": 65663, "Desc": "constant used for the windowdecorationstyle property . indicates that the jrootpane should provide decorations appropriate for a dialog used to display a jcolorchooser ."}{"node_name": "FILE_CHOOSER_DIALOG", "type": "field", "idx": 65664, "Desc": "constant used for the windowdecorationstyle property . indicates that the jrootpane should provide decorations appropriate for a dialog used to display a jfilechooser ."}{"node_name": "QUESTION_DIALOG", "type": "field", "idx": 65665, "Desc": "constant used for the windowdecorationstyle property . indicates that the jrootpane should provide decorations appropriate for a dialog used to present a question to the user ."}{"node_name": "WARNING_DIALOG", "type": "field", "idx": 65666, "Desc": "constant used for the windowdecorationstyle property . indicates that the jrootpane should provide decorations appropriate for a dialog used to display a warning message ."}{"node_name": "menuBar", "type": "field", "idx": 65667, "Desc": "the menu bar ."}{"node_name": "contentPane", "type": "field", "idx": 65668, "Desc": "the content pane ."}{"node_name": "layeredPane", "type": "field", "idx": 65669, "Desc": "the layered pane that manages the menu bar and content pane ."}{"node_name": "glassPane", "type": "field", "idx": 65670, "Desc": "the glass pane that overlays the menu bar and content pane , so it can intercept mouse movements and such ."}{"node_name": "defaultButton", "type": "field", "idx": 65671, "Desc": "the button that gets activated when the pane has the focus and a ui-specific action like pressing the enter key occurs ."}{"node_name": "model", "type": "field", "idx": 65731, "Desc": "the model that represents the scrollbar's minimum , maximum , extent ( aka \" visibleamount \") and current value ."}{"node_name": "orientation", "type": "field", "idx": 65732, "Desc": ""}{"node_name": "unitIncrement", "type": "field", "idx": 65733, "Desc": ""}{"node_name": "blockIncrement", "type": "field", "idx": 65734, "Desc": ""}{"node_name": "viewPort", "type": "field", "idx": 65801, "Desc": "this jscrollpane's current jviewport"}{"node_name": "verticalScrollBarPolicy", "type": "field", "idx": 65810, "Desc": "the display policy for the vertical scrollbar . the default is scrollpaneconstants.vertical_scrollbar_as_needed ."}{"node_name": "horizontalScrollBarPolicy", "type": "field", "idx": 65811, "Desc": "the display policy for the horizontal scrollbar . the default is scrollpaneconstants.horizontal_scrollbar_as_needed ."}{"node_name": "viewport", "type": "field", "idx": 65812, "Desc": "the scrollpane's viewport child . default is an empty jviewport ."}{"node_name": "verticalScrollBar", "type": "field", "idx": 65813, "Desc": "the scrollpane's vertical scrollbar child . default is a jscrollbar ."}{"node_name": "horizontalScrollBar", "type": "field", "idx": 65814, "Desc": "the scrollpane's horizontal scrollbar child . default is a jscrollbar ."}{"node_name": "rowHeader", "type": "field", "idx": 65815, "Desc": "the row header child . default is null ."}{"node_name": "columnHeader", "type": "field", "idx": 65816, "Desc": "the column header child . default is null ."}{"node_name": "lowerLeft", "type": "field", "idx": 65817, "Desc": "the component to display in the lower left corner . default is null ."}{"node_name": "lowerRight", "type": "field", "idx": 65818, "Desc": "the component to display in the lower right corner . default is null ."}{"node_name": "upperLeft", "type": "field", "idx": 65819, "Desc": "the component to display in the upper left corner . default is null ."}{"node_name": "upperRight", "type": "field", "idx": 65820, "Desc": "the component to display in the upper right corner . default is null ."}{"node_name": "sliderModel", "type": "field", "idx": 65924, "Desc": "the data model that handles the numeric maximum value , minimum value , and current-position value for the slider ."}{"node_name": "majorTickSpacing", "type": "field", "idx": 65925, "Desc": "the number of values between the major tick marks -- the larger marks that break up the minor tick marks ."}{"node_name": "minorTickSpacing", "type": "field", "idx": 65926, "Desc": "the number of values between the minor tick marks -- the smaller marks that occur between the major tick marks ."}{"node_name": "snapToTicks", "type": "field", "idx": 65927, "Desc": "if true , the knob ( and the data value it represents ) resolve to the closest tick mark next to where the user positioned the knob . the default is false ."}{"node_name": "orientation", "type": "field", "idx": 65928, "Desc": "whether the slider is horizontal or vertical the default is horizontal ."}{"node_name": "changeListener", "type": "field", "idx": 65929, "Desc": "the changelistener ( no suffix ) is the listener we add to the slider's model . this listener is initialized to the changelistener returned from createchangelistener , which by default just forwards events to changelisteners ( if any ) added directly to the slider ."}{"node_name": "changeEvent", "type": "field", "idx": 65930, "Desc": "only one changeevent is needed per slider instance since the event's only ( read-only ) state is the source property . the source of events generated here is always \" this \" . the event is lazily created the first time that an event notification is fired ."}{"node_name": "VERTICAL_SPLIT", "type": "field", "idx": 66178, "Desc": "vertical split indicates the components are split along the y axis . for example the two components will be split one on top of the other ."}{"node_name": "HORIZONTAL_SPLIT", "type": "field", "idx": 66179, "Desc": "horizontal split indicates the components are split along the x axis . for example the two components will be split one to the left of the other ."}{"node_name": "LEFT", "type": "field", "idx": 66180, "Desc": "used to add a component to the left of the other component ."}{"node_name": "RIGHT", "type": "field", "idx": 66181, "Desc": "used to add a component to the right of the other component ."}{"node_name": "TOP", "type": "field", "idx": 66182, "Desc": "used to add a component above the other component ."}{"node_name": "BOTTOM", "type": "field", "idx": 66183, "Desc": "used to add a component below the other component ."}{"node_name": "DIVIDER", "type": "field", "idx": 66184, "Desc": "used to add a component that will represent the divider ."}{"node_name": "ORIENTATION_PROPERTY", "type": "field", "idx": 66185, "Desc": "bound property name for orientation ( horizontal or vertical ) ."}{"node_name": "CONTINUOUS_LAYOUT_PROPERTY", "type": "field", "idx": 66186, "Desc": "bound property name for continuouslayout ."}{"node_name": "DIVIDER_SIZE_PROPERTY", "type": "field", "idx": 66187, "Desc": "bound property name for border ."}{"node_name": "ONE_TOUCH_EXPANDABLE_PROPERTY", "type": "field", "idx": 66188, "Desc": "bound property for onetouchexpandable ."}{"node_name": "LAST_DIVIDER_LOCATION_PROPERTY", "type": "field", "idx": 66189, "Desc": "bound property for lastlocation ."}{"node_name": "DIVIDER_LOCATION_PROPERTY", "type": "field", "idx": 66190, "Desc": "bound property for the dividerlocation ."}{"node_name": "RESIZE_WEIGHT_PROPERTY", "type": "field", "idx": 66191, "Desc": "bound property for weight ."}{"node_name": "orientation", "type": "field", "idx": 66192, "Desc": "how the views are split ."}{"node_name": "continuousLayout", "type": "field", "idx": 66193, "Desc": "whether or not the views are continuously redisplayed while resizing ."}{"node_name": "leftComponent", "type": "field", "idx": 66194, "Desc": "the left or top component ."}{"node_name": "rightComponent", "type": "field", "idx": 66195, "Desc": "the right or bottom component ."}{"node_name": "dividerSize", "type": "field", "idx": 66196, "Desc": "size of the divider ."}{"node_name": "oneTouchExpandable", "type": "field", "idx": 66197, "Desc": "is a little widget provided to quickly expand / collapse the split pane ?"}{"node_name": "lastDividerLocation", "type": "field", "idx": 66198, "Desc": "previous location of the split pane ."}{"node_name": "WRAP_TAB_LAYOUT", "type": "field", "idx": 66282, "Desc": "the tab layout policy for wrapping tabs in multiple runs when all tabs will not fit within a single run ."}{"node_name": "SCROLL_TAB_LAYOUT", "type": "field", "idx": 66283, "Desc": "tab layout policy for providing a subset of available tabs when all the tabs will not fit within a single run . if all the tabs do not fit within a single run the look and feel will provide a way to navigate to hidden tabs ."}{"node_name": "tabPlacement", "type": "field", "idx": 66284, "Desc": "where the tabs are placed ."}{"node_name": "model", "type": "field", "idx": 66285, "Desc": "the default selection model"}{"node_name": "changeListener", "type": "field", "idx": 66286, "Desc": "the changelistener is the listener we add to the model ."}{"node_name": "changeEvent", "type": "field", "idx": 66287, "Desc": "only one changeevent is needed per tabpane instance since the event's only ( read-only ) state is the source property . the source of events generated here is always \" this \" ."}{"node_name": "type", "type": "field", "idx": 66497, "Desc": "the type"}{"node_name": "firstRow", "type": "field", "idx": 66498, "Desc": "the first row"}{"node_name": "lastRow", "type": "field", "idx": 66499, "Desc": "the last row"}{"node_name": "firstColumn", "type": "field", "idx": 66500, "Desc": "the first column"}{"node_name": "lastColumn", "type": "field", "idx": 66501, "Desc": "the last column"}{"node_name": "AUTO_RESIZE_OFF", "type": "field", "idx": 66616, "Desc": "do not adjust column widths automatically ; use a horizontal scrollbar instead ."}{"node_name": "AUTO_RESIZE_NEXT_COLUMN", "type": "field", "idx": 66617, "Desc": "when a column is adjusted in the ui , adjust the next column the opposite way ."}{"node_name": "AUTO_RESIZE_SUBSEQUENT_COLUMNS", "type": "field", "idx": 66618, "Desc": "during ui adjustment , change subsequent columns to preserve the total width ; this is the default behavior ."}{"node_name": "AUTO_RESIZE_LAST_COLUMN", "type": "field", "idx": 66619, "Desc": "during all resize operations , apply adjustments to the last column only ."}{"node_name": "AUTO_RESIZE_ALL_COLUMNS", "type": "field", "idx": 66620, "Desc": "during all resize operations , proportionately resize all columns ."}{"node_name": "dataModel", "type": "field", "idx": 66621, "Desc": "the tablemodel of the table ."}{"node_name": "columnModel", "type": "field", "idx": 66622, "Desc": "the tablecolumnmodel of the table ."}{"node_name": "selectionModel", "type": "field", "idx": 66623, "Desc": "the listselectionmodel of the table , used to keep track of row selections ."}{"node_name": "tableHeader", "type": "field", "idx": 66624, "Desc": "the tableheader working with the table ."}{"node_name": "rowHeight", "type": "field", "idx": 66625, "Desc": "the height in pixels of each row in the table ."}{"node_name": "rowMargin", "type": "field", "idx": 66626, "Desc": "the height in pixels of the margin between the cells in each row ."}{"node_name": "gridColor", "type": "field", "idx": 66627, "Desc": "the color of the grid ."}{"node_name": "showHorizontalLines", "type": "field", "idx": 66628, "Desc": "the table draws horizontal lines between cells if showhorizontallines is true ."}{"node_name": "showVerticalLines", "type": "field", "idx": 66629, "Desc": "the table draws vertical lines between cells if showverticallines is true ."}{"node_name": "autoResizeMode", "type": "field", "idx": 66630, "Desc": "determines if the table automatically resizes the width of the table's columns to take up the entire width of the table , and how it does the resizing ."}{"node_name": "autoCreateColumnsFromModel", "type": "field", "idx": 66631, "Desc": "the table will query the tablemodel to build the default set of columns if this is true ."}{"node_name": "preferredViewportSize", "type": "field", "idx": 66632, "Desc": "used by the scrollable interface to determine the initial visible area ."}{"node_name": "rowSelectionAllowed", "type": "field", "idx": 66633, "Desc": "true if row selection is allowed in this table ."}{"node_name": "cellSelectionEnabled", "type": "field", "idx": 66634, "Desc": "obsolete as of java 2 platform v1.3 . please use the rowselectionallowed property and the columnselectionallowed property of the columnmodel instead . or use the method getcellselectionenabled ."}{"node_name": "editorComp", "type": "field", "idx": 66635, "Desc": "if editing , the component that is handling the editing ."}{"node_name": "cellEditor", "type": "field", "idx": 66636, "Desc": "the active cell editor object , that overwrites the screen real estate occupied by the current cell and allows the user to change its contents . null if the table isn't currently editing ."}{"node_name": "editingColumn", "type": "field", "idx": 66637, "Desc": "identifies the column of the cell being edited ."}{"node_name": "editingRow", "type": "field", "idx": 66638, "Desc": "identifies the row of the cell being edited ."}{"node_name": "defaultRenderersByColumnClass", "type": "field", "idx": 66639, "Desc": "a table of objects that display the contents of a cell , indexed by class as declared in getcolumnclass in the tablemodel interface ."}{"node_name": "defaultEditorsByColumnClass", "type": "field", "idx": 66640, "Desc": "a table of objects that display and edit the contents of a cell , indexed by class as declared in getcolumnclass in the tablemodel interface ."}{"node_name": "selectionForeground", "type": "field", "idx": 66641, "Desc": "the foreground color of selected cells ."}{"node_name": "selectionBackground", "type": "field", "idx": 66642, "Desc": "the background color of selected cells ."}{"node_name": "notifyAction", "type": "field", "idx": 67025, "Desc": "name of the action to send notification that the contents of notifyAction have been accepted . typically this is bound to a carriage-return ."}{"node_name": "hasChildren", "type": "field", "idx": 67337, "Desc": "does the this jtree have children ? this property is currently not implemented ."}{"node_name": "childValue", "type": "field", "idx": 67338, "Desc": "value to create children with ."}{"node_name": "loadedChildren", "type": "field", "idx": 67339, "Desc": "have the children been loaded yet ?"}{"node_name": "sharedInstance", "type": "field", "idx": 67353, "Desc": "the single instance of emptyselectionmodel ."}{"node_name": "treeModel", "type": "field", "idx": 67375, "Desc": "the model that defines the tree displayed by this object ."}{"node_name": "selectionModel", "type": "field", "idx": 67376, "Desc": "models the set of selected nodes in this tree ."}{"node_name": "rootVisible", "type": "field", "idx": 67377, "Desc": "true if the root node is displayed , false if its children are the highest visible nodes ."}{"node_name": "cellRenderer", "type": "field", "idx": 67378, "Desc": "the cell used to draw nodes . if null , the ui uses a default cellrenderer ."}{"node_name": "rowHeight", "type": "field", "idx": 67379, "Desc": "height to use for each display row . if this is <= 0 the renderer determines the height for each row ."}{"node_name": "showsRootHandles", "type": "field", "idx": 67380, "Desc": "true if handles are displayed at the topmost level of the tree . a handle is a small icon that displays adjacent to the node which allows the user to click once to expand or collapse the node . a common interface shows a plus sign ( + ) for a node which can be expanded and a minus sign ( - ) for a node which can be collapsed . handles are always shown for nodes below the topmost level . if the rootvisible setting specifies that the root node is to be displayed , then that is the only node at the topmost level . if the root node is not displayed , then all of its children are at the topmost level of the tree . handles are always displayed for nodes other than the topmost . if the root node isn't visible , it is generally a good to make this value true . otherwise , the tree looks exactly like a list , and users may not know that the \" list entries \" are actually tree nodes ."}{"node_name": "selectionRedirector", "type": "field", "idx": 67381, "Desc": "creates a new event and passed it off the selectionlisteners ."}{"node_name": "cellEditor", "type": "field", "idx": 67382, "Desc": "editor for the entries . default is null ( tree is not editable ) ."}{"node_name": "editable", "type": "field", "idx": 67383, "Desc": "is the tree editable ? default is false ."}{"node_name": "largeModel", "type": "field", "idx": 67384, "Desc": "is this tree a large model ? this is a code-optimization setting . a large model can be used when the cell height is the same for all nodes . the ui will then cache very little information and instead continually message the model . without a large model the ui caches most of the information , resulting in fewer method calls to the model . this value is only a suggestion to the ui . not all uis will take advantage of it . default value is false ."}{"node_name": "visibleRowCount", "type": "field", "idx": 67385, "Desc": "number of rows to make visible at one time . this value is used for the scrollable interface . it determines the preferred size of the display area ."}{"node_name": "invokesStopCellEditing", "type": "field", "idx": 67386, "Desc": "if true , when editing is to be stopped by way of selection changing , data in tree changing or other means stopcellediting is invoked , and changes are saved . if false , cancelcellediting is invoked , and changes are discarded . default is false ."}{"node_name": "scrollsOnExpand", "type": "field", "idx": 67387, "Desc": "if true , when a node is expanded , as many of the descendants are scrolled to be visible ."}{"node_name": "toggleClickCount", "type": "field", "idx": 67388, "Desc": "number of mouse clicks before a node is expanded ."}{"node_name": "treeModelListener", "type": "field", "idx": 67389, "Desc": "updates the expandedstate ."}{"node_name": "CELL_RENDERER_PROPERTY", "type": "field", "idx": 67390, "Desc": "bound property name for cellrenderer ."}{"node_name": "TREE_MODEL_PROPERTY", "type": "field", "idx": 67391, "Desc": "bound property name for treemodel ."}{"node_name": "ROOT_VISIBLE_PROPERTY", "type": "field", "idx": 67392, "Desc": "bound property name for rootvisible ."}{"node_name": "SHOWS_ROOT_HANDLES_PROPERTY", "type": "field", "idx": 67393, "Desc": "bound property name for showsroothandles ."}{"node_name": "ROW_HEIGHT_PROPERTY", "type": "field", "idx": 67394, "Desc": "bound property name for rowheight ."}{"node_name": "CELL_EDITOR_PROPERTY", "type": "field", "idx": 67395, "Desc": "bound property name for celleditor ."}{"node_name": "EDITABLE_PROPERTY", "type": "field", "idx": 67396, "Desc": "bound property name for editable ."}{"node_name": "LARGE_MODEL_PROPERTY", "type": "field", "idx": 67397, "Desc": "bound property name for largemodel ."}{"node_name": "SELECTION_MODEL_PROPERTY", "type": "field", "idx": 67398, "Desc": "bound property name for selectionmodel ."}{"node_name": "VISIBLE_ROW_COUNT_PROPERTY", "type": "field", "idx": 67399, "Desc": "bound property name for visiblerowcount ."}{"node_name": "INVOKES_STOP_CELL_EDITING_PROPERTY", "type": "field", "idx": 67400, "Desc": "bound property name for messagesstopcellediting ."}{"node_name": "SCROLLS_ON_EXPAND_PROPERTY", "type": "field", "idx": 67401, "Desc": "bound property name for scrollsonexpand ."}{"node_name": "TOGGLE_CLICK_COUNT_PROPERTY", "type": "field", "idx": 67402, "Desc": "bound property name for toggleclickcount ."}{"node_name": "LEAD_SELECTION_PATH_PROPERTY", "type": "field", "idx": 67403, "Desc": "bound property name for leadselectionpath ."}{"node_name": "ANCHOR_SELECTION_PATH_PROPERTY", "type": "field", "idx": 67404, "Desc": "bound property name for anchor selection path ."}{"node_name": "EXPANDS_SELECTED_PATHS_PROPERTY", "type": "field", "idx": 67405, "Desc": "bound property name for expands selected paths property"}{"node_name": "isViewSizeSet", "type": "field", "idx": 67665, "Desc": "true when the viewport dimensions have been determined . the default is false ."}{"node_name": "lastPaintPosition", "type": "field", "idx": 67666, "Desc": "the last viewposition that we've painted , so we know how much of the backing store image is valid ."}{"node_name": "backingStoreImage", "type": "field", "idx": 67667, "Desc": "the view image used for a backing store ."}{"node_name": "scrollUnderway", "type": "field", "idx": 67668, "Desc": "the scrollunderway flag is used for components like jlist . when the downarrow key is pressed on a jlist and the selected cell is the last in the list , the scrollpane autoscrolls . here , the old selected cell needs repainting and so we need a flag to make the viewport do the optimized painting only when there is an explicit call to setviewposition ( point ) . when setbounds is called through other routes , the flag is off and the view repaints normally . another approach would be to remove this from the jviewport class and have the jlist manage this case by using setbackingstoreenabled . the default is false ."}{"node_name": "BLIT_SCROLL_MODE", "type": "field", "idx": 67669, "Desc": "use graphics.copyarea to implement scrolling . this is the fastest for most applications ."}{"node_name": "BACKINGSTORE_SCROLL_MODE", "type": "field", "idx": 67670, "Desc": "draws viewport contents into an offscreen image . this was previously the default mode for jtable . this mode may offer advantages over \" blit mode \" in some cases , but it requires a large chunk of extra ram ."}{"node_name": "SIMPLE_SCROLL_MODE", "type": "field", "idx": 67671, "Desc": "this mode uses the very simple method of redrawing the entire contents of the scrollpane each time it is scrolled . this was the default behavior in swing 1.0 and swing 1.1 . either of the other two options will provide better performance in most cases ."}{"node_name": "rootPane", "type": "field", "idx": 67752, "Desc": "the jrootpane instance that manages the contentpane and optional menubar for this frame , as well as the glasspane ."}{"node_name": "rootPaneCheckingEnabled", "type": "field", "idx": 67753, "Desc": "if true then calls to add and setlayout will be forwarded to the contentpane . this is initially false , but is set to true when the jwindow is constructed ."}{"node_name": "accessibleContext", "type": "field", "idx": 67754, "Desc": "the accessible context property ."}{"node_name": "SINGLE_SELECTION", "type": "field", "idx": 67870, "Desc": "a value for the selectionmode property : select one list index at a time ."}{"node_name": "SINGLE_INTERVAL_SELECTION", "type": "field", "idx": 67871, "Desc": "a value for the selectionmode property : select one contiguous range of indices at a time ."}{"node_name": "MULTIPLE_INTERVAL_SELECTION", "type": "field", "idx": 67872, "Desc": "a value for the selectionmode property : select one or more contiguous ranges of indices at a time ."}{"node_name": "changeEvent", "type": "field", "idx": 67982, "Desc": "only one changeevent is needed per button model instance since the event's only state is the source property . the source of events generated is always \" this \" ."}{"node_name": "listenerList", "type": "field", "idx": 67983, "Desc": "the collection of registered listeners"}{"node_name": "direction", "type": "field", "idx": 68050, "Desc": "the direction of the arrow . one of swingconstants.north , swingconstants.south , swingconstants.east or swingconstants.west ."}{"node_name": "shadow", "type": "field", "idx": 68074, "Desc": "the color of shadow ."}{"node_name": "darkShadow", "type": "field", "idx": 68075, "Desc": "the color of dark shadow ."}{"node_name": "highlight", "type": "field", "idx": 68076, "Desc": "the color of highlight ."}{"node_name": "lightHighlight", "type": "field", "idx": 68077, "Desc": "the color of light highlight ."}{"node_name": "shadow", "type": "field", "idx": 68084, "Desc": "the color of shadow ."}{"node_name": "darkShadow", "type": "field", "idx": 68085, "Desc": "the color of dark shadow ."}{"node_name": "highlight", "type": "field", "idx": 68086, "Desc": "the color of highlight ."}{"node_name": "lightHighlight", "type": "field", "idx": 68087, "Desc": "the color of light highlight ."}{"node_name": "highlight", "type": "field", "idx": 68123, "Desc": "the color of highlight"}{"node_name": "shadow", "type": "field", "idx": 68124, "Desc": "the color of shadow"}{"node_name": "defaultTextIconGap", "type": "field", "idx": 68144, "Desc": "the default gap between a text and an icon ."}{"node_name": "defaultTextShiftOffset", "type": "field", "idx": 68145, "Desc": "the default offset of a text ."}{"node_name": "chooser", "type": "field", "idx": 68212, "Desc": "jcolorchooser this basiccolorchooserui is installed on ."}{"node_name": "defaultChoosers", "type": "field", "idx": 68213, "Desc": "the array of default color choosers ."}{"node_name": "previewListener", "type": "field", "idx": 68214, "Desc": "the instance of changelistener ."}{"node_name": "propertyChangeListener", "type": "field", "idx": 68215, "Desc": "the instance of propertychangelistener ."}{"node_name": "editor", "type": "field", "idx": 68231, "Desc": "an instance of jtextfield ."}{"node_name": "noFocusBorder", "type": "field", "idx": 68239, "Desc": "an empty border . noFocusBorder might not be used . to change the border used by this renderer directly set it using the setborder method ."}{"node_name": "comboBox", "type": "field", "idx": 68250, "Desc": "the instance of jcombobox ."}{"node_name": "hasFocus", "type": "field", "idx": 68251, "Desc": "this protected field is implementation specific . do not access directly or override ."}{"node_name": "listBox", "type": "field", "idx": 68252, "Desc": "this list is for drawing the current item in the combo box ."}{"node_name": "currentValuePane", "type": "field", "idx": 68253, "Desc": "used to render the currently selected item in the combo box . it doesn't have anything to do with the popup's rendering ."}{"node_name": "popup", "type": "field", "idx": 68254, "Desc": "the implementation of combopopup that is used to show the popup ."}{"node_name": "editor", "type": "field", "idx": 68255, "Desc": "the component that the @{code comboboxeditor } uses for editing ."}{"node_name": "arrowButton", "type": "field", "idx": 68256, "Desc": "the arrow button that invokes the popup ."}{"node_name": "keyListener", "type": "field", "idx": 68257, "Desc": "this protected field is implementation specific . do not access directly or override . override the listener construction method instead ."}{"node_name": "focusListener", "type": "field", "idx": 68258, "Desc": "this protected field is implementation specific . do not access directly or override . override the listener construction method instead ."}{"node_name": "propertyChangeListener", "type": "field", "idx": 68259, "Desc": "this protected field is implementation specific . do not access directly or override . override the listener construction method instead ."}{"node_name": "itemListener", "type": "field", "idx": 68260, "Desc": "this protected field is implementation specific . do not access directly or override . override the listener construction method instead ."}{"node_name": "popupMouseListener", "type": "field", "idx": 68261, "Desc": "the mouselistener listens to events ."}{"node_name": "popupMouseMotionListener", "type": "field", "idx": 68262, "Desc": "the mousemotionlistener listens to events ."}{"node_name": "popupKeyListener", "type": "field", "idx": 68263, "Desc": "the keylistener listens to events ."}{"node_name": "listDataListener", "type": "field", "idx": 68264, "Desc": "this protected field is implementation specific . do not access directly or override . override the listener construction method instead ."}{"node_name": "isMinimumSizeDirty", "type": "field", "idx": 68265, "Desc": "the flag for recalculating the minimum preferred size ."}{"node_name": "cachedMinimumSize", "type": "field", "idx": 68266, "Desc": "the cached minimum preferred size ."}{"node_name": "squareButton", "type": "field", "idx": 68267, "Desc": "indicates whether or not the combo box button should be square . if square , then the width and height are equal , and are both set to the height of the combo minus appropriate insets ."}{"node_name": "padding", "type": "field", "idx": 68268, "Desc": "if specified , these insets act as padding around the cell renderer when laying out and painting the \" selected \" item in the combo box . these insets add to those specified by the cell renderer ."}{"node_name": "comboBox", "type": "field", "idx": 68349, "Desc": "the instance of jcombobox ."}{"node_name": "list", "type": "field", "idx": 68350, "Desc": "this protected field is implementation specific . do not access directly or override . use the accessor methods instead ."}{"node_name": "scroller", "type": "field", "idx": 68351, "Desc": "this protected field is implementation specific . do not access directly or override . use the create method instead"}{"node_name": "valueIsAdjusting", "type": "field", "idx": 68352, "Desc": "as of java 2 platform v1.4 this previously undocumented field is no longer used ."}{"node_name": "mouseMotionListener", "type": "field", "idx": 68353, "Desc": "this protected field is implementation specific . do not access directly or override . use the accessor or create methods instead ."}{"node_name": "mouseListener", "type": "field", "idx": 68354, "Desc": "this protected field is implementation specific . do not access directly or override . use the accessor or create methods instead ."}{"node_name": "keyListener", "type": "field", "idx": 68355, "Desc": "this protected field is implementation specific . do not access directly or override . use the accessor or create methods instead ."}{"node_name": "listSelectionListener", "type": "field", "idx": 68356, "Desc": "this protected field is implementation specific . do not access directly or override . use the create method instead ."}{"node_name": "listMouseListener", "type": "field", "idx": 68357, "Desc": "this protected field is implementation specific . do not access directly or override . use the create method instead ."}{"node_name": "listMouseMotionListener", "type": "field", "idx": 68358, "Desc": "this protected field is implementation specific . do not access directly or override . use the create method instead"}{"node_name": "propertyChangeListener", "type": "field", "idx": 68359, "Desc": "this protected field is implementation specific . do not access directly or override . use the create method instead"}{"node_name": "listDataListener", "type": "field", "idx": 68360, "Desc": "this protected field is implementation specific . do not access directly or override . use the create method instead"}{"node_name": "itemListener", "type": "field", "idx": 68361, "Desc": "this protected field is implementation specific . do not access directly or override . use the create method instead"}{"node_name": "autoscrollTimer", "type": "field", "idx": 68362, "Desc": "this protected field is implementation specific . do not access directly or override ."}{"node_name": "hasEntered", "type": "field", "idx": 68363, "Desc": "true if the mouse cursor is in the popup ."}{"node_name": "isAutoScrolling", "type": "field", "idx": 68364, "Desc": "if true the auto-scrolling is enabled ."}{"node_name": "scrollDirection", "type": "field", "idx": 68365, "Desc": "the direction of scrolling ."}{"node_name": "SCROLL_UP", "type": "field", "idx": 68366, "Desc": "the direction of scrolling up ."}{"node_name": "SCROLL_DOWN", "type": "field", "idx": 68367, "Desc": "the direction of scrolling down ."}{"node_name": "desktopIcon", "type": "field", "idx": 68432, "Desc": "the instance of jinternalframe.jdesktopicon ."}{"node_name": "frame", "type": "field", "idx": 68433, "Desc": "the instance of jinternalframe ."}{"node_name": "iconPane", "type": "field", "idx": 68434, "Desc": "the title pane component used in the desktop icon ."}{"node_name": "desktop", "type": "field", "idx": 68461, "Desc": "the instance of jdesktoppane ."}{"node_name": "desktopManager", "type": "field", "idx": 68462, "Desc": "the instance of desktopmanager ."}{"node_name": "iconCache", "type": "field", "idx": 68538, "Desc": "the icon cache"}{"node_name": "directoryIcon", "type": "field", "idx": 68560, "Desc": "directory icon"}{"node_name": "fileIcon", "type": "field", "idx": 68561, "Desc": "file icon"}{"node_name": "computerIcon", "type": "field", "idx": 68562, "Desc": "computer icon"}{"node_name": "hardDriveIcon", "type": "field", "idx": 68563, "Desc": "hard drive icon"}{"node_name": "floppyDriveIcon", "type": "field", "idx": 68564, "Desc": "floppy drive icon"}{"node_name": "newFolderIcon", "type": "field", "idx": 68565, "Desc": "new folder icon"}{"node_name": "upFolderIcon", "type": "field", "idx": 68566, "Desc": "up folder icon"}{"node_name": "homeFolderIcon", "type": "field", "idx": 68567, "Desc": "home folder icon"}{"node_name": "listViewIcon", "type": "field", "idx": 68568, "Desc": "list view icon"}{"node_name": "detailsViewIcon", "type": "field", "idx": 68569, "Desc": "details view icon"}{"node_name": "viewMenuIcon", "type": "field", "idx": 68570, "Desc": "view menu icon"}{"node_name": "saveButtonMnemonic", "type": "field", "idx": 68571, "Desc": "save button mnemonic"}{"node_name": "openButtonMnemonic", "type": "field", "idx": 68572, "Desc": "open button mnemonic"}{"node_name": "cancelButtonMnemonic", "type": "field", "idx": 68573, "Desc": "cancel button mnemonic"}{"node_name": "updateButtonMnemonic", "type": "field", "idx": 68574, "Desc": "update button mnemonic"}{"node_name": "helpButtonMnemonic", "type": "field", "idx": 68575, "Desc": "help button mnemonic"}{"node_name": "directoryOpenButtonMnemonic", "type": "field", "idx": 68576, "Desc": "the mnemonic keycode used for the approve button when a directory is selected and the current selection mode is files_only ."}{"node_name": "saveButtonText", "type": "field", "idx": 68577, "Desc": "save button text"}{"node_name": "openButtonText", "type": "field", "idx": 68578, "Desc": "open button text"}{"node_name": "cancelButtonText", "type": "field", "idx": 68579, "Desc": "cancel button text"}{"node_name": "updateButtonText", "type": "field", "idx": 68580, "Desc": "update button text"}{"node_name": "helpButtonText", "type": "field", "idx": 68581, "Desc": "help button text"}{"node_name": "directoryOpenButtonText", "type": "field", "idx": 68582, "Desc": "the label text displayed on the approve button when a directory is selected and the current selection mode is files_only ."}{"node_name": "saveButtonToolTipText", "type": "field", "idx": 68583, "Desc": "save button tool tip text"}{"node_name": "openButtonToolTipText", "type": "field", "idx": 68584, "Desc": "open button tool tip text"}{"node_name": "cancelButtonToolTipText", "type": "field", "idx": 68585, "Desc": "cancel button tool tip text"}{"node_name": "updateButtonToolTipText", "type": "field", "idx": 68586, "Desc": "update button tool tip text"}{"node_name": "helpButtonToolTipText", "type": "field", "idx": 68587, "Desc": "help button tool tip text"}{"node_name": "directoryOpenButtonToolTipText", "type": "field", "idx": 68588, "Desc": "the tooltip text displayed on the approve button when a directory is selected and the current selection mode is files_only ."}{"node_name": "propertyKey", "type": "field", "idx": 68756, "Desc": "key to use for the html renderer when stored as a client property of a jcomponent ."}{"node_name": "documentBaseKey", "type": "field", "idx": 68757, "Desc": "key stored as a client property to indicate the base that relative references are resolved against . for example , lets say you keep your images in the directory resources relative to the code path , you would use the following the set the base : jcomponent.putclientproperty ( documentbasekey , xxx.class.getresource ( \" resources / \")) ;"}{"node_name": "menuBar", "type": "field", "idx": 68786, "Desc": "the instance of jmenubar ."}{"node_name": "iconButton", "type": "field", "idx": 68787, "Desc": "the iconify button ."}{"node_name": "maxButton", "type": "field", "idx": 68788, "Desc": "the maximize button ."}{"node_name": "closeButton", "type": "field", "idx": 68789, "Desc": "the close button ."}{"node_name": "windowMenu", "type": "field", "idx": 68790, "Desc": "the instance of jmenu ."}{"node_name": "frame", "type": "field", "idx": 68791, "Desc": "the instance of jinternalframe ."}{"node_name": "selectedTitleColor", "type": "field", "idx": 68792, "Desc": "the color of a selected title ."}{"node_name": "selectedTextColor", "type": "field", "idx": 68793, "Desc": "the color of a selected text ."}{"node_name": "notSelectedTitleColor", "type": "field", "idx": 68794, "Desc": "the color of a not selected title ."}{"node_name": "notSelectedTextColor", "type": "field", "idx": 68795, "Desc": "the color of a not selected text ."}{"node_name": "maxIcon", "type": "field", "idx": 68796, "Desc": "the maximize icon ."}{"node_name": "minIcon", "type": "field", "idx": 68797, "Desc": "the minimize icon ."}{"node_name": "iconIcon", "type": "field", "idx": 68798, "Desc": "the iconify icon ."}{"node_name": "closeIcon", "type": "field", "idx": 68799, "Desc": "the close icon ."}{"node_name": "propertyChangeListener", "type": "field", "idx": 68800, "Desc": "the instance of a propertychangelistener ."}{"node_name": "closeAction", "type": "field", "idx": 68801, "Desc": "the instance of a closeaction ."}{"node_name": "maximizeAction", "type": "field", "idx": 68802, "Desc": "the instance of a maximizeaction ."}{"node_name": "iconifyAction", "type": "field", "idx": 68803, "Desc": "the instance of an iconifyaction ."}{"node_name": "restoreAction", "type": "field", "idx": 68804, "Desc": "the instance of a restoreaction ."}{"node_name": "moveAction", "type": "field", "idx": 68805, "Desc": "the instance of a moveaction ."}{"node_name": "sizeAction", "type": "field", "idx": 68806, "Desc": "the instance of a sizeaction ."}{"node_name": "CLOSE_CMD", "type": "field", "idx": 68807, "Desc": "the close button text property ."}{"node_name": "ICONIFY_CMD", "type": "field", "idx": 68808, "Desc": "the minimize button text property ."}{"node_name": "RESTORE_CMD", "type": "field", "idx": 68809, "Desc": "the restore button text property ."}{"node_name": "MAXIMIZE_CMD", "type": "field", "idx": 68810, "Desc": "the maximize button text property ."}{"node_name": "MOVE_CMD", "type": "field", "idx": 68811, "Desc": "the move button text property ."}{"node_name": "SIZE_CMD", "type": "field", "idx": 68812, "Desc": "the size button text property ."}{"node_name": "RESIZE_NONE", "type": "field", "idx": 68858, "Desc": "resize none"}{"node_name": "frame", "type": "field", "idx": 68873, "Desc": "frame"}{"node_name": "borderListener", "type": "field", "idx": 68874, "Desc": "border listener"}{"node_name": "propertyChangeListener", "type": "field", "idx": 68875, "Desc": "property change listener"}{"node_name": "internalFrameLayout", "type": "field", "idx": 68876, "Desc": "internal frame layout"}{"node_name": "componentListener", "type": "field", "idx": 68877, "Desc": "component listener"}{"node_name": "glassPaneDispatcher", "type": "field", "idx": 68878, "Desc": "glass pane dispatcher"}{"node_name": "northPane", "type": "field", "idx": 68879, "Desc": "north pane"}{"node_name": "southPane", "type": "field", "idx": 68880, "Desc": "south pane"}{"node_name": "westPane", "type": "field", "idx": 68881, "Desc": "west pane"}{"node_name": "eastPane", "type": "field", "idx": 68882, "Desc": "east pane"}{"node_name": "titlePane", "type": "field", "idx": 68883, "Desc": "title pane"}{"node_name": "labelUI", "type": "field", "idx": 68965, "Desc": "the default basiclabelui instance . labelUI might not be used . to change the default instance use a subclass which overrides the createui method , and place that class name in defaults table under the key \" labelui \" ."}{"node_name": "list", "type": "field", "idx": 69022, "Desc": "the instance of jlist ."}{"node_name": "rendererPane", "type": "field", "idx": 69023, "Desc": "the instance of cellrendererpane ."}{"node_name": "focusListener", "type": "field", "idx": 69024, "Desc": "focuslistener that attached to jlist ."}{"node_name": "mouseInputListener", "type": "field", "idx": 69025, "Desc": "mouseinputlistener that attached to jlist ."}{"node_name": "listSelectionListener", "type": "field", "idx": 69026, "Desc": "listselectionlistener that attached to jlist ."}{"node_name": "listDataListener", "type": "field", "idx": 69027, "Desc": "listdatalistener that attached to jlist ."}{"node_name": "propertyChangeListener", "type": "field", "idx": 69028, "Desc": "propertychangelistener that attached to jlist ."}{"node_name": "cellHeights", "type": "field", "idx": 69029, "Desc": "the array of cells ' height"}{"node_name": "cellHeight", "type": "field", "idx": 69030, "Desc": "the height of cell ."}{"node_name": "cellWidth", "type": "field", "idx": 69031, "Desc": "the width of cell ."}{"node_name": "updateLayoutStateNeeded", "type": "field", "idx": 69032, "Desc": "the value represents changes to jlist model ."}{"node_name": "modelChanged", "type": "field", "idx": 69033, "Desc": "the bit relates to model changed property ."}{"node_name": "selectionModelChanged", "type": "field", "idx": 69034, "Desc": "the bit relates to selection model changed property ."}{"node_name": "fontChanged", "type": "field", "idx": 69035, "Desc": "the bit relates to font changed property ."}{"node_name": "fixedCellWidthChanged", "type": "field", "idx": 69036, "Desc": "the bit relates to fixed cell width changed property ."}{"node_name": "fixedCellHeightChanged", "type": "field", "idx": 69037, "Desc": "the bit relates to fixed cell height changed property ."}{"node_name": "prototypeCellValueChanged", "type": "field", "idx": 69038, "Desc": "the bit relates to prototype cell value changed property ."}{"node_name": "cellRendererChanged", "type": "field", "idx": 69039, "Desc": "the bit relates to cell renderer changed property ."}{"node_name": "menuBar", "type": "field", "idx": 69117, "Desc": "the instance of jmenubar ."}{"node_name": "containerListener", "type": "field", "idx": 69118, "Desc": "the instance of containerlistener ."}{"node_name": "changeListener", "type": "field", "idx": 69119, "Desc": "the instance of changelistener ."}{"node_name": "menuItem", "type": "field", "idx": 69132, "Desc": "the instance of jmenuitem ."}{"node_name": "selectionBackground", "type": "field", "idx": 69133, "Desc": "the color of the selection background ."}{"node_name": "selectionForeground", "type": "field", "idx": 69134, "Desc": "the color of the selection foreground ."}{"node_name": "disabledForeground", "type": "field", "idx": 69135, "Desc": "the color of the disabled foreground ."}{"node_name": "acceleratorForeground", "type": "field", "idx": 69136, "Desc": "the color of the accelerator foreground ."}{"node_name": "acceleratorSelectionForeground", "type": "field", "idx": 69137, "Desc": "the color of the accelerator selection ."}{"node_name": "acceleratorDelimiter", "type": "field", "idx": 69138, "Desc": "accelerator delimiter string , such as ' + ' in ' ctrl+c ' ."}{"node_name": "defaultTextIconGap", "type": "field", "idx": 69139, "Desc": "the gap between the text and the icon ."}{"node_name": "acceleratorFont", "type": "field", "idx": 69140, "Desc": "the accelerator font ."}{"node_name": "mouseInputListener", "type": "field", "idx": 69141, "Desc": "the instance of mouseinputlistener ."}{"node_name": "menuDragMouseListener", "type": "field", "idx": 69142, "Desc": "the instance of menudragmouselistener ."}{"node_name": "menuKeyListener", "type": "field", "idx": 69143, "Desc": "the instance of menukeylistener ."}{"node_name": "propertyChangeListener", "type": "field", "idx": 69144, "Desc": "propertychangelistener returned from createpropertychangelistener . you should not need to access propertyChangeListener , rather if you want to customize the propertychangelistener override createpropertychangelistener ."}{"node_name": "arrowIcon", "type": "field", "idx": 69145, "Desc": "the arrow icon ."}{"node_name": "checkIcon", "type": "field", "idx": 69146, "Desc": "the check icon ."}{"node_name": "oldBorderPainted", "type": "field", "idx": 69147, "Desc": "the value represents if the old border is painted ."}{"node_name": "menu", "type": "field", "idx": 69201, "Desc": "the instance of jmenu ."}{"node_name": "ui", "type": "field", "idx": 69202, "Desc": "the instance of basicmenuui ."}{"node_name": "isSelected", "type": "field", "idx": 69203, "Desc": "true if an item of popup menu is selected ."}{"node_name": "wasFocused", "type": "field", "idx": 69204, "Desc": "the component that was focused ."}{"node_name": "changeListener", "type": "field", "idx": 69209, "Desc": "the instance of changelistener ."}{"node_name": "menuListener", "type": "field", "idx": 69210, "Desc": "the instance of menulistener ."}{"node_name": "buttonIndex", "type": "field", "idx": 69231, "Desc": "the index of the button ."}{"node_name": "syncAllWidths", "type": "field", "idx": 69235, "Desc": "the value represents if the width of children should be synchronized ."}{"node_name": "padding", "type": "field", "idx": 69236, "Desc": "the padding value ."}{"node_name": "centersChildren", "type": "field", "idx": 69237, "Desc": "if true , children are lumped together in parent ."}{"node_name": "MinimumWidth", "type": "field", "idx": 69251, "Desc": "the mininum width of joptionpane ."}{"node_name": "MinimumHeight", "type": "field", "idx": 69252, "Desc": "the mininum height of joptionpane ."}{"node_name": "optionPane", "type": "field", "idx": 69253, "Desc": "joptionpane that the receiver is providing the look and feel for ."}{"node_name": "minimumSize", "type": "field", "idx": 69254, "Desc": "the size of joptionpane ."}{"node_name": "inputComponent", "type": "field", "idx": 69255, "Desc": "jcomponent provide for input if optionpane.getwantsinput() returns true ."}{"node_name": "initialFocusComponent", "type": "field", "idx": 69256, "Desc": "component to receive focus when messaged with selectinitialvalue ."}{"node_name": "hasCustomComponents", "type": "field", "idx": 69257, "Desc": "this is set to true in validatecomponent if a component is contained in either the message or the buttons ."}{"node_name": "propertyChangeListener", "type": "field", "idx": 69258, "Desc": "the instance of propertychangelistener ."}{"node_name": "popupMenu", "type": "field", "idx": 69344, "Desc": "the instance of jpopupmenu ."}{"node_name": "progressBar", "type": "field", "idx": 69357, "Desc": "the instance of jprogressbar ."}{"node_name": "changeListener", "type": "field", "idx": 69358, "Desc": "the instance of changelistener ."}{"node_name": "boxRect", "type": "field", "idx": 69359, "Desc": "used to hold the location and size of the bouncing box ( returned by getbox ) to be painted ."}{"node_name": "icon", "type": "field", "idx": 69435, "Desc": "the icon ."}{"node_name": "minimumThumbSize", "type": "field", "idx": 69474, "Desc": "minimum thumb size"}{"node_name": "maximumThumbSize", "type": "field", "idx": 69475, "Desc": "maximum thumb size"}{"node_name": "thumbHighlightColor", "type": "field", "idx": 69476, "Desc": "thumb highlight color"}{"node_name": "thumbLightShadowColor", "type": "field", "idx": 69477, "Desc": "thumb light shadow color"}{"node_name": "thumbDarkShadowColor", "type": "field", "idx": 69478, "Desc": "thumb dark shadow color"}{"node_name": "thumbColor", "type": "field", "idx": 69479, "Desc": "thumb color"}{"node_name": "trackColor", "type": "field", "idx": 69480, "Desc": "track color"}{"node_name": "trackHighlightColor", "type": "field", "idx": 69481, "Desc": "track highlight color"}{"node_name": "scrollbar", "type": "field", "idx": 69482, "Desc": "scrollbar"}{"node_name": "incrButton", "type": "field", "idx": 69483, "Desc": "increment button"}{"node_name": "decrButton", "type": "field", "idx": 69484, "Desc": "decrement button"}{"node_name": "isDragging", "type": "field", "idx": 69485, "Desc": "dragging"}{"node_name": "trackListener", "type": "field", "idx": 69486, "Desc": "track listener"}{"node_name": "buttonListener", "type": "field", "idx": 69487, "Desc": "button listener"}{"node_name": "modelListener", "type": "field", "idx": 69488, "Desc": "model listener"}{"node_name": "thumbRect", "type": "field", "idx": 69489, "Desc": "thumb rectangle"}{"node_name": "trackRect", "type": "field", "idx": 69490, "Desc": "track rectangle"}{"node_name": "trackHighlight", "type": "field", "idx": 69491, "Desc": "track highlight"}{"node_name": "NO_HIGHLIGHT", "type": "field", "idx": 69492, "Desc": "no highlight"}{"node_name": "DECREASE_HIGHLIGHT", "type": "field", "idx": 69493, "Desc": "decrease highlight"}{"node_name": "INCREASE_HIGHLIGHT", "type": "field", "idx": 69494, "Desc": "increase highlight"}{"node_name": "scrollListener", "type": "field", "idx": 69495, "Desc": "scroll listener"}{"node_name": "propertyChangeListener", "type": "field", "idx": 69496, "Desc": "property change listener"}{"node_name": "scrollTimer", "type": "field", "idx": 69497, "Desc": "scroll timer"}{"node_name": "scrollBarWidth", "type": "field", "idx": 69498, "Desc": "hint as to what width ( when vertical ) or height ( when horizontal ) should be ."}{"node_name": "incrGap", "type": "field", "idx": 69499, "Desc": "distance between the increment button and the track . this may be a negative number . if negative , then an overlap between the button and track will occur , which is useful for shaped buttons ."}{"node_name": "decrGap", "type": "field", "idx": 69500, "Desc": "distance between the decrement button and the track . this may be a negative number . if negative , then an overlap between the button and track will occur , which is useful for shaped buttons ."}{"node_name": "offset", "type": "field", "idx": 69577, "Desc": "the offset"}{"node_name": "currentMouseX", "type": "field", "idx": 69578, "Desc": "current mouse x position"}{"node_name": "currentMouseY", "type": "field", "idx": 69579, "Desc": "current mouse y position"}{"node_name": "scrollpane", "type": "field", "idx": 69590, "Desc": "the instance of jscrollpane ."}{"node_name": "vsbChangeListener", "type": "field", "idx": 69591, "Desc": "changelistener installed on the vertical scrollbar ."}{"node_name": "hsbChangeListener", "type": "field", "idx": 69592, "Desc": "changelistener installed on the horizontal scrollbar ."}{"node_name": "viewportChangeListener", "type": "field", "idx": 69593, "Desc": "changelistener installed on the viewport ."}{"node_name": "spPropertyChangeListener", "type": "field", "idx": 69594, "Desc": "propertychangelistener installed on the scroll pane ."}{"node_name": "shadow", "type": "field", "idx": 69643, "Desc": "the color of the shadow ."}{"node_name": "highlight", "type": "field", "idx": 69644, "Desc": "the color of the highlighting ."}{"node_name": "POSITIVE_SCROLL", "type": "field", "idx": 69668, "Desc": "positive scroll"}{"node_name": "NEGATIVE_SCROLL", "type": "field", "idx": 69669, "Desc": "negative scroll"}{"node_name": "MIN_SCROLL", "type": "field", "idx": 69670, "Desc": "minimum scroll"}{"node_name": "MAX_SCROLL", "type": "field", "idx": 69671, "Desc": "maximum scroll"}{"node_name": "scrollTimer", "type": "field", "idx": 69672, "Desc": "scroll timer"}{"node_name": "slider", "type": "field", "idx": 69673, "Desc": "slider"}{"node_name": "focusInsets", "type": "field", "idx": 69674, "Desc": "focus insets"}{"node_name": "insetCache", "type": "field", "idx": 69675, "Desc": "inset cache"}{"node_name": "leftToRightCache", "type": "field", "idx": 69676, "Desc": "left-to-right cache"}{"node_name": "focusRect", "type": "field", "idx": 69677, "Desc": "focus rectangle"}{"node_name": "contentRect", "type": "field", "idx": 69678, "Desc": "content rectangle"}{"node_name": "labelRect", "type": "field", "idx": 69679, "Desc": "label rectangle"}{"node_name": "tickRect", "type": "field", "idx": 69680, "Desc": "tick rectangle"}{"node_name": "trackRect", "type": "field", "idx": 69681, "Desc": "track rectangle"}{"node_name": "thumbRect", "type": "field", "idx": 69682, "Desc": "thumb rectangle"}{"node_name": "trackBuffer", "type": "field", "idx": 69683, "Desc": "the distance that the track is from the side of the control"}{"node_name": "trackListener", "type": "field", "idx": 69684, "Desc": "track listener"}{"node_name": "changeListener", "type": "field", "idx": 69685, "Desc": "change listener"}{"node_name": "componentListener", "type": "field", "idx": 69686, "Desc": "component listener"}{"node_name": "focusListener", "type": "field", "idx": 69687, "Desc": "focus listener"}{"node_name": "scrollListener", "type": "field", "idx": 69688, "Desc": "scroll listener"}{"node_name": "propertyChangeListener", "type": "field", "idx": 69689, "Desc": "property chane listener"}{"node_name": "offset", "type": "field", "idx": 69834, "Desc": "the offset"}{"node_name": "currentMouseX", "type": "field", "idx": 69835, "Desc": "current mouse x ."}{"node_name": "currentMouseY", "type": "field", "idx": 69836, "Desc": "current mouse y ."}{"node_name": "spinner", "type": "field", "idx": 69845, "Desc": "the spinner that we're a ui delegate for . initialized by the installui method , and reset to null by uninstallui ."}{"node_name": "ONE_TOUCH_SIZE", "type": "field", "idx": 69898, "Desc": "width or height of the divider based on orientation basicsplitpaneui adds two to this ."}{"node_name": "ONE_TOUCH_OFFSET", "type": "field", "idx": 69899, "Desc": "the offset of the divider ."}{"node_name": "dragger", "type": "field", "idx": 69900, "Desc": "handles mouse dragging message to do the actual dragging ."}{"node_name": "splitPaneUI", "type": "field", "idx": 69901, "Desc": "ui this instance was created from ."}{"node_name": "dividerSize", "type": "field", "idx": 69902, "Desc": "size of the divider ."}{"node_name": "hiddenDivider", "type": "field", "idx": 69903, "Desc": "divider that is used for noncontinuous layout mode ."}{"node_name": "splitPane", "type": "field", "idx": 69904, "Desc": "jsplitpane the receiver is contained in ."}{"node_name": "mouseHandler", "type": "field", "idx": 69905, "Desc": "handles mouse events from both this class , and the split pane . mouse events are handled for the splitpane since you want to be able to drag when clicking on the border of the divider , which is not drawn by the divider ."}{"node_name": "orientation", "type": "field", "idx": 69906, "Desc": "orientation of the jsplitpane ."}{"node_name": "leftButton", "type": "field", "idx": 69907, "Desc": "button for quickly toggling the left component ."}{"node_name": "rightButton", "type": "field", "idx": 69908, "Desc": "button for quickly toggling the right component ."}{"node_name": "sizes", "type": "field", "idx": 69961, "Desc": "the size of components ."}{"node_name": "components", "type": "field", "idx": 69962, "Desc": "the components ."}{"node_name": "NON_CONTINUOUS_DIVIDER", "type": "field", "idx": 70012, "Desc": "the divider used for non-continuous layout is added to the split pane with this object ."}{"node_name": "KEYBOARD_DIVIDER_MOVE_OFFSET", "type": "field", "idx": 70013, "Desc": "how far ( relative ) the divider does move when it is moved around by the cursor keys on the keyboard ."}{"node_name": "splitPane", "type": "field", "idx": 70014, "Desc": "jsplitpane instance this instance is providing the look and feel for ."}{"node_name": "layoutManager", "type": "field", "idx": 70015, "Desc": "layoutmanager that is created and placed into the split pane ."}{"node_name": "divider", "type": "field", "idx": 70016, "Desc": "instance of the divider for this jsplitpane ."}{"node_name": "propertyChangeListener", "type": "field", "idx": 70017, "Desc": "instance of the propertychangelistener for this jsplitpane ."}{"node_name": "focusListener", "type": "field", "idx": 70018, "Desc": "instance of the focuslistener for this jsplitpane ."}{"node_name": "dividerSize", "type": "field", "idx": 70019, "Desc": "the size of the divider while the dragging session is valid ."}{"node_name": "nonContinuousLayoutDivider", "type": "field", "idx": 70020, "Desc": "instance for the shadow of the divider when non continuous layout is being used ."}{"node_name": "draggingHW", "type": "field", "idx": 70021, "Desc": "set to true in startdragging if any of the children ( not including the noncontinuouslayoutdivider ) are heavy weights ."}{"node_name": "beginDragDividerLocation", "type": "field", "idx": 70022, "Desc": "location of the divider when the dragging session began ."}{"node_name": "tabPane", "type": "field", "idx": 70102, "Desc": "the tab pane"}{"node_name": "highlight", "type": "field", "idx": 70103, "Desc": "highlight color"}{"node_name": "lightHighlight", "type": "field", "idx": 70104, "Desc": "light highlight color"}{"node_name": "shadow", "type": "field", "idx": 70105, "Desc": "shadow color"}{"node_name": "darkShadow", "type": "field", "idx": 70106, "Desc": "dark shadow color"}{"node_name": "focus", "type": "field", "idx": 70107, "Desc": "focus color"}{"node_name": "textIconGap", "type": "field", "idx": 70108, "Desc": "text icon gap"}{"node_name": "tabRunOverlay", "type": "field", "idx": 70109, "Desc": "tab run overlay"}{"node_name": "tabInsets", "type": "field", "idx": 70110, "Desc": "tab insets"}{"node_name": "selectedTabPadInsets", "type": "field", "idx": 70111, "Desc": "selected tab insets"}{"node_name": "tabAreaInsets", "type": "field", "idx": 70112, "Desc": "tab area insets"}{"node_name": "contentBorderInsets", "type": "field", "idx": 70113, "Desc": "content border insets"}{"node_name": "tabRuns", "type": "field", "idx": 70114, "Desc": "tab runs"}{"node_name": "runCount", "type": "field", "idx": 70115, "Desc": "run count"}{"node_name": "selectedRun", "type": "field", "idx": 70116, "Desc": "selected run"}{"node_name": "rects", "type": "field", "idx": 70117, "Desc": "tab rects"}{"node_name": "maxTabHeight", "type": "field", "idx": 70118, "Desc": "maximum tab height"}{"node_name": "maxTabWidth", "type": "field", "idx": 70119, "Desc": "maximum tab width"}{"node_name": "tabChangeListener", "type": "field", "idx": 70120, "Desc": "tab change listener"}{"node_name": "propertyChangeListener", "type": "field", "idx": 70121, "Desc": "property change listener"}{"node_name": "mouseListener", "type": "field", "idx": 70122, "Desc": "mouse change listener"}{"node_name": "focusListener", "type": "field", "idx": 70123, "Desc": "focus change listener"}{"node_name": "calcRect", "type": "field", "idx": 70124, "Desc": "a rectangle used for general layout calculations in order to avoid constructing many new rectangles on the fly ."}{"node_name": "header", "type": "field", "idx": 70403, "Desc": "the jtableheader that is delegating the painting to this ui ."}{"node_name": "rendererPane", "type": "field", "idx": 70404, "Desc": "the instance of cellrendererpane ."}{"node_name": "mouseInputListener", "type": "field", "idx": 70405, "Desc": "listeners that are attached to the jtable"}{"node_name": "table", "type": "field", "idx": 70435, "Desc": "the instance of jtable ."}{"node_name": "rendererPane", "type": "field", "idx": 70436, "Desc": "the instance of cellrendererpane ."}{"node_name": "keyListener", "type": "field", "idx": 70437, "Desc": "keylistener that are attached to the jtable ."}{"node_name": "focusListener", "type": "field", "idx": 70438, "Desc": "focuslistener that are attached to the jtable ."}{"node_name": "mouseInputListener", "type": "field", "idx": 70439, "Desc": "mouseinputlistener that are attached to the jtable ."}{"node_name": "toolBar", "type": "field", "idx": 70591, "Desc": "the instance of jtoolbar ."}{"node_name": "isDragging", "type": "field", "idx": 70592, "Desc": "true if the jtoolbar is being dragged ."}{"node_name": "origin", "type": "field", "idx": 70593, "Desc": "the origin point ."}{"node_name": "toolBar", "type": "field", "idx": 70609, "Desc": "the instance of jtoolbar ."}{"node_name": "dragWindow", "type": "field", "idx": 70610, "Desc": "the instance of dragwindow ."}{"node_name": "focusedCompIndex", "type": "field", "idx": 70611, "Desc": "the index of the focused component ."}{"node_name": "dockingColor", "type": "field", "idx": 70612, "Desc": "the background color of the docking border ."}{"node_name": "floatingColor", "type": "field", "idx": 70613, "Desc": "the background color of the not docking border ."}{"node_name": "dockingBorderColor", "type": "field", "idx": 70614, "Desc": "the color of the docking border ."}{"node_name": "floatingBorderColor", "type": "field", "idx": 70615, "Desc": "the color of the not docking border ."}{"node_name": "dockingListener", "type": "field", "idx": 70616, "Desc": "the instance of a mouseinputlistener ."}{"node_name": "propertyListener", "type": "field", "idx": 70617, "Desc": "the instance of a propertychangelistener ."}{"node_name": "toolBarContListener", "type": "field", "idx": 70618, "Desc": "the instance of a containerlistener ."}{"node_name": "toolBarFocusListener", "type": "field", "idx": 70619, "Desc": "the instance of a focuslistener ."}{"node_name": "constraintBeforeFloating", "type": "field", "idx": 70620, "Desc": "the layout before floating ."}{"node_name": "timer", "type": "field", "idx": 70717, "Desc": "timer used when inside a scrollpane and the scrollbar is adjusting ."}{"node_name": "scrollBar", "type": "field", "idx": 70718, "Desc": "scrollbar that is being adjusted ."}{"node_name": "collapsedIcon", "type": "field", "idx": 70731, "Desc": "the collapsed icon ."}{"node_name": "expandedIcon", "type": "field", "idx": 70732, "Desc": "the expanded icon ."}{"node_name": "leftChildIndent", "type": "field", "idx": 70733, "Desc": "distance between left margin and where vertical dashes will be drawn ."}{"node_name": "rightChildIndent", "type": "field", "idx": 70734, "Desc": "distance to add to leftchildindent to determine where cell contents will be drawn ."}{"node_name": "totalChildIndent", "type": "field", "idx": 70735, "Desc": "total distance that will be indented . the sum of leftchildindent and rightchildindent ."}{"node_name": "preferredMinSize", "type": "field", "idx": 70736, "Desc": "minimum preferred size ."}{"node_name": "lastSelectedRow", "type": "field", "idx": 70737, "Desc": "index of the row that was last selected ."}{"node_name": "tree", "type": "field", "idx": 70738, "Desc": "component that we're going to be drawing into ."}{"node_name": "currentCellRenderer", "type": "field", "idx": 70739, "Desc": "renderer that is being used to do the actual cell drawing ."}{"node_name": "createdRenderer", "type": "field", "idx": 70740, "Desc": "set to true if the renderer that is currently in the tree was created by this instance ."}{"node_name": "cellEditor", "type": "field", "idx": 70741, "Desc": "editor for the tree ."}{"node_name": "createdCellEditor", "type": "field", "idx": 70742, "Desc": "set to true if editor that is currently in the tree was created by this instance ."}{"node_name": "stopEditingInCompleteEditing", "type": "field", "idx": 70743, "Desc": "set to false when editing and shouldselectcell() returns true meaning the node should be selected before editing , used in completeediting ."}{"node_name": "rendererPane", "type": "field", "idx": 70744, "Desc": "used to paint the treecellrenderer ."}{"node_name": "preferredSize", "type": "field", "idx": 70745, "Desc": "size needed to completely display all the nodes ."}{"node_name": "validCachedPreferredSize", "type": "field", "idx": 70746, "Desc": "is the preferredsize valid ?"}{"node_name": "treeState", "type": "field", "idx": 70747, "Desc": "object responsible for handling sizing and expanded issues ."}{"node_name": "drawingCache", "type": "field", "idx": 70748, "Desc": "used for minimizing the drawing of vertical lines ."}{"node_name": "largeModel", "type": "field", "idx": 70749, "Desc": "true if doing optimizations for a largemodel . subclasses that don't support this may wish to override createlayoutcache to not return a fixedheightlayoutcache instance ."}{"node_name": "nodeDimensions", "type": "field", "idx": 70750, "Desc": "reponsible for telling the treestate the size needed for a node ."}{"node_name": "treeModel", "type": "field", "idx": 70751, "Desc": "used to determine what to display ."}{"node_name": "treeSelectionModel", "type": "field", "idx": 70752, "Desc": "model maintaining the selection ."}{"node_name": "depthOffset", "type": "field", "idx": 70753, "Desc": "how much the depth should be offset to properly calculate x locations . this is based on whether or not the root is visible , and if the root handles are visible ."}{"node_name": "editingComponent", "type": "field", "idx": 70754, "Desc": "when editing , this will be the component that is doing the actual editing ."}{"node_name": "editingPath", "type": "field", "idx": 70755, "Desc": "path that is being edited ."}{"node_name": "editingRow", "type": "field", "idx": 70756, "Desc": "row that is being edited . should only be referenced if editingcomponent is not null ."}{"node_name": "editorHasDifferentSize", "type": "field", "idx": 70757, "Desc": "set to true if the editor has a different size than the renderer ."}{"node_name": "repeatKeyAction", "type": "field", "idx": 71008, "Desc": "key code that is being generated for ."}{"node_name": "isKeyDown", "type": "field", "idx": 71009, "Desc": "set to true while keypressed is active ."}{"node_name": "source", "type": "field", "idx": 71020, "Desc": "source that events are coming from ."}{"node_name": "destination", "type": "field", "idx": 71021, "Desc": "destination that receives all events ."}{"node_name": "direction", "type": "field", "idx": 71052, "Desc": "the direction ."}{"node_name": "direction", "type": "field", "idx": 71057, "Desc": "specifies the direction to adjust the selection by ."}{"node_name": "direction", "type": "field", "idx": 71064, "Desc": "specifies the direction to adjust the selection by ."}{"node_name": "direction", "type": "field", "idx": 71076, "Desc": "determines direction to traverse , 1 means expand , -1 means collapse ."}{"node_name": "borderInsets", "type": "field", "idx": 71423, "Desc": "the border insets ."}{"node_name": "borderInsets", "type": "field", "idx": 71437, "Desc": "the border insets ."}{"node_name": "borderInsets", "type": "field", "idx": 71440, "Desc": "the border insets ."}{"node_name": "borderInsets", "type": "field", "idx": 71447, "Desc": "the border insets ."}{"node_name": "editorBorderInsets", "type": "field", "idx": 71454, "Desc": "the border insets ."}{"node_name": "focusColor", "type": "field", "idx": 71462, "Desc": "the color of the focused button ."}{"node_name": "selectColor", "type": "field", "idx": 71463, "Desc": "the color of the selected button ."}{"node_name": "disabledTextColor", "type": "field", "idx": 71464, "Desc": "the color of the disabled color ."}{"node_name": "comboBox", "type": "field", "idx": 71487, "Desc": "the instance of jcombobox ."}{"node_name": "listBox", "type": "field", "idx": 71488, "Desc": "the instance of jlist ."}{"node_name": "rendererPane", "type": "field", "idx": 71489, "Desc": "the instance of cellrendererpane ."}{"node_name": "comboIcon", "type": "field", "idx": 71490, "Desc": "the icon ."}{"node_name": "iconOnly", "type": "field", "idx": 71491, "Desc": "the icononly value ."}{"node_name": "editorBorderInsets", "type": "field", "idx": 71513, "Desc": "the default editor border insets . editorBorderInsets might not be used ."}{"node_name": "filters", "type": "field", "idx": 71564, "Desc": "an array of file filters ."}{"node_name": "DARK", "type": "field", "idx": 71612, "Desc": "dark is used for the property tree.expandedicon ."}{"node_name": "LIGHT", "type": "field", "idx": 71613, "Desc": "light is used for the property tree.collapsedicon ."}{"node_name": "isLight", "type": "field", "idx": 71648, "Desc": "if true the icon is collapsed . note : this data member should not have been exposed . it's called islight , but now it really means iscollapsed . since we can't change any apis ... that's life ."}{"node_name": "isPalette", "type": "field", "idx": 71661, "Desc": "the value ispalette"}{"node_name": "paletteCloseIcon", "type": "field", "idx": 71662, "Desc": "the palette close icon ."}{"node_name": "paletteTitleHeight", "type": "field", "idx": 71663, "Desc": "the height of the palette title ."}{"node_name": "IS_PALETTE", "type": "field", "idx": 71676, "Desc": "the property jinternalframe.ispalette ."}{"node_name": "metalLabelUI", "type": "field", "idx": 71686, "Desc": "the default metallabelui instance . metalLabelUI might not be used . to change the default instance use a subclass which overrides the createui method , and place that class name in defaults table under the key \" labelui \" ."}{"node_name": "focusColor", "type": "field", "idx": 71792, "Desc": "the color of the focused radio button ."}{"node_name": "selectColor", "type": "field", "idx": 71793, "Desc": "the color of the selected radio button ."}{"node_name": "disabledTextColor", "type": "field", "idx": 71794, "Desc": "the color of a disabled text ."}{"node_name": "increaseButton", "type": "field", "idx": 71812, "Desc": "the increase button ."}{"node_name": "decreaseButton", "type": "field", "idx": 71813, "Desc": "the decrease button ."}{"node_name": "scrollBarWidth", "type": "field", "idx": 71814, "Desc": "the width of the scroll bar ."}{"node_name": "FREE_STANDING_PROP", "type": "field", "idx": 71815, "Desc": "the property jscrollbar.isfreestanding ."}{"node_name": "isFreeStanding", "type": "field", "idx": 71816, "Desc": "the value of the property jscrollbar.isfreestanding ."}{"node_name": "TICK_BUFFER", "type": "field", "idx": 71847, "Desc": "the buffer of a tick ."}{"node_name": "filledSlider", "type": "field", "idx": 71848, "Desc": "the value of the property jslider.isfilled . by default , false if the property is not set , true for ocean theme ."}{"node_name": "thumbColor", "type": "field", "idx": 71849, "Desc": "the color of a thumb"}{"node_name": "highlightColor", "type": "field", "idx": 71850, "Desc": "the color of highlighting ."}{"node_name": "darkShadowColor", "type": "field", "idx": 71851, "Desc": "the color of dark shadow ."}{"node_name": "trackWidth", "type": "field", "idx": 71852, "Desc": "the width of a track ."}{"node_name": "tickLength", "type": "field", "idx": 71853, "Desc": "the length of a tick ."}{"node_name": "horizThumbIcon", "type": "field", "idx": 71854, "Desc": "a default horizontal thumb icon . horizThumbIcon might not be used . to change the icon used by this delegate directly set it using the slider.horizontalthumbicon uimanager property ."}{"node_name": "vertThumbIcon", "type": "field", "idx": 71855, "Desc": "a default vertical thumb icon . vertThumbIcon might not be used . to change the icon used by this delegate directly set it using the slider.verticalthumbicon uimanager property ."}{"node_name": "SLIDER_FILL", "type": "field", "idx": 71856, "Desc": "property for jslider.isfilled ."}{"node_name": "minTabWidth", "type": "field", "idx": 71874, "Desc": "the minimum width of a pane ."}{"node_name": "tabAreaBackground", "type": "field", "idx": 71875, "Desc": "the color of tab's background ."}{"node_name": "selectColor", "type": "field", "idx": 71876, "Desc": "the color of the selected pane ."}{"node_name": "selectHighlight", "type": "field", "idx": 71877, "Desc": "the color of the highlight ."}{"node_name": "focusColor", "type": "field", "idx": 72005, "Desc": "the color of a focused toggle button ."}{"node_name": "selectColor", "type": "field", "idx": 72006, "Desc": "the color of a selected button ."}{"node_name": "disabledTextColor", "type": "field", "idx": 72007, "Desc": "the color of a disabled text ."}{"node_name": "contListener", "type": "field", "idx": 72022, "Desc": "this protected field is implementation specific . do not access directly or override . use the create method instead ."}{"node_name": "rolloverListener", "type": "field", "idx": 72023, "Desc": "this protected field is implementation specific . do not access directly or override . use the create method instead ."}{"node_name": "padSpaceBetweenStrings", "type": "field", "idx": 72042, "Desc": "the space between strings ."}{"node_name": "uis", "type": "field", "idx": 72079, "Desc": "the vector containing the real uis . this is populated in the call to createui , and can be obtained by calling the getuis method . the first element is guaranteed to be the real ui obtained from the default look and feel ."}{"node_name": "uis", "type": "field", "idx": 72110, "Desc": "the vector containing the real uis . this is populated in the call to createui , and can be obtained by calling the getuis method . the first element is guaranteed to be the real ui obtained from the default look and feel ."}{"node_name": "uis", "type": "field", "idx": 72141, "Desc": "the vector containing the real uis . this is populated in the call to createui , and can be obtained by calling the getuis method . the first element is guaranteed to be the real ui obtained from the default look and feel ."}{"node_name": "uis", "type": "field", "idx": 72179, "Desc": "the vector containing the real uis . this is populated in the call to createui , and can be obtained by calling the getuis method . the first element is guaranteed to be the real ui obtained from the default look and feel ."}{"node_name": "uis", "type": "field", "idx": 72210, "Desc": "the vector containing the real uis . this is populated in the call to createui , and can be obtained by calling the getuis method . the first element is guaranteed to be the real ui obtained from the default look and feel ."}{"node_name": "uis", "type": "field", "idx": 72241, "Desc": "the vector containing the real uis . this is populated in the call to createui , and can be obtained by calling the getuis method . the first element is guaranteed to be the real ui obtained from the default look and feel ."}{"node_name": "uis", "type": "field", "idx": 72285, "Desc": "the vector containing the real uis . this is populated in the call to createui , and can be obtained by calling the getuis method . the first element is guaranteed to be the real ui obtained from the default look and feel ."}{"node_name": "uis", "type": "field", "idx": 72316, "Desc": "the vector containing the real uis . this is populated in the call to createui , and can be obtained by calling the getuis method . the first element is guaranteed to be the real ui obtained from the default look and feel ."}{"node_name": "uis", "type": "field", "idx": 72347, "Desc": "the vector containing the real uis . this is populated in the call to createui , and can be obtained by calling the getuis method . the first element is guaranteed to be the real ui obtained from the default look and feel ."}{"node_name": "uis", "type": "field", "idx": 72402, "Desc": "the vector containing the real uis . this is populated in the call to createui , and can be obtained by calling the getuis method . the first element is guaranteed to be the real ui obtained from the default look and feel ."}{"node_name": "uis", "type": "field", "idx": 72433, "Desc": "the vector containing the real uis . this is populated in the call to createui , and can be obtained by calling the getuis method . the first element is guaranteed to be the real ui obtained from the default look and feel ."}{"node_name": "uis", "type": "field", "idx": 72464, "Desc": "the vector containing the real uis . this is populated in the call to createui , and can be obtained by calling the getuis method . the first element is guaranteed to be the real ui obtained from the default look and feel ."}{"node_name": "uis", "type": "field", "idx": 72499, "Desc": "the vector containing the real uis . this is populated in the call to createui , and can be obtained by calling the getuis method . the first element is guaranteed to be the real ui obtained from the default look and feel ."}{"node_name": "uis", "type": "field", "idx": 72530, "Desc": "the vector containing the real uis . this is populated in the call to createui , and can be obtained by calling the getuis method . the first element is guaranteed to be the real ui obtained from the default look and feel ."}{"node_name": "uis", "type": "field", "idx": 72567, "Desc": "the vector containing the real uis . this is populated in the call to createui , and can be obtained by calling the getuis method . the first element is guaranteed to be the real ui obtained from the default look and feel ."}{"node_name": "uis", "type": "field", "idx": 72598, "Desc": "the vector containing the real uis . this is populated in the call to createui , and can be obtained by calling the getuis method . the first element is guaranteed to be the real ui obtained from the default look and feel ."}{"node_name": "uis", "type": "field", "idx": 72629, "Desc": "the vector containing the real uis . this is populated in the call to createui , and can be obtained by calling the getuis method . the first element is guaranteed to be the real ui obtained from the default look and feel ."}{"node_name": "uis", "type": "field", "idx": 72660, "Desc": "the vector containing the real uis . this is populated in the call to createui , and can be obtained by calling the getuis method . the first element is guaranteed to be the real ui obtained from the default look and feel ."}{"node_name": "uis", "type": "field", "idx": 72691, "Desc": "the vector containing the real uis . this is populated in the call to createui , and can be obtained by calling the getuis method . the first element is guaranteed to be the real ui obtained from the default look and feel ."}{"node_name": "uis", "type": "field", "idx": 72722, "Desc": "the vector containing the real uis . this is populated in the call to createui , and can be obtained by calling the getuis method . the first element is guaranteed to be the real ui obtained from the default look and feel ."}{"node_name": "uis", "type": "field", "idx": 72753, "Desc": "the vector containing the real uis . this is populated in the call to createui , and can be obtained by calling the getuis method . the first element is guaranteed to be the real ui obtained from the default look and feel ."}{"node_name": "uis", "type": "field", "idx": 72784, "Desc": "the vector containing the real uis . this is populated in the call to createui , and can be obtained by calling the getuis method . the first element is guaranteed to be the real ui obtained from the default look and feel ."}{"node_name": "uis", "type": "field", "idx": 72829, "Desc": "the vector containing the real uis . this is populated in the call to createui , and can be obtained by calling the getuis method . the first element is guaranteed to be the real ui obtained from the default look and feel ."}{"node_name": "uis", "type": "field", "idx": 72869, "Desc": "the vector containing the real uis . this is populated in the call to createui , and can be obtained by calling the getuis method . the first element is guaranteed to be the real ui obtained from the default look and feel ."}{"node_name": "uis", "type": "field", "idx": 72900, "Desc": "the vector containing the real uis . this is populated in the call to createui , and can be obtained by calling the getuis method . the first element is guaranteed to be the real ui obtained from the default look and feel ."}{"node_name": "uis", "type": "field", "idx": 72931, "Desc": "the vector containing the real uis . this is populated in the call to createui , and can be obtained by calling the getuis method . the first element is guaranteed to be the real ui obtained from the default look and feel ."}{"node_name": "uis", "type": "field", "idx": 72985, "Desc": "the vector containing the real uis . this is populated in the call to createui , and can be obtained by calling the getuis method . the first element is guaranteed to be the real ui obtained from the default look and feel ."}{"node_name": "uis", "type": "field", "idx": 73016, "Desc": "the vector containing the real uis . this is populated in the call to createui , and can be obtained by calling the getuis method . the first element is guaranteed to be the real ui obtained from the default look and feel ."}{"node_name": "uis", "type": "field", "idx": 73047, "Desc": "the vector containing the real uis . this is populated in the call to createui , and can be obtained by calling the getuis method . the first element is guaranteed to be the real ui obtained from the default look and feel ."}{"node_name": "uis", "type": "field", "idx": 73104, "Desc": "the vector containing the real uis . this is populated in the call to createui , and can be obtained by calling the getuis method . the first element is guaranteed to be the real ui obtained from the default look and feel ."}{"node_name": "LARGE_KEY", "type": "field", "idx": 73236, "Desc": "large key"}{"node_name": "SMALL_KEY", "type": "field", "idx": 73237, "Desc": "small key"}{"node_name": "MINI_KEY", "type": "field", "idx": 73238, "Desc": "mini key"}{"node_name": "LARGE_SCALE", "type": "field", "idx": 73239, "Desc": "large scale"}{"node_name": "SMALL_SCALE", "type": "field", "idx": 73240, "Desc": "small scale"}{"node_name": "MINI_SCALE", "type": "field", "idx": 73241, "Desc": "mini scale"}{"node_name": "FOREGROUND", "type": "field", "idx": 73317, "Desc": "colortype for the foreground of a region ."}{"node_name": "BACKGROUND", "type": "field", "idx": 73318, "Desc": "colortype for the background of a region ."}{"node_name": "TEXT_FOREGROUND", "type": "field", "idx": 73319, "Desc": "colortype for the foreground of a region ."}{"node_name": "TEXT_BACKGROUND", "type": "field", "idx": 73320, "Desc": "colortype for the background of a region ."}{"node_name": "FOCUS", "type": "field", "idx": 73321, "Desc": "colortype for the focus ."}{"node_name": "MAX_COUNT", "type": "field", "idx": 73322, "Desc": "maximum number of colortypes ."}{"node_name": "ARROW_BUTTON", "type": "field", "idx": 73328, "Desc": "arrowbutton's are special types of buttons that also render a directional indicator , typically an arrow . arrowbuttons are used by composite components , for example scrollbar's contain arrowbuttons . to bind a style to this region use the name arrowbutton ."}{"node_name": "BUTTON", "type": "field", "idx": 73329, "Desc": "button region . to bind a style to this region use the name button ."}{"node_name": "CHECK_BOX", "type": "field", "idx": 73330, "Desc": "checkbox region . to bind a style to this region use the name checkbox ."}{"node_name": "CHECK_BOX_MENU_ITEM", "type": "field", "idx": 73331, "Desc": "checkboxmenuitem region . to bind a style to this region use the name checkboxmenuitem ."}{"node_name": "COLOR_CHOOSER", "type": "field", "idx": 73332, "Desc": "colorchooser region . to bind a style to this region use the name colorchooser ."}{"node_name": "COMBO_BOX", "type": "field", "idx": 73333, "Desc": "combobox region . to bind a style to this region use the name combobox ."}{"node_name": "DESKTOP_PANE", "type": "field", "idx": 73334, "Desc": "desktoppane region . to bind a style to this region use the name desktoppane ."}{"node_name": "DESKTOP_ICON", "type": "field", "idx": 73335, "Desc": "desktopicon region . to bind a style to this region use the name desktopicon ."}{"node_name": "EDITOR_PANE", "type": "field", "idx": 73336, "Desc": "editorpane region . to bind a style to this region use the name editorpane ."}{"node_name": "FILE_CHOOSER", "type": "field", "idx": 73337, "Desc": "filechooser region . to bind a style to this region use the name filechooser ."}{"node_name": "FORMATTED_TEXT_FIELD", "type": "field", "idx": 73338, "Desc": "formattedtextfield region . to bind a style to this region use the name formattedtextfield ."}{"node_name": "INTERNAL_FRAME", "type": "field", "idx": 73339, "Desc": "internalframe region . to bind a style to this region use the name internalframe ."}{"node_name": "INTERNAL_FRAME_TITLE_PANE", "type": "field", "idx": 73340, "Desc": "titlepane of an internalframe . the titlepane typically shows a menu , title , widgets to manipulate the internal frame . to bind a style to this region use the name internalframetitlepane ."}{"node_name": "LABEL", "type": "field", "idx": 73341, "Desc": "label region . to bind a style to this region use the name label ."}{"node_name": "LIST", "type": "field", "idx": 73342, "Desc": "list region . to bind a style to this region use the name list ."}{"node_name": "MENU", "type": "field", "idx": 73343, "Desc": "menu region . to bind a style to this region use the name menu ."}{"node_name": "MENU_BAR", "type": "field", "idx": 73344, "Desc": "menubar region . to bind a style to this region use the name menubar ."}{"node_name": "MENU_ITEM", "type": "field", "idx": 73345, "Desc": "menuitem region . to bind a style to this region use the name menuitem ."}{"node_name": "MENU_ITEM_ACCELERATOR", "type": "field", "idx": 73346, "Desc": "accelerator region of a menuitem . to bind a style to this region use the name menuitemaccelerator ."}{"node_name": "OPTION_PANE", "type": "field", "idx": 73347, "Desc": "optionpane region . to bind a style to this region use the name optionpane ."}{"node_name": "PANEL", "type": "field", "idx": 73348, "Desc": "panel region . to bind a style to this region use the name panel ."}{"node_name": "PASSWORD_FIELD", "type": "field", "idx": 73349, "Desc": "passwordfield region . to bind a style to this region use the name passwordfield ."}{"node_name": "POPUP_MENU", "type": "field", "idx": 73350, "Desc": "popupmenu region . to bind a style to this region use the name popupmenu ."}{"node_name": "POPUP_MENU_SEPARATOR", "type": "field", "idx": 73351, "Desc": "popupmenuseparator region . to bind a style to this region use the name popupmenuseparator ."}{"node_name": "PROGRESS_BAR", "type": "field", "idx": 73352, "Desc": "progressbar region . to bind a style to this region use the name progressbar ."}{"node_name": "RADIO_BUTTON", "type": "field", "idx": 73353, "Desc": "radiobutton region . to bind a style to this region use the name radiobutton ."}{"node_name": "RADIO_BUTTON_MENU_ITEM", "type": "field", "idx": 73354, "Desc": "regionbuttonmenuitem region . to bind a style to this region use the name radiobuttonmenuitem ."}{"node_name": "ROOT_PANE", "type": "field", "idx": 73355, "Desc": "rootpane region . to bind a style to this region use the name rootpane ."}{"node_name": "SCROLL_BAR", "type": "field", "idx": 73356, "Desc": "scrollbar region . to bind a style to this region use the name scrollbar ."}{"node_name": "SCROLL_BAR_TRACK", "type": "field", "idx": 73357, "Desc": "track of the scrollbar . to bind a style to this region use the name scrollbartrack ."}{"node_name": "SCROLL_BAR_THUMB", "type": "field", "idx": 73358, "Desc": "thumb of the scrollbar . the thumb is the region of the scrollbar that gives a graphical depiction of what percentage of the view is currently visible . to bind a style to this region use the name scrollbarthumb ."}{"node_name": "SCROLL_PANE", "type": "field", "idx": 73359, "Desc": "scrollpane region . to bind a style to this region use the name scrollpane ."}{"node_name": "SEPARATOR", "type": "field", "idx": 73360, "Desc": "separator region . to bind a style to this region use the name separator ."}{"node_name": "SLIDER", "type": "field", "idx": 73361, "Desc": "slider region . to bind a style to this region use the name slider ."}{"node_name": "SLIDER_TRACK", "type": "field", "idx": 73362, "Desc": "track of the slider . to bind a style to this region use the name slidertrack ."}{"node_name": "SLIDER_THUMB", "type": "field", "idx": 73363, "Desc": "thumb of the slider . the thumb of the slider identifies the current value . to bind a style to this region use the name sliderthumb ."}{"node_name": "SPINNER", "type": "field", "idx": 73364, "Desc": "spinner region . to bind a style to this region use the name spinner ."}{"node_name": "SPLIT_PANE", "type": "field", "idx": 73365, "Desc": "splitpane region . to bind a style to this region use the name splitpane ."}{"node_name": "SPLIT_PANE_DIVIDER", "type": "field", "idx": 73366, "Desc": "divider of the splitpane . to bind a style to this region use the name splitpanedivider ."}{"node_name": "TABBED_PANE", "type": "field", "idx": 73367, "Desc": "tabbedpane region . to bind a style to this region use the name tabbedpane ."}{"node_name": "TABBED_PANE_TAB", "type": "field", "idx": 73368, "Desc": "region of a tabbedpane for one tab . to bind a style to this region use the name tabbedpanetab ."}{"node_name": "TABBED_PANE_TAB_AREA", "type": "field", "idx": 73369, "Desc": "region of a tabbedpane containing the tabs . to bind a style to this region use the name tabbedpanetabarea ."}{"node_name": "TABBED_PANE_CONTENT", "type": "field", "idx": 73370, "Desc": "region of a tabbedpane containing the content . to bind a style to this region use the name tabbedpanecontent ."}{"node_name": "TABLE", "type": "field", "idx": 73371, "Desc": "table region . to bind a style to this region use the name table ."}{"node_name": "TABLE_HEADER", "type": "field", "idx": 73372, "Desc": "tableheader region . to bind a style to this region use the name tableheader ."}{"node_name": "TEXT_AREA", "type": "field", "idx": 73373, "Desc": "textarea region . to bind a style to this region use the name textarea ."}{"node_name": "TEXT_FIELD", "type": "field", "idx": 73374, "Desc": "textfield region . to bind a style to this region use the name textfield ."}{"node_name": "TEXT_PANE", "type": "field", "idx": 73375, "Desc": "textpane region . to bind a style to this region use the name textpane ."}{"node_name": "TOGGLE_BUTTON", "type": "field", "idx": 73376, "Desc": "togglebutton region . to bind a style to this region use the name togglebutton ."}{"node_name": "TOOL_BAR", "type": "field", "idx": 73377, "Desc": "toolbar region . to bind a style to this region use the name toolbar ."}{"node_name": "TOOL_BAR_CONTENT", "type": "field", "idx": 73378, "Desc": "region of the toolbar containing the content . to bind a style to this region use the name toolbarcontent ."}{"node_name": "TOOL_BAR_DRAG_WINDOW", "type": "field", "idx": 73379, "Desc": "region for the window containing the toolbar . to bind a style to this region use the name toolbardragwindow ."}{"node_name": "TOOL_TIP", "type": "field", "idx": 73380, "Desc": "tooltip region . to bind a style to this region use the name tooltip ."}{"node_name": "TOOL_BAR_SEPARATOR", "type": "field", "idx": 73381, "Desc": "toolbar separator region . to bind a style to this region use the name toolbarseparator ."}{"node_name": "TREE", "type": "field", "idx": 73382, "Desc": "tree region . to bind a style to this region use the name tree ."}{"node_name": "TREE_CELL", "type": "field", "idx": 73383, "Desc": "region of the tree for one cell . to bind a style to this region use the name treecell ."}{"node_name": "VIEWPORT", "type": "field", "idx": 73384, "Desc": "viewport region . to bind a style to this region use the name viewport ."}{"node_name": "ENABLED", "type": "field", "idx": 73453, "Desc": "primary state indicating the component is enabled ."}{"node_name": "MOUSE_OVER", "type": "field", "idx": 73454, "Desc": "primary state indicating the mouse is over the region ."}{"node_name": "PRESSED", "type": "field", "idx": 73455, "Desc": "primary state indicating the region is in a pressed state . pressed does not necessarily mean the user has pressed the mouse button ."}{"node_name": "DISABLED", "type": "field", "idx": 73456, "Desc": "primary state indicating the region is not enabled ."}{"node_name": "FOCUSED", "type": "field", "idx": 73457, "Desc": "indicates the region has focus ."}{"node_name": "SELECTED", "type": "field", "idx": 73458, "Desc": "indicates the region is selected ."}{"node_name": "DEFAULT", "type": "field", "idx": 73459, "Desc": "indicates the region is the default . this is typically used for buttons to indicate this button is somehow special ."}{"node_name": "accessibleContext", "type": "field", "idx": 75309, "Desc": "the accessiblecontext for the progressmonitor"}{"node_name": "VIEWPORT", "type": "field", "idx": 75510, "Desc": "identifies a \" viewport \" or display area , within which scrolled contents are visible ."}{"node_name": "VERTICAL_SCROLLBAR", "type": "field", "idx": 75511, "Desc": "identifies a vertical scrollbar ."}{"node_name": "HORIZONTAL_SCROLLBAR", "type": "field", "idx": 75512, "Desc": "identifies a horizontal scrollbar ."}{"node_name": "ROW_HEADER", "type": "field", "idx": 75513, "Desc": "identifies the area along the left side of the viewport between the upper left corner and the lower left corner ."}{"node_name": "COLUMN_HEADER", "type": "field", "idx": 75514, "Desc": "identifies the area at the top the viewport between the upper left corner and the upper right corner ."}{"node_name": "LOWER_LEFT_CORNER", "type": "field", "idx": 75515, "Desc": "identifies the lower left corner of the viewport ."}{"node_name": "LOWER_RIGHT_CORNER", "type": "field", "idx": 75516, "Desc": "identifies the lower right corner of the viewport ."}{"node_name": "UPPER_LEFT_CORNER", "type": "field", "idx": 75517, "Desc": "identifies the upper left corner of the viewport ."}{"node_name": "UPPER_RIGHT_CORNER", "type": "field", "idx": 75518, "Desc": "identifies the upper right corner of the viewport ."}{"node_name": "LOWER_LEADING_CORNER", "type": "field", "idx": 75519, "Desc": "identifies the lower leading edge corner of the viewport . the leading edge is determined relative to the scroll pane's componentorientation property ."}{"node_name": "LOWER_TRAILING_CORNER", "type": "field", "idx": 75520, "Desc": "identifies the lower trailing edge corner of the viewport . the trailing edge is determined relative to the scroll pane's componentorientation property ."}{"node_name": "UPPER_LEADING_CORNER", "type": "field", "idx": 75521, "Desc": "identifies the upper leading edge corner of the viewport . the leading edge is determined relative to the scroll pane's componentorientation property ."}{"node_name": "UPPER_TRAILING_CORNER", "type": "field", "idx": 75522, "Desc": "identifies the upper trailing edge corner of the viewport . the trailing edge is determined relative to the scroll pane's componentorientation property ."}{"node_name": "VERTICAL_SCROLLBAR_POLICY", "type": "field", "idx": 75523, "Desc": "identifies the vertical scroll bar policy property ."}{"node_name": "HORIZONTAL_SCROLLBAR_POLICY", "type": "field", "idx": 75524, "Desc": "identifies the horizontal scroll bar policy property ."}{"node_name": "VERTICAL_SCROLLBAR_AS_NEEDED", "type": "field", "idx": 75525, "Desc": "used to set the vertical scroll bar policy so that vertical scrollbars are displayed only when needed ."}{"node_name": "VERTICAL_SCROLLBAR_NEVER", "type": "field", "idx": 75526, "Desc": "used to set the vertical scroll bar policy so that vertical scrollbars are never displayed ."}{"node_name": "VERTICAL_SCROLLBAR_ALWAYS", "type": "field", "idx": 75527, "Desc": "used to set the vertical scroll bar policy so that vertical scrollbars are always displayed ."}{"node_name": "HORIZONTAL_SCROLLBAR_AS_NEEDED", "type": "field", "idx": 75528, "Desc": "used to set the horizontal scroll bar policy so that horizontal scrollbars are displayed only when needed ."}{"node_name": "HORIZONTAL_SCROLLBAR_NEVER", "type": "field", "idx": 75529, "Desc": "used to set the horizontal scroll bar policy so that horizontal scrollbars are never displayed ."}{"node_name": "HORIZONTAL_SCROLLBAR_ALWAYS", "type": "field", "idx": 75530, "Desc": "used to set the horizontal scroll bar policy so that horizontal scrollbars are always displayed ."}{"node_name": "viewport", "type": "field", "idx": 75532, "Desc": "the scrollpane's viewport child . default is an empty jviewport ."}{"node_name": "vsb", "type": "field", "idx": 75533, "Desc": "the scrollpane's vertical scrollbar child . default is a jscrollbar ."}{"node_name": "hsb", "type": "field", "idx": 75534, "Desc": "the scrollpane's horizontal scrollbar child . default is a jscrollbar ."}{"node_name": "rowHead", "type": "field", "idx": 75535, "Desc": "the row header child . default is null ."}{"node_name": "colHead", "type": "field", "idx": 75536, "Desc": "the column header child . default is null ."}{"node_name": "lowerLeft", "type": "field", "idx": 75537, "Desc": "the component to display in the lower left corner . default is null ."}{"node_name": "lowerRight", "type": "field", "idx": 75538, "Desc": "the component to display in the lower right corner . default is null ."}{"node_name": "upperLeft", "type": "field", "idx": 75539, "Desc": "the component to display in the upper left corner . default is null ."}{"node_name": "upperRight", "type": "field", "idx": 75540, "Desc": "the component to display in the upper right corner . default is null ."}{"node_name": "vsbPolicy", "type": "field", "idx": 75541, "Desc": "the display policy for the vertical scrollbar . the default is scrollpaneconstants.vertical_scrollbar_as_needed . vsbPolicy is obsolete , please use the jscrollpane field instead ."}{"node_name": "hsbPolicy", "type": "field", "idx": 75542, "Desc": "the display policy for the horizontal scrollbar . the default is scrollpaneconstants.horizontal_scrollbar_as_needed . hsbPolicy is obsolete , please use the jscrollpane field instead ."}{"node_name": "minimum", "type": "field", "idx": 75586, "Desc": "the minimum size required . for a component comp , this should be equal to either comp.getminimumsize() .width or comp.getminimumsize() .height ."}{"node_name": "preferred", "type": "field", "idx": 75587, "Desc": "the preferred ( natural ) size . for a component comp , this should be equal to either comp.getpreferredsize() .width or comp.getpreferredsize() .height ."}{"node_name": "maximum", "type": "field", "idx": 75588, "Desc": "the maximum size allowed . for a component comp , this should be equal to either comp.getmaximumsize() .width or comp.getmaximumsize() .height ."}{"node_name": "alignment", "type": "field", "idx": 75589, "Desc": "the alignment , specified as a value between 0.0 and 1.0 , inclusive . to specify centering , the alignment should be 0.5 ."}{"node_name": "UNSET", "type": "field", "idx": 75765, "Desc": "an integer value signifying that a property value has not yet been calculated ."}{"node_name": "NORTH", "type": "field", "idx": 75824, "Desc": "specifies the top edge of a component's bounding rectangle ."}{"node_name": "SOUTH", "type": "field", "idx": 75825, "Desc": "specifies the bottom edge of a component's bounding rectangle ."}{"node_name": "EAST", "type": "field", "idx": 75826, "Desc": "specifies the right edge of a component's bounding rectangle ."}{"node_name": "WEST", "type": "field", "idx": 75827, "Desc": "specifies the left edge of a component's bounding rectangle ."}{"node_name": "HORIZONTAL_CENTER", "type": "field", "idx": 75828, "Desc": "specifies the horizontal center of a component's bounding rectangle ."}{"node_name": "VERTICAL_CENTER", "type": "field", "idx": 75829, "Desc": "specifies the vertical center of a component's bounding rectangle ."}{"node_name": "BASELINE", "type": "field", "idx": 75830, "Desc": "specifies the baseline of a component ."}{"node_name": "WIDTH", "type": "field", "idx": 75831, "Desc": "specifies the width of a component's bounding rectangle ."}{"node_name": "HEIGHT", "type": "field", "idx": 75832, "Desc": "specifies the height of a component's bounding rectangle ."}{"node_name": "CENTER", "type": "field", "idx": 75864, "Desc": "the central position in an area . used for both compass-direction constants ( north , etc . ) and box-orientation constants ( top , etc . ) ."}{"node_name": "TOP", "type": "field", "idx": 75865, "Desc": "box-orientation constant used to specify the top of a box ."}{"node_name": "LEFT", "type": "field", "idx": 75866, "Desc": "box-orientation constant used to specify the left side of a box ."}{"node_name": "BOTTOM", "type": "field", "idx": 75867, "Desc": "box-orientation constant used to specify the bottom of a box ."}{"node_name": "RIGHT", "type": "field", "idx": 75868, "Desc": "box-orientation constant used to specify the right side of a box ."}{"node_name": "NORTH", "type": "field", "idx": 75869, "Desc": "compass-direction north ( up ) ."}{"node_name": "NORTH_EAST", "type": "field", "idx": 75870, "Desc": "compass-direction north-east ( upper right ) ."}{"node_name": "EAST", "type": "field", "idx": 75871, "Desc": "compass-direction east ( right ) ."}{"node_name": "SOUTH_EAST", "type": "field", "idx": 75872, "Desc": "compass-direction south-east ( lower right ) ."}{"node_name": "SOUTH", "type": "field", "idx": 75873, "Desc": "compass-direction south ( down ) ."}{"node_name": "SOUTH_WEST", "type": "field", "idx": 75874, "Desc": "compass-direction south-west ( lower left ) ."}{"node_name": "WEST", "type": "field", "idx": 75875, "Desc": "compass-direction west ( left ) ."}{"node_name": "NORTH_WEST", "type": "field", "idx": 75876, "Desc": "compass-direction north west ( upper left ) ."}{"node_name": "HORIZONTAL", "type": "field", "idx": 75877, "Desc": "horizontal orientation . used for scrollbars and sliders ."}{"node_name": "VERTICAL", "type": "field", "idx": 75878, "Desc": "vertical orientation . used for scrollbars and sliders ."}{"node_name": "LEADING", "type": "field", "idx": 75879, "Desc": "identifies the leading edge of text for use with left-to-right and right-to-left languages . used by buttons and labels ."}{"node_name": "TRAILING", "type": "field", "idx": 75880, "Desc": "identifies the trailing edge of text for use with left-to-right and right-to-left languages . used by buttons and labels ."}{"node_name": "NEXT", "type": "field", "idx": 75881, "Desc": "identifies the next direction in a sequence ."}{"node_name": "PREVIOUS", "type": "field", "idx": 75882, "Desc": "identifies the previous direction in a sequence ."}{"node_name": "listenerList", "type": "field", "idx": 76074, "Desc": "list of listeners"}{"node_name": "noFocusBorder", "type": "field", "idx": 76113, "Desc": "a border without focus ."}{"node_name": "tableColumns", "type": "field", "idx": 76153, "Desc": "array of tablecolumn objects in this model"}{"node_name": "selectionModel", "type": "field", "idx": 76154, "Desc": "model for keeping track of column selections"}{"node_name": "columnMargin", "type": "field", "idx": 76155, "Desc": "width margin between each column"}{"node_name": "listenerList", "type": "field", "idx": 76156, "Desc": "list of tablecolumnmodellistener"}{"node_name": "changeEvent", "type": "field", "idx": 76157, "Desc": "change event ( only one needed )"}{"node_name": "columnSelectionAllowed", "type": "field", "idx": 76158, "Desc": "column selection allowed in this column model"}{"node_name": "totalColumnWidth", "type": "field", "idx": 76159, "Desc": "a local cache of the combined width of all columns"}{"node_name": "dataVector", "type": "field", "idx": 76211, "Desc": "the vector of vectors of object values ."}{"node_name": "columnIdentifiers", "type": "field", "idx": 76212, "Desc": "the vector of column identifiers ."}{"node_name": "table", "type": "field", "idx": 76310, "Desc": "the table for which this object is the header ; the default is null ."}{"node_name": "columnModel", "type": "field", "idx": 76311, "Desc": "the tablecolumnmodel of the table header ."}{"node_name": "reorderingAllowed", "type": "field", "idx": 76312, "Desc": "if true , reordering of columns are allowed by the user ; the default is true ."}{"node_name": "resizingAllowed", "type": "field", "idx": 76313, "Desc": "if true , resizing of columns are allowed by the user ; the default is true ."}{"node_name": "updateTableInRealTime", "type": "field", "idx": 76314, "Desc": "obsolete as of java 2 platform v1.3 . real time repaints , in response to column dragging or resizing , are now unconditional ."}{"node_name": "resizingColumn", "type": "field", "idx": 76315, "Desc": "the index of the column being resized . null if not resizing ."}{"node_name": "draggedColumn", "type": "field", "idx": 76316, "Desc": "the index of the column being dragged . null if not dragging ."}{"node_name": "draggedDistance", "type": "field", "idx": 76317, "Desc": "the distance from its original position the column has been dragged ."}{"node_name": "COLUMN_WIDTH_PROPERTY", "type": "field", "idx": 76392, "Desc": "obsolete as of java 2 platform v1.3 . please use string literals to identify properties ."}{"node_name": "HEADER_VALUE_PROPERTY", "type": "field", "idx": 76393, "Desc": "obsolete as of java 2 platform v1.3 . please use string literals to identify properties ."}{"node_name": "HEADER_RENDERER_PROPERTY", "type": "field", "idx": 76394, "Desc": "obsolete as of java 2 platform v1.3 . please use string literals to identify properties ."}{"node_name": "CELL_RENDERER_PROPERTY", "type": "field", "idx": 76395, "Desc": "obsolete as of java 2 platform v1.3 . please use string literals to identify properties ."}{"node_name": "modelIndex", "type": "field", "idx": 76396, "Desc": "the index of the column in the model which is to be displayed by this tablecolumn . as columns are moved around in the view modelindex remains constant ."}{"node_name": "identifier", "type": "field", "idx": 76397, "Desc": "this object is not used internally by the drawing machinery of the jtable ; identifiers may be set in the tablecolumn as an optional way to tag and locate table columns . the table package does not modify or invoke any methods in these identifier objects other than the equals method which is used in the getcolumnindex() method in the defaulttablecolumnmodel ."}{"node_name": "width", "type": "field", "idx": 76398, "Desc": "the width of the column ."}{"node_name": "minWidth", "type": "field", "idx": 76399, "Desc": "the minimum width of the column ."}{"node_name": "maxWidth", "type": "field", "idx": 76400, "Desc": "the maximum width of the column ."}{"node_name": "headerRenderer", "type": "field", "idx": 76401, "Desc": "the renderer used to draw the header of the column ."}{"node_name": "headerValue", "type": "field", "idx": 76402, "Desc": "the header value of the column ."}{"node_name": "cellRenderer", "type": "field", "idx": 76403, "Desc": "the renderer used to draw the data cells of the column ."}{"node_name": "cellEditor", "type": "field", "idx": 76404, "Desc": "the editor used to edit the data cells of the column ."}{"node_name": "isResizable", "type": "field", "idx": 76405, "Desc": "if true , the user is allowed to resize the column ; the default is true ."}{"node_name": "listenerList", "type": "field", "idx": 76676, "Desc": "the event listener list for the document ."}{"node_name": "BAD_LOCATION", "type": "field", "idx": 76677, "Desc": "error message to indicate a bad location ."}{"node_name": "ParagraphElementName", "type": "field", "idx": 76678, "Desc": "name of elements used to represent paragraphs"}{"node_name": "ContentElementName", "type": "field", "idx": 76679, "Desc": "name of elements used to represent content"}{"node_name": "SectionElementName", "type": "field", "idx": 76680, "Desc": "name of elements used to hold sections ( lines / paragraphs ) ."}{"node_name": "BidiElementName", "type": "field", "idx": 76681, "Desc": "name of elements used to hold a unidirectional run"}{"node_name": "ElementNameAttribute", "type": "field", "idx": 76682, "Desc": "name of the attribute used to specify element names ."}{"node_name": "NEWLINE", "type": "field", "idx": 76796, "Desc": "how the text packages models newlines ."}{"node_name": "lastValidOffset", "type": "field", "idx": 76861, "Desc": "the location of the last offset calculation that is valid ."}{"node_name": "lastAlloc", "type": "field", "idx": 76862, "Desc": "the last seen allocation ( for repainting when changes are flushed upward ) ."}{"node_name": "childAlloc", "type": "field", "idx": 76863, "Desc": "a shape to use for the child allocation to avoid creating a lot of garbage ."}{"node_name": "locator", "type": "field", "idx": 76898, "Desc": "object that manages the offsets of the children . all locking for management of child locations is on this object ."}{"node_name": "NameAttribute", "type": "field", "idx": 76991, "Desc": "attribute name used to name the collection of attributes ."}{"node_name": "ResolveAttribute", "type": "field", "idx": 76992, "Desc": "attribute name used to identify the resolving parent set of attributes , if one is defined ."}{"node_name": "BACKGROUND", "type": "field", "idx": 77309, "Desc": "css attribute \" background \" ."}{"node_name": "BACKGROUND_ATTACHMENT", "type": "field", "idx": 77310, "Desc": "css attribute \" background-attachment \" ."}{"node_name": "BACKGROUND_COLOR", "type": "field", "idx": 77311, "Desc": "css attribute \" background-color \" ."}{"node_name": "BACKGROUND_IMAGE", "type": "field", "idx": 77312, "Desc": "css attribute \" background-image \" ."}{"node_name": "BACKGROUND_POSITION", "type": "field", "idx": 77313, "Desc": "css attribute \" background-position \" ."}{"node_name": "BACKGROUND_REPEAT", "type": "field", "idx": 77314, "Desc": "css attribute \" background-repeat \" ."}{"node_name": "BORDER", "type": "field", "idx": 77315, "Desc": "css attribute \" border \" ."}{"node_name": "BORDER_BOTTOM", "type": "field", "idx": 77316, "Desc": "css attribute \" border-bottom \" ."}{"node_name": "BORDER_BOTTOM_COLOR", "type": "field", "idx": 77317, "Desc": "css attribute \" border-bottom-color \" ."}{"node_name": "BORDER_BOTTOM_STYLE", "type": "field", "idx": 77318, "Desc": "css attribute \" border-bottom-style \" ."}{"node_name": "BORDER_BOTTOM_WIDTH", "type": "field", "idx": 77319, "Desc": "css attribute \" border-bottom-width \" ."}{"node_name": "BORDER_COLOR", "type": "field", "idx": 77320, "Desc": "css attribute \" border-color \" ."}{"node_name": "BORDER_LEFT", "type": "field", "idx": 77321, "Desc": "css attribute \" border-left \" ."}{"node_name": "BORDER_LEFT_COLOR", "type": "field", "idx": 77322, "Desc": "css attribute \" margin-right \" ."}{"node_name": "BORDER_LEFT_STYLE", "type": "field", "idx": 77323, "Desc": "css attribute \" border-left-style \" ."}{"node_name": "BORDER_LEFT_WIDTH", "type": "field", "idx": 77324, "Desc": "css attribute \" border-left-width \" ."}{"node_name": "BORDER_RIGHT", "type": "field", "idx": 77325, "Desc": "css attribute \" border-right \" ."}{"node_name": "BORDER_RIGHT_COLOR", "type": "field", "idx": 77326, "Desc": "css attribute \" border-right-color \" ."}{"node_name": "BORDER_RIGHT_STYLE", "type": "field", "idx": 77327, "Desc": "css attribute \" border-right-style \" ."}{"node_name": "BORDER_RIGHT_WIDTH", "type": "field", "idx": 77328, "Desc": "css attribute \" border-right-width \" ."}{"node_name": "BORDER_STYLE", "type": "field", "idx": 77329, "Desc": "css attribute \" border-style \" ."}{"node_name": "BORDER_TOP", "type": "field", "idx": 77330, "Desc": "css attribute \" border-top \" ."}{"node_name": "BORDER_TOP_COLOR", "type": "field", "idx": 77331, "Desc": "css attribute \" border-top-color \" ."}{"node_name": "BORDER_TOP_STYLE", "type": "field", "idx": 77332, "Desc": "css attribute \" border-top-style \" ."}{"node_name": "BORDER_TOP_WIDTH", "type": "field", "idx": 77333, "Desc": "css attribute \" border-top-width \" ."}{"node_name": "BORDER_WIDTH", "type": "field", "idx": 77334, "Desc": "css attribute \" border-width \" ."}{"node_name": "CLEAR", "type": "field", "idx": 77335, "Desc": "css attribute \" clear \" ."}{"node_name": "COLOR", "type": "field", "idx": 77336, "Desc": "css attribute \" color \" ."}{"node_name": "DISPLAY", "type": "field", "idx": 77337, "Desc": "css attribute \" display \" ."}{"node_name": "FLOAT", "type": "field", "idx": 77338, "Desc": "css attribute \" float \" ."}{"node_name": "FONT", "type": "field", "idx": 77339, "Desc": "css attribute \" font \" ."}{"node_name": "FONT_FAMILY", "type": "field", "idx": 77340, "Desc": "css attribute \" font-family \" ."}{"node_name": "FONT_SIZE", "type": "field", "idx": 77341, "Desc": "css attribute \" font-size \" ."}{"node_name": "FONT_STYLE", "type": "field", "idx": 77342, "Desc": "css attribute \" font-style \" ."}{"node_name": "FONT_VARIANT", "type": "field", "idx": 77343, "Desc": "css attribute \" font-variant \" ."}{"node_name": "FONT_WEIGHT", "type": "field", "idx": 77344, "Desc": "css attribute \" font-weight \" ."}{"node_name": "HEIGHT", "type": "field", "idx": 77345, "Desc": "css attribute \" height \" ."}{"node_name": "LETTER_SPACING", "type": "field", "idx": 77346, "Desc": "css attribute \" letter-spacing \" ."}{"node_name": "LINE_HEIGHT", "type": "field", "idx": 77347, "Desc": "css attribute \" line-height \" ."}{"node_name": "LIST_STYLE", "type": "field", "idx": 77348, "Desc": "css attribute \" list-style \" ."}{"node_name": "LIST_STYLE_IMAGE", "type": "field", "idx": 77349, "Desc": "css attribute \" list-style-image \" ."}{"node_name": "LIST_STYLE_POSITION", "type": "field", "idx": 77350, "Desc": "css attribute \" list-style-position \" ."}{"node_name": "LIST_STYLE_TYPE", "type": "field", "idx": 77351, "Desc": "css attribute \" list-style-type \" ."}{"node_name": "MARGIN", "type": "field", "idx": 77352, "Desc": "css attribute \" margin \" ."}{"node_name": "MARGIN_BOTTOM", "type": "field", "idx": 77353, "Desc": "css attribute \" margin-bottom \" ."}{"node_name": "MARGIN_LEFT", "type": "field", "idx": 77354, "Desc": "css attribute \" margin-left \" ."}{"node_name": "MARGIN_RIGHT", "type": "field", "idx": 77355, "Desc": "css attribute \" margin-right \" ."}{"node_name": "MARGIN_TOP", "type": "field", "idx": 77356, "Desc": "css attribute \" margin-top \" ."}{"node_name": "PADDING", "type": "field", "idx": 77357, "Desc": "css attribute \" padding \" ."}{"node_name": "PADDING_BOTTOM", "type": "field", "idx": 77358, "Desc": "css attribute \" padding-bottom \" ."}{"node_name": "PADDING_LEFT", "type": "field", "idx": 77359, "Desc": "css attribute \" padding-left \" ."}{"node_name": "PADDING_RIGHT", "type": "field", "idx": 77360, "Desc": "css attribute \" padding-right \" ."}{"node_name": "PADDING_TOP", "type": "field", "idx": 77361, "Desc": "css attribute \" padding-top \" ."}{"node_name": "TEXT_ALIGN", "type": "field", "idx": 77362, "Desc": "css attribute \" text-align \" ."}{"node_name": "TEXT_DECORATION", "type": "field", "idx": 77363, "Desc": "css attribute \" text-decoration \" ."}{"node_name": "TEXT_INDENT", "type": "field", "idx": 77364, "Desc": "css attribute \" text-indent \" ."}{"node_name": "TEXT_TRANSFORM", "type": "field", "idx": 77365, "Desc": "css attribute \" text-transform \" ."}{"node_name": "VERTICAL_ALIGN", "type": "field", "idx": 77366, "Desc": "css attribute \" vertical-align \" ."}{"node_name": "WORD_SPACING", "type": "field", "idx": 77367, "Desc": "css attribute \" word-spacing \" ."}{"node_name": "WHITE_SPACE", "type": "field", "idx": 77368, "Desc": "css attribute \" white-space \" ."}{"node_name": "WIDTH", "type": "field", "idx": 77369, "Desc": "css attribute \" width \" ."}{"node_name": "UPDATE_WHEN_ON_EDT", "type": "field", "idx": 77385, "Desc": "indicates that the caret position is to be updated only when document changes are performed on the event dispatching thread ."}{"node_name": "NEVER_UPDATE", "type": "field", "idx": 77386, "Desc": "indicates that the caret should remain at the same absolute position in the document regardless of any document updates , except when the document length becomes less than the current caret position due to removal . in that case the caret position is adjusted to the end of the document ."}{"node_name": "ALWAYS_UPDATE", "type": "field", "idx": 77387, "Desc": "indicates that the caret position is to be always updated accordingly to the document changes regardless whether the document updates are performed on the event dispatching thread or not ."}{"node_name": "listenerList", "type": "field", "idx": 77388, "Desc": "the event listener list ."}{"node_name": "changeEvent", "type": "field", "idx": 77389, "Desc": "the change event for the model . only one changeevent is needed per model instance since the event's only ( read-only ) state is the source property . the source of events generated here is always \" this \" ."}{"node_name": "EndOfLineStringProperty", "type": "field", "idx": 77495, "Desc": "when reading a document if a crlf is encountered a property with this name is added and the value will be \" \\r\\n \" ."}{"node_name": "insertContentAction", "type": "field", "idx": 77496, "Desc": "name of the action to place content into the associated document . if there is a selection , it is removed before the new content is added ."}{"node_name": "insertBreakAction", "type": "field", "idx": 77497, "Desc": "name of the action to place a line / paragraph break into the document . if there is a selection , it is removed before the break is added ."}{"node_name": "insertTabAction", "type": "field", "idx": 77498, "Desc": "name of the action to place a tab character into the document . if there is a selection , it is removed before the tab is added ."}{"node_name": "deletePrevCharAction", "type": "field", "idx": 77499, "Desc": "name of the action to delete the character of content that precedes the current caret position ."}{"node_name": "deleteNextCharAction", "type": "field", "idx": 77500, "Desc": "name of the action to delete the character of content that follows the current caret position ."}{"node_name": "deleteNextWordAction", "type": "field", "idx": 77501, "Desc": "name of the action to delete the word that follows the beginning of the selection ."}{"node_name": "deletePrevWordAction", "type": "field", "idx": 77502, "Desc": "name of the action to delete the word that precedes the beginning of the selection ."}{"node_name": "readOnlyAction", "type": "field", "idx": 77503, "Desc": "name of the action to set the editor into read-only mode ."}{"node_name": "writableAction", "type": "field", "idx": 77504, "Desc": "name of the action to set the editor into writeable mode ."}{"node_name": "cutAction", "type": "field", "idx": 77505, "Desc": "name of the action to cut the selected region and place the contents into the system clipboard ."}{"node_name": "copyAction", "type": "field", "idx": 77506, "Desc": "name of the action to copy the selected region and place the contents into the system clipboard ."}{"node_name": "pasteAction", "type": "field", "idx": 77507, "Desc": "name of the action to paste the contents of the system clipboard into the selected region , or before the caret if nothing is selected ."}{"node_name": "beepAction", "type": "field", "idx": 77508, "Desc": "name of the action to create a beep ."}{"node_name": "pageUpAction", "type": "field", "idx": 77509, "Desc": "name of the action to page up vertically ."}{"node_name": "pageDownAction", "type": "field", "idx": 77510, "Desc": "name of the action to page down vertically ."}{"node_name": "forwardAction", "type": "field", "idx": 77511, "Desc": "name of the action for moving the caret logically forward one position ."}{"node_name": "backwardAction", "type": "field", "idx": 77512, "Desc": "name of the action for moving the caret logically backward one position ."}{"node_name": "selectionForwardAction", "type": "field", "idx": 77513, "Desc": "name of the action for extending the selection by moving the caret logically forward one position ."}{"node_name": "selectionBackwardAction", "type": "field", "idx": 77514, "Desc": "name of the action for extending the selection by moving the caret logically backward one position ."}{"node_name": "upAction", "type": "field", "idx": 77515, "Desc": "name of the action for moving the caret logically upward one position ."}{"node_name": "downAction", "type": "field", "idx": 77516, "Desc": "name of the action for moving the caret logically downward one position ."}{"node_name": "selectionUpAction", "type": "field", "idx": 77517, "Desc": "name of the action for moving the caret logically upward one position , extending the selection ."}{"node_name": "selectionDownAction", "type": "field", "idx": 77518, "Desc": "name of the action for moving the caret logically downward one position , extending the selection ."}{"node_name": "beginWordAction", "type": "field", "idx": 77519, "Desc": "name of the action for moving the caret to the beginning of a word ."}{"node_name": "endWordAction", "type": "field", "idx": 77520, "Desc": "name of the action for moving the caret to the end of a word ."}{"node_name": "selectionBeginWordAction", "type": "field", "idx": 77521, "Desc": "name of the action for moving the caret to the beginning of a word , extending the selection ."}{"node_name": "selectionEndWordAction", "type": "field", "idx": 77522, "Desc": "name of the action for moving the caret to the end of a word , extending the selection ."}{"node_name": "previousWordAction", "type": "field", "idx": 77523, "Desc": "name of the action for moving the caret to the beginning of the previous word ."}{"node_name": "nextWordAction", "type": "field", "idx": 77524, "Desc": "name of the action for moving the caret to the beginning of the next word ."}{"node_name": "selectionPreviousWordAction", "type": "field", "idx": 77525, "Desc": "name of the action for moving the selection to the beginning of the previous word , extending the selection ."}{"node_name": "selectionNextWordAction", "type": "field", "idx": 77526, "Desc": "name of the action for moving the selection to the beginning of the next word , extending the selection ."}{"node_name": "beginLineAction", "type": "field", "idx": 77527, "Desc": "name of the action for moving the caret to the beginning of a line ."}{"node_name": "endLineAction", "type": "field", "idx": 77528, "Desc": "name of the action for moving the caret to the end of a line ."}{"node_name": "selectionBeginLineAction", "type": "field", "idx": 77529, "Desc": "name of the action for moving the caret to the beginning of a line , extending the selection ."}{"node_name": "selectionEndLineAction", "type": "field", "idx": 77530, "Desc": "name of the action for moving the caret to the end of a line , extending the selection ."}{"node_name": "beginParagraphAction", "type": "field", "idx": 77531, "Desc": "name of the action for moving the caret to the beginning of a paragraph ."}{"node_name": "endParagraphAction", "type": "field", "idx": 77532, "Desc": "name of the action for moving the caret to the end of a paragraph ."}{"node_name": "selectionBeginParagraphAction", "type": "field", "idx": 77533, "Desc": "name of the action for moving the caret to the beginning of a paragraph , extending the selection ."}{"node_name": "selectionEndParagraphAction", "type": "field", "idx": 77534, "Desc": "name of the action for moving the caret to the end of a paragraph , extending the selection ."}{"node_name": "beginAction", "type": "field", "idx": 77535, "Desc": "name of the action for moving the caret to the beginning of the document ."}{"node_name": "endAction", "type": "field", "idx": 77536, "Desc": "name of the action for moving the caret to the end of the document ."}{"node_name": "selectionBeginAction", "type": "field", "idx": 77537, "Desc": "name of the action for moving the caret to the beginning of the document ."}{"node_name": "selectionEndAction", "type": "field", "idx": 77538, "Desc": "name of the action for moving the caret to the end of the document ."}{"node_name": "selectWordAction", "type": "field", "idx": 77539, "Desc": "name of the action for selecting a word around the caret ."}{"node_name": "selectLineAction", "type": "field", "idx": 77540, "Desc": "name of the action for selecting a line around the caret ."}{"node_name": "selectParagraphAction", "type": "field", "idx": 77541, "Desc": "name of the action for selecting a paragraph around the caret ."}{"node_name": "selectAllAction", "type": "field", "idx": 77542, "Desc": "name of the action for selecting the entire document"}{"node_name": "defaultKeyTypedAction", "type": "field", "idx": 77543, "Desc": "name of the action that is executed by default if a key typed event is received and there is no keymap entry ."}{"node_name": "DefaultPainter", "type": "field", "idx": 77643, "Desc": "default implementation of layeredhighlighter.layerpainter that can be used for painting highlights . as of 1.4 DefaultPainter is final ."}{"node_name": "newAttributes", "type": "field", "idx": 77674, "Desc": "attributeset containing additional entries , must be non-mutable !"}{"node_name": "copy", "type": "field", "idx": 77675, "Desc": "copy of the attributeset the element contained ."}{"node_name": "isReplacing", "type": "field", "idx": 77676, "Desc": "true if all the attributes in the element were removed first ."}{"node_name": "element", "type": "field", "idx": 77677, "Desc": "affected element ."}{"node_name": "StartTagType", "type": "field", "idx": 77709, "Desc": "a possible value for gettype . this specifies that this record type is a start tag and represents markup that specifies the start of an element ."}{"node_name": "EndTagType", "type": "field", "idx": 77710, "Desc": "a possible value for gettype . this specifies that this record type is a end tag and represents markup that specifies the end of an element ."}{"node_name": "ContentType", "type": "field", "idx": 77711, "Desc": "a possible value for gettype . this specifies that this record type represents content ."}{"node_name": "JoinPreviousDirection", "type": "field", "idx": 77712, "Desc": "a possible value for getdirection . this specifies that the data associated with this record should be joined to what precedes it ."}{"node_name": "JoinNextDirection", "type": "field", "idx": 77713, "Desc": "a possible value for getdirection . this specifies that the data associated with this record should be joined to what follows it ."}{"node_name": "OriginateDirection", "type": "field", "idx": 77714, "Desc": "a possible value for getdirection . this specifies that the data associated with this record should be used to originate a new element . this would be the normal value ."}{"node_name": "JoinFractureDirection", "type": "field", "idx": 77715, "Desc": "a possible value for getdirection . this specifies that the data associated with this record should be joined to the fractured element ."}{"node_name": "BUFFER_SIZE_DEFAULT", "type": "field", "idx": 77741, "Desc": "the default size of the initial content buffer ."}{"node_name": "buffer", "type": "field", "idx": 77742, "Desc": "the element buffer ."}{"node_name": "StreamDescriptionProperty", "type": "field", "idx": 77807, "Desc": "the property name for the description of the stream used to initialize the document . this should be used if the document was initialized from a stream and anything is known about the stream ."}{"node_name": "TitleProperty", "type": "field", "idx": 77808, "Desc": "the property name for the title of the document , if there is one ."}{"node_name": "layoutSpan", "type": "field", "idx": 77994, "Desc": "default constraint against which the flow is created against ."}{"node_name": "layoutPool", "type": "field", "idx": 77995, "Desc": "these are the views that represent the child elements of the element this view represents ( the logical view to translate to a physical view ) . these are not directly children of this view . these are either placed into the rows directly or used for the purpose of breaking into smaller chunks , to form the physical view ."}{"node_name": "strategy", "type": "field", "idx": 77996, "Desc": "the behavior for keeping the flow updated . by default this is a singleton shared by all instances of flowview ( flowstrategy is stateless ) . subclasses can create an alternative strategy , which might keep state ."}{"node_name": "SIZE", "type": "field", "idx": 78241, "Desc": "attribute \" size \""}{"node_name": "COLOR", "type": "field", "idx": 78242, "Desc": "attribute \" color \""}{"node_name": "CLEAR", "type": "field", "idx": 78243, "Desc": "attribute \" clear \""}{"node_name": "BACKGROUND", "type": "field", "idx": 78244, "Desc": "attribute \" background \""}{"node_name": "BGCOLOR", "type": "field", "idx": 78245, "Desc": "attribute \" bgcolor \""}{"node_name": "TEXT", "type": "field", "idx": 78246, "Desc": "attribute \" text \""}{"node_name": "LINK", "type": "field", "idx": 78247, "Desc": "attribute \" link \""}{"node_name": "VLINK", "type": "field", "idx": 78248, "Desc": "attribute \" vlink \""}{"node_name": "ALINK", "type": "field", "idx": 78249, "Desc": "attribute \" alink \""}{"node_name": "WIDTH", "type": "field", "idx": 78250, "Desc": "attribute \" width \""}{"node_name": "HEIGHT", "type": "field", "idx": 78251, "Desc": "attribute \" height \""}{"node_name": "ALIGN", "type": "field", "idx": 78252, "Desc": "attribute \" align \""}{"node_name": "NAME", "type": "field", "idx": 78253, "Desc": "attribute \" name \""}{"node_name": "HREF", "type": "field", "idx": 78254, "Desc": "attribute \" href \""}{"node_name": "REL", "type": "field", "idx": 78255, "Desc": "attribute \" rel \""}{"node_name": "REV", "type": "field", "idx": 78256, "Desc": "attribute \" rev \""}{"node_name": "TITLE", "type": "field", "idx": 78257, "Desc": "attribute \" title \""}{"node_name": "TARGET", "type": "field", "idx": 78258, "Desc": "attribute \" target \""}{"node_name": "SHAPE", "type": "field", "idx": 78259, "Desc": "attribute \" shape \""}{"node_name": "COORDS", "type": "field", "idx": 78260, "Desc": "attribute \" coords \""}{"node_name": "ISMAP", "type": "field", "idx": 78261, "Desc": "attribute \" ismap \""}{"node_name": "NOHREF", "type": "field", "idx": 78262, "Desc": "attribute \" nohref \""}{"node_name": "ALT", "type": "field", "idx": 78263, "Desc": "attribute \" alt \""}{"node_name": "ID", "type": "field", "idx": 78264, "Desc": "attribute \" id \""}{"node_name": "SRC", "type": "field", "idx": 78265, "Desc": "attribute \" src \""}{"node_name": "HSPACE", "type": "field", "idx": 78266, "Desc": "attribute \" hspace \""}{"node_name": "VSPACE", "type": "field", "idx": 78267, "Desc": "attribute \" vspace \""}{"node_name": "USEMAP", "type": "field", "idx": 78268, "Desc": "attribute \" usemap \""}{"node_name": "LOWSRC", "type": "field", "idx": 78269, "Desc": "attribute \" lowsrc \""}{"node_name": "CODEBASE", "type": "field", "idx": 78270, "Desc": "attribute \" codebase \""}{"node_name": "CODE", "type": "field", "idx": 78271, "Desc": "attribute \" code \""}{"node_name": "ARCHIVE", "type": "field", "idx": 78272, "Desc": "attribute \" archive \""}{"node_name": "VALUE", "type": "field", "idx": 78273, "Desc": "attribute \" value \""}{"node_name": "VALUETYPE", "type": "field", "idx": 78274, "Desc": "attribute \" valuetype \""}{"node_name": "TYPE", "type": "field", "idx": 78275, "Desc": "attribute \" type \""}{"node_name": "CLASS", "type": "field", "idx": 78276, "Desc": "attribute \" class \""}{"node_name": "STYLE", "type": "field", "idx": 78277, "Desc": "attribute \" style \""}{"node_name": "LANG", "type": "field", "idx": 78278, "Desc": "attribute \" lang \""}{"node_name": "FACE", "type": "field", "idx": 78279, "Desc": "attribute \" face \""}{"node_name": "DIR", "type": "field", "idx": 78280, "Desc": "attribute \" dir \""}{"node_name": "DECLARE", "type": "field", "idx": 78281, "Desc": "attribute \" declare \""}{"node_name": "CLASSID", "type": "field", "idx": 78282, "Desc": "attribute \" classid \""}{"node_name": "DATA", "type": "field", "idx": 78283, "Desc": "attribute \" data \""}{"node_name": "CODETYPE", "type": "field", "idx": 78284, "Desc": "attribute \" codetype \""}{"node_name": "STANDBY", "type": "field", "idx": 78285, "Desc": "attribute \" standby \""}{"node_name": "BORDER", "type": "field", "idx": 78286, "Desc": "attribute \" border \""}{"node_name": "SHAPES", "type": "field", "idx": 78287, "Desc": "attribute \" shapes \""}{"node_name": "NOSHADE", "type": "field", "idx": 78288, "Desc": "attribute \" noshade \""}{"node_name": "COMPACT", "type": "field", "idx": 78289, "Desc": "attribute \" compact \""}{"node_name": "START", "type": "field", "idx": 78290, "Desc": "attribute \" start \""}{"node_name": "ACTION", "type": "field", "idx": 78291, "Desc": "attribute \" action \""}{"node_name": "METHOD", "type": "field", "idx": 78292, "Desc": "attribute \" method \""}{"node_name": "ENCTYPE", "type": "field", "idx": 78293, "Desc": "attribute \" enctype \""}{"node_name": "CHECKED", "type": "field", "idx": 78294, "Desc": "attribute \" checked \""}{"node_name": "MAXLENGTH", "type": "field", "idx": 78295, "Desc": "attribute \" maxlength \""}{"node_name": "MULTIPLE", "type": "field", "idx": 78296, "Desc": "attribute \" multiple \""}{"node_name": "SELECTED", "type": "field", "idx": 78297, "Desc": "attribute \" selected \""}{"node_name": "ROWS", "type": "field", "idx": 78298, "Desc": "attribute \" rows \""}{"node_name": "COLS", "type": "field", "idx": 78299, "Desc": "attribute \" cols \""}{"node_name": "DUMMY", "type": "field", "idx": 78300, "Desc": "attribute \" dummy \""}{"node_name": "CELLSPACING", "type": "field", "idx": 78301, "Desc": "attribute \" cellspacing \""}{"node_name": "CELLPADDING", "type": "field", "idx": 78302, "Desc": "attribute \" cellpadding \""}{"node_name": "VALIGN", "type": "field", "idx": 78303, "Desc": "attribute \" valign \""}{"node_name": "HALIGN", "type": "field", "idx": 78304, "Desc": "attribute \" halign \""}{"node_name": "NOWRAP", "type": "field", "idx": 78305, "Desc": "attribute \" nowrap \""}{"node_name": "ROWSPAN", "type": "field", "idx": 78306, "Desc": "attribute \" rowspan \""}{"node_name": "COLSPAN", "type": "field", "idx": 78307, "Desc": "attribute \" colspan \""}{"node_name": "PROMPT", "type": "field", "idx": 78308, "Desc": "attribute \" prompt \""}{"node_name": "HTTPEQUIV", "type": "field", "idx": 78309, "Desc": "attribute \" http-equiv \""}{"node_name": "CONTENT", "type": "field", "idx": 78310, "Desc": "attribute \" content \""}{"node_name": "LANGUAGE", "type": "field", "idx": 78311, "Desc": "attribute \" language \""}{"node_name": "VERSION", "type": "field", "idx": 78312, "Desc": "attribute \" version \""}{"node_name": "N", "type": "field", "idx": 78313, "Desc": "attribute \" n \""}{"node_name": "FRAMEBORDER", "type": "field", "idx": 78314, "Desc": "attribute \" frameborder \""}{"node_name": "MARGINWIDTH", "type": "field", "idx": 78315, "Desc": "attribute \" marginwidth \""}{"node_name": "MARGINHEIGHT", "type": "field", "idx": 78316, "Desc": "attribute \" marginheight \""}{"node_name": "SCROLLING", "type": "field", "idx": 78317, "Desc": "attribute \" scrolling \""}{"node_name": "NORESIZE", "type": "field", "idx": 78318, "Desc": "attribute \" noresize \""}{"node_name": "ENDTAG", "type": "field", "idx": 78319, "Desc": "attribute \" endtag \""}{"node_name": "COMMENT", "type": "field", "idx": 78320, "Desc": "attribute \" comment \""}{"node_name": "NULL_ATTRIBUTE_VALUE", "type": "field", "idx": 78323, "Desc": "null_attribute_value used in cases where the value for the attribute has not been specified ."}{"node_name": "A", "type": "field", "idx": 78336, "Desc": "tag < a >"}{"node_name": "ADDRESS", "type": "field", "idx": 78337, "Desc": "tag < address >"}{"node_name": "APPLET", "type": "field", "idx": 78338, "Desc": "tag < applet >"}{"node_name": "AREA", "type": "field", "idx": 78339, "Desc": "tag < area >"}{"node_name": "B", "type": "field", "idx": 78340, "Desc": "tag < b >"}{"node_name": "BASE", "type": "field", "idx": 78341, "Desc": "tag < base >"}{"node_name": "BASEFONT", "type": "field", "idx": 78342, "Desc": "tag < basefont >"}{"node_name": "BIG", "type": "field", "idx": 78343, "Desc": "tag < big >"}{"node_name": "BLOCKQUOTE", "type": "field", "idx": 78344, "Desc": "tag < blockquote >"}{"node_name": "BODY", "type": "field", "idx": 78345, "Desc": "tag < body >"}{"node_name": "BR", "type": "field", "idx": 78346, "Desc": "tag < br >"}{"node_name": "CAPTION", "type": "field", "idx": 78347, "Desc": "tag < caption >"}{"node_name": "CENTER", "type": "field", "idx": 78348, "Desc": "tag < center >"}{"node_name": "CITE", "type": "field", "idx": 78349, "Desc": "tag < cite >"}{"node_name": "CODE", "type": "field", "idx": 78350, "Desc": "tag < code >"}{"node_name": "DD", "type": "field", "idx": 78351, "Desc": "tag < dd >"}{"node_name": "DFN", "type": "field", "idx": 78352, "Desc": "tag < dfn >"}{"node_name": "DIR", "type": "field", "idx": 78353, "Desc": "tag < dir >"}{"node_name": "DIV", "type": "field", "idx": 78354, "Desc": "tag < div >"}{"node_name": "DL", "type": "field", "idx": 78355, "Desc": "tag < dl >"}{"node_name": "DT", "type": "field", "idx": 78356, "Desc": "tag < dt >"}{"node_name": "EM", "type": "field", "idx": 78357, "Desc": "tag < em >"}{"node_name": "FONT", "type": "field", "idx": 78358, "Desc": "tag < font >"}{"node_name": "FORM", "type": "field", "idx": 78359, "Desc": "tag < form >"}{"node_name": "FRAME", "type": "field", "idx": 78360, "Desc": "tag < frame >"}{"node_name": "FRAMESET", "type": "field", "idx": 78361, "Desc": "tag < frameset >"}{"node_name": "H1", "type": "field", "idx": 78362, "Desc": "tag < h1 >"}{"node_name": "H2", "type": "field", "idx": 78363, "Desc": "tag < h2 >"}{"node_name": "H3", "type": "field", "idx": 78364, "Desc": "tag < h3 >"}{"node_name": "H4", "type": "field", "idx": 78365, "Desc": "tag < h4 >"}{"node_name": "H5", "type": "field", "idx": 78366, "Desc": "tag < h5 >"}{"node_name": "H6", "type": "field", "idx": 78367, "Desc": "tag < h6 >"}{"node_name": "HEAD", "type": "field", "idx": 78368, "Desc": "tag < head >"}{"node_name": "HR", "type": "field", "idx": 78369, "Desc": "tag < hr >"}{"node_name": "HTML", "type": "field", "idx": 78370, "Desc": "tag < html >"}{"node_name": "I", "type": "field", "idx": 78371, "Desc": "tag < i >"}{"node_name": "IMG", "type": "field", "idx": 78372, "Desc": "tag < img >"}{"node_name": "INPUT", "type": "field", "idx": 78373, "Desc": "tag < input >"}{"node_name": "ISINDEX", "type": "field", "idx": 78374, "Desc": "tag < isindex >"}{"node_name": "KBD", "type": "field", "idx": 78375, "Desc": "tag < kbd >"}{"node_name": "LI", "type": "field", "idx": 78376, "Desc": "tag < li >"}{"node_name": "LINK", "type": "field", "idx": 78377, "Desc": "tag < link >"}{"node_name": "MAP", "type": "field", "idx": 78378, "Desc": "tag < map >"}{"node_name": "MENU", "type": "field", "idx": 78379, "Desc": "tag < menu >"}{"node_name": "META", "type": "field", "idx": 78380, "Desc": "tag < meta >"}{"node_name": "NOFRAMES", "type": "field", "idx": 78381, "Desc": "tag < noframes >"}{"node_name": "OBJECT", "type": "field", "idx": 78382, "Desc": "tag < object >"}{"node_name": "OL", "type": "field", "idx": 78383, "Desc": "tag < ol >"}{"node_name": "OPTION", "type": "field", "idx": 78384, "Desc": "tag < option >"}{"node_name": "P", "type": "field", "idx": 78385, "Desc": "tag < p >"}{"node_name": "PARAM", "type": "field", "idx": 78386, "Desc": "tag < param >"}{"node_name": "PRE", "type": "field", "idx": 78387, "Desc": "tag < pre >"}{"node_name": "SAMP", "type": "field", "idx": 78388, "Desc": "tag < samp >"}{"node_name": "SCRIPT", "type": "field", "idx": 78389, "Desc": "tag < script >"}{"node_name": "SELECT", "type": "field", "idx": 78390, "Desc": "tag < select >"}{"node_name": "SMALL", "type": "field", "idx": 78391, "Desc": "tag < small >"}{"node_name": "SPAN", "type": "field", "idx": 78392, "Desc": "tag < span >"}{"node_name": "STRIKE", "type": "field", "idx": 78393, "Desc": "tag < strike >"}{"node_name": "S", "type": "field", "idx": 78394, "Desc": "tag < s >"}{"node_name": "STRONG", "type": "field", "idx": 78395, "Desc": "tag < strong >"}{"node_name": "STYLE", "type": "field", "idx": 78396, "Desc": "tag < style >"}{"node_name": "SUB", "type": "field", "idx": 78397, "Desc": "tag < sub >"}{"node_name": "SUP", "type": "field", "idx": 78398, "Desc": "tag < sup >"}{"node_name": "TABLE", "type": "field", "idx": 78399, "Desc": "tag < table >"}{"node_name": "TD", "type": "field", "idx": 78400, "Desc": "tag < td >"}{"node_name": "TEXTAREA", "type": "field", "idx": 78401, "Desc": "tag < textarea >"}{"node_name": "TH", "type": "field", "idx": 78402, "Desc": "tag < th >"}{"node_name": "TITLE", "type": "field", "idx": 78403, "Desc": "tag < title >"}{"node_name": "TR", "type": "field", "idx": 78404, "Desc": "tag < tr >"}{"node_name": "TT", "type": "field", "idx": 78405, "Desc": "tag < tt >"}{"node_name": "U", "type": "field", "idx": 78406, "Desc": "tag < u >"}{"node_name": "UL", "type": "field", "idx": 78407, "Desc": "tag < ul >"}{"node_name": "VAR", "type": "field", "idx": 78408, "Desc": "tag < var >"}{"node_name": "IMPLIED", "type": "field", "idx": 78409, "Desc": "all text content must be in a paragraph element . if a paragraph didn't exist when content was encountered , a paragraph is manufactured . this is a tag synthesized by the html reader . since elements are identified by their tag type , we create a some fake tag types to mark the elements that were manufactured ."}{"node_name": "CONTENT", "type": "field", "idx": 78410, "Desc": "all text content is labeled with this tag . this is a tag synthesized by the html reader . since elements are identified by their tag type , we create a some fake tag types to mark the elements that were manufactured ."}{"node_name": "COMMENT", "type": "field", "idx": 78411, "Desc": "all comments are labeled with this tag . this is a tag synthesized by the html reader . since elements are identified by their tag type , we create a some fake tag types to mark the elements that were manufactured ."}{"node_name": "parseBuffer", "type": "field", "idx": 78446, "Desc": "buffer to keep building elements ."}{"node_name": "charAttr", "type": "field", "idx": 78447, "Desc": "current character attribute set ."}{"node_name": "AdditionalComments", "type": "field", "idx": 78520, "Desc": "document property key value . the value for the key will be a vector of strings that are comments not found in the body ."}{"node_name": "html", "type": "field", "idx": 78632, "Desc": "html to insert ."}{"node_name": "parentTag", "type": "field", "idx": 78633, "Desc": "tag to check for in the document ."}{"node_name": "addTag", "type": "field", "idx": 78634, "Desc": "tag in html to start adding tags from ."}{"node_name": "alternateParentTag", "type": "field", "idx": 78635, "Desc": "alternate tag to check for in the document if parenttag is not found ."}{"node_name": "alternateAddTag", "type": "field", "idx": 78636, "Desc": "alternate tag in html to start adding tags from if parenttag is not found and alternateparenttag is found ."}{"node_name": "DEFAULT_CSS", "type": "field", "idx": 78668, "Desc": "default cascading style sheet file that sets up the tag views ."}{"node_name": "BOLD_ACTION", "type": "field", "idx": 78669, "Desc": "the bold action identifier"}{"node_name": "ITALIC_ACTION", "type": "field", "idx": 78670, "Desc": "the italic action identifier"}{"node_name": "PARA_INDENT_LEFT", "type": "field", "idx": 78671, "Desc": "the paragraph left indent action identifier"}{"node_name": "PARA_INDENT_RIGHT", "type": "field", "idx": 78672, "Desc": "the paragraph right indent action identifier"}{"node_name": "FONT_CHANGE_BIGGER", "type": "field", "idx": 78673, "Desc": "the font size increase to next value action identifier"}{"node_name": "FONT_CHANGE_SMALLER", "type": "field", "idx": 78674, "Desc": "the font size decrease to next value action identifier"}{"node_name": "COLOR_ACTION", "type": "field", "idx": 78675, "Desc": "the color choice action identifier the color is passed as an argument"}{"node_name": "LOGICAL_STYLE_ACTION", "type": "field", "idx": 78676, "Desc": "the logical style choice action identifier the logical style is passed in as an argument"}{"node_name": "IMG_ALIGN_TOP", "type": "field", "idx": 78677, "Desc": "align images at the top ."}{"node_name": "IMG_ALIGN_MIDDLE", "type": "field", "idx": 78678, "Desc": "align images in the middle ."}{"node_name": "IMG_ALIGN_BOTTOM", "type": "field", "idx": 78679, "Desc": "align images at the bottom ."}{"node_name": "IMG_BORDER", "type": "field", "idx": 78680, "Desc": "align images at the border ."}{"node_name": "IMPLIED", "type": "field", "idx": 78739, "Desc": "this is passed as an attribute in the attributeset to indicate the element is implied eg , the string ' <> foo < \\t > ' contains an implied html element and an implied body element ."}{"node_name": "FOCUS_ACCELERATOR_KEY", "type": "field", "idx": 79037, "Desc": "the bound property name for the focus accelerator ."}{"node_name": "DEFAULT_KEYMAP", "type": "field", "idx": 79038, "Desc": "the default keymap that will be shared by all jtextcomponent instances unless they have had a different keymap set ."}{"node_name": "key", "type": "field", "idx": 79175, "Desc": "the key ."}{"node_name": "actionName", "type": "field", "idx": 79176, "Desc": "the name of the action for the key ."}{"node_name": "name", "type": "field", "idx": 79419, "Desc": "the attribute name"}{"node_name": "type", "type": "field", "idx": 79420, "Desc": "the attribute type"}{"node_name": "values", "type": "field", "idx": 79421, "Desc": "the possible attribute values"}{"node_name": "modifier", "type": "field", "idx": 79422, "Desc": "the attribute modifier"}{"node_name": "value", "type": "field", "idx": 79423, "Desc": "the default attribute value"}{"node_name": "next", "type": "field", "idx": 79424, "Desc": "the next attribute in the list"}{"node_name": "type", "type": "field", "idx": 79446, "Desc": "type . either ' * ' , ' ? ' , ' + ' , ' , ' , ' | ' , ' & ' ."}{"node_name": "content", "type": "field", "idx": 79447, "Desc": "the content . either an element or a contentmodel ."}{"node_name": "next", "type": "field", "idx": 79448, "Desc": "the next content model ( in a ' , ' , ' | ' or ' & ' expression ) ."}{"node_name": "name", "type": "field", "idx": 79482, "Desc": "the name of the dtd"}{"node_name": "elements", "type": "field", "idx": 79483, "Desc": "the vector of elements"}{"node_name": "elementHash", "type": "field", "idx": 79484, "Desc": "the hash table contains the name of element and the corresponding element ."}{"node_name": "entityHash", "type": "field", "idx": 79485, "Desc": "the hash table contains an object and the corresponding entity"}{"node_name": "pcdata", "type": "field", "idx": 79486, "Desc": "the element corresponding to pcdata ."}{"node_name": "html", "type": "field", "idx": 79487, "Desc": "the element corresponding to html ."}{"node_name": "meta", "type": "field", "idx": 79488, "Desc": "the element corresponding to meta ."}{"node_name": "base", "type": "field", "idx": 79489, "Desc": "the element corresponding to base ."}{"node_name": "isindex", "type": "field", "idx": 79490, "Desc": "the element corresponding to isindex ."}{"node_name": "head", "type": "field", "idx": 79491, "Desc": "the element corresponding to head ."}{"node_name": "body", "type": "field", "idx": 79492, "Desc": "the element corresponding to body ."}{"node_name": "applet", "type": "field", "idx": 79493, "Desc": "the element corresponding to applet ."}{"node_name": "param", "type": "field", "idx": 79494, "Desc": "the element corresponding to param ."}{"node_name": "p", "type": "field", "idx": 79495, "Desc": "the element corresponding to p ."}{"node_name": "title", "type": "field", "idx": 79496, "Desc": "the element corresponding to title ."}{"node_name": "FILE_VERSION", "type": "field", "idx": 79497, "Desc": "the version of a file"}{"node_name": "CDATA", "type": "field", "idx": 79562, "Desc": "the dtd constant corresponds to cdata"}{"node_name": "ENTITY", "type": "field", "idx": 79563, "Desc": "the dtd constant corresponds to entity"}{"node_name": "ENTITIES", "type": "field", "idx": 79564, "Desc": "the dtd constant corresponds to entities"}{"node_name": "ID", "type": "field", "idx": 79565, "Desc": "the dtd constant corresponds to id"}{"node_name": "IDREF", "type": "field", "idx": 79566, "Desc": "the dtd constant corresponds to idref"}{"node_name": "IDREFS", "type": "field", "idx": 79567, "Desc": "the dtd constant corresponds to idrefs"}{"node_name": "NAME", "type": "field", "idx": 79568, "Desc": "the dtd constant corresponds to name"}{"node_name": "NAMES", "type": "field", "idx": 79569, "Desc": "the dtd constant corresponds to names"}{"node_name": "NMTOKEN", "type": "field", "idx": 79570, "Desc": "the dtd constant corresponds to nmtoken"}{"node_name": "NMTOKENS", "type": "field", "idx": 79571, "Desc": "the dtd constant corresponds to nmtokens"}{"node_name": "NOTATION", "type": "field", "idx": 79572, "Desc": "the dtd constant corresponds to notation"}{"node_name": "NUMBER", "type": "field", "idx": 79573, "Desc": "the dtd constant corresponds to number"}{"node_name": "NUMBERS", "type": "field", "idx": 79574, "Desc": "the dtd constant corresponds to numbers"}{"node_name": "NUTOKEN", "type": "field", "idx": 79575, "Desc": "the dtd constant corresponds to nutoken"}{"node_name": "NUTOKENS", "type": "field", "idx": 79576, "Desc": "the dtd constant corresponds to nutokens"}{"node_name": "RCDATA", "type": "field", "idx": 79577, "Desc": "the dtd constant corresponds to rcdata"}{"node_name": "EMPTY", "type": "field", "idx": 79578, "Desc": "the dtd constant corresponds to empty"}{"node_name": "MODEL", "type": "field", "idx": 79579, "Desc": "the dtd constant corresponds to model"}{"node_name": "ANY", "type": "field", "idx": 79580, "Desc": "the dtd constant corresponds to any"}{"node_name": "FIXED", "type": "field", "idx": 79581, "Desc": "the dtd constant corresponds to fixed"}{"node_name": "REQUIRED", "type": "field", "idx": 79582, "Desc": "the dtd constant corresponds to required"}{"node_name": "CURRENT", "type": "field", "idx": 79583, "Desc": "the dtd constant corresponds to current"}{"node_name": "CONREF", "type": "field", "idx": 79584, "Desc": "the dtd constant corresponds to conref"}{"node_name": "IMPLIED", "type": "field", "idx": 79585, "Desc": "the dtd constant corresponds to implied"}{"node_name": "PUBLIC", "type": "field", "idx": 79586, "Desc": "the dtd constant corresponds to public"}{"node_name": "SDATA", "type": "field", "idx": 79587, "Desc": "the dtd constant corresponds to sdata"}{"node_name": "PI", "type": "field", "idx": 79588, "Desc": "the dtd constant corresponds to pi"}{"node_name": "STARTTAG", "type": "field", "idx": 79589, "Desc": "the dtd constant corresponds to starttag"}{"node_name": "ENDTAG", "type": "field", "idx": 79590, "Desc": "the dtd constant corresponds to endtag"}{"node_name": "MS", "type": "field", "idx": 79591, "Desc": "the dtd constant corresponds to ms"}{"node_name": "MD", "type": "field", "idx": 79592, "Desc": "the dtd constant corresponds to md"}{"node_name": "SYSTEM", "type": "field", "idx": 79593, "Desc": "the dtd constant corresponds to system"}{"node_name": "GENERAL", "type": "field", "idx": 79594, "Desc": "the dtd constant corresponds to general"}{"node_name": "DEFAULT", "type": "field", "idx": 79595, "Desc": "the dtd constant corresponds to default"}{"node_name": "PARAMETER", "type": "field", "idx": 79596, "Desc": "the dtd constant corresponds to parameter"}{"node_name": "index", "type": "field", "idx": 79598, "Desc": "the element index"}{"node_name": "name", "type": "field", "idx": 79599, "Desc": "the name of the element"}{"node_name": "oStart", "type": "field", "idx": 79600, "Desc": "true if the start tag can be omitted"}{"node_name": "oEnd", "type": "field", "idx": 79601, "Desc": "true if the end tag can be omitted"}{"node_name": "inclusions", "type": "field", "idx": 79602, "Desc": "the set of elements that can occur inside the element"}{"node_name": "exclusions", "type": "field", "idx": 79603, "Desc": "the set of elements that must not occur inside the element"}{"node_name": "type", "type": "field", "idx": 79604, "Desc": "the element type"}{"node_name": "content", "type": "field", "idx": 79605, "Desc": "the content model"}{"node_name": "atts", "type": "field", "idx": 79606, "Desc": "the attributes"}{"node_name": "data", "type": "field", "idx": 79607, "Desc": "a field to store user data . mostly used to store style sheets ."}{"node_name": "name", "type": "field", "idx": 79624, "Desc": "the name of the entity ."}{"node_name": "type", "type": "field", "idx": 79625, "Desc": "the type of the entity ."}{"node_name": "data", "type": "field", "idx": 79626, "Desc": "the char array of data ."}{"node_name": "dtd", "type": "field", "idx": 79640, "Desc": "the dtd ."}{"node_name": "strict", "type": "field", "idx": 79641, "Desc": "this flag determines whether or not the parser will be strict in enforcing sgml compatibility . if false , it will be lenient with certain common classes of erroneous html constructs . strict or not , in either case an error will be recorded ."}{"node_name": "tabSizeAttribute", "type": "field", "idx": 79731, "Desc": "name of the attribute that specifies the tab size for tabs contained in the content . the type for the value is integer ."}{"node_name": "lineLimitAttribute", "type": "field", "idx": 79732, "Desc": "name of the attribute that specifies the maximum length of a line , if there is a maximum length . the type for the value is integer ."}{"node_name": "metrics", "type": "field", "idx": 79750, "Desc": "font metrics for the current font ."}{"node_name": "Forward", "type": "field", "idx": 79818, "Desc": "indicates to bias toward the next character in the model ."}{"node_name": "Backward", "type": "field", "idx": 79819, "Desc": "indicates a bias toward the previous character in the model ."}{"node_name": "array", "type": "field", "idx": 79845, "Desc": "this is the array containing the text of interest . this array should never be modified ; it is available only for efficiency ."}{"node_name": "offset", "type": "field", "idx": 79846, "Desc": "this is the offset into the array that the desired text begins ."}{"node_name": "count", "type": "field", "idx": 79847, "Desc": "this is the number of array elements that make up the text of interest ."}{"node_name": "EMPTY", "type": "field", "idx": 79875, "Desc": "an empty attribute set ."}{"node_name": "ComponentElementName", "type": "field", "idx": 79949, "Desc": "name of elements used to represent components ."}{"node_name": "IconElementName", "type": "field", "idx": 79950, "Desc": "name of elements used to represent icons ."}{"node_name": "NameAttribute", "type": "field", "idx": 79951, "Desc": "attribute name used to name the collection of attributes ."}{"node_name": "ResolveAttribute", "type": "field", "idx": 79952, "Desc": "attribute name used to identify the resolving parent set of attributes , if one is defined ."}{"node_name": "ModelAttribute", "type": "field", "idx": 79953, "Desc": "attribute used to identify the model for embedded objects that have a model view separation ."}{"node_name": "BidiLevel", "type": "field", "idx": 79954, "Desc": "bidirectional level of a character as assigned by the unicode bidi algorithm ."}{"node_name": "FontFamily", "type": "field", "idx": 79955, "Desc": "name of the font family ."}{"node_name": "Family", "type": "field", "idx": 79956, "Desc": "name of the font family ."}{"node_name": "FontSize", "type": "field", "idx": 79957, "Desc": "name of the font size ."}{"node_name": "Size", "type": "field", "idx": 79958, "Desc": "name of the font size ."}{"node_name": "Bold", "type": "field", "idx": 79959, "Desc": "name of the bold attribute ."}{"node_name": "Italic", "type": "field", "idx": 79960, "Desc": "name of the italic attribute ."}{"node_name": "Underline", "type": "field", "idx": 79961, "Desc": "name of the underline attribute ."}{"node_name": "StrikeThrough", "type": "field", "idx": 79962, "Desc": "name of the strikethrough attribute ."}{"node_name": "Superscript", "type": "field", "idx": 79963, "Desc": "name of the superscript attribute ."}{"node_name": "Subscript", "type": "field", "idx": 79964, "Desc": "name of the subscript attribute ."}{"node_name": "Foreground", "type": "field", "idx": 79965, "Desc": "name of the foreground color attribute ."}{"node_name": "Background", "type": "field", "idx": 79966, "Desc": "name of the background color attribute ."}{"node_name": "ComponentAttribute", "type": "field", "idx": 79967, "Desc": "name of the component attribute ."}{"node_name": "IconAttribute", "type": "field", "idx": 79968, "Desc": "name of the icon attribute ."}{"node_name": "ComposedTextAttribute", "type": "field", "idx": 79969, "Desc": "name of the input method composed text attribute . the value of this attribute is an instance of attributedstring which represents the composed text ."}{"node_name": "FirstLineIndent", "type": "field", "idx": 79970, "Desc": "the amount of space to indent the first line of the paragraph . this value may be negative to offset in the reverse direction . the type is float and specifies the size of the space in points ."}{"node_name": "LeftIndent", "type": "field", "idx": 79971, "Desc": "the amount to indent the left side of the paragraph . type is float and specifies the size in points ."}{"node_name": "RightIndent", "type": "field", "idx": 79972, "Desc": "the amount to indent the right side of the paragraph . type is float and specifies the size in points ."}{"node_name": "LineSpacing", "type": "field", "idx": 79973, "Desc": "the amount of space between lines of the paragraph . type is float and specifies the size as a factor of the line height"}{"node_name": "SpaceAbove", "type": "field", "idx": 79974, "Desc": "the amount of space above the paragraph . type is float and specifies the size in points ."}{"node_name": "SpaceBelow", "type": "field", "idx": 79975, "Desc": "the amount of space below the paragraph . type is float and specifies the size in points ."}{"node_name": "Alignment", "type": "field", "idx": 79976, "Desc": "alignment for the paragraph . the type is integer . valid values are : align_left align_right align_center align_justifed"}{"node_name": "TabSet", "type": "field", "idx": 79977, "Desc": "tabset for the paragraph , type is a tabset containing tabstops ."}{"node_name": "Orientation", "type": "field", "idx": 79978, "Desc": "orientation for a paragraph ."}{"node_name": "ALIGN_LEFT", "type": "field", "idx": 79979, "Desc": "a possible value for paragraph alignment . this specifies that the text is aligned to the left indent and extra whitespace should be placed on the right ."}{"node_name": "ALIGN_CENTER", "type": "field", "idx": 79980, "Desc": "a possible value for paragraph alignment . this specifies that the text is aligned to the center and extra whitespace should be placed equally on the left and right ."}{"node_name": "ALIGN_RIGHT", "type": "field", "idx": 79981, "Desc": "a possible value for paragraph alignment . this specifies that the text is aligned to the right indent and extra whitespace should be placed on the left ."}{"node_name": "ALIGN_JUSTIFIED", "type": "field", "idx": 79982, "Desc": "a possible value for paragraph alignment . this specifies that extra whitespace should be spread out through the rows of the paragraph with the text lined up with the left and right indent except on the last line which should be aligned to the left ."}{"node_name": "DEFAULT_STYLE", "type": "field", "idx": 80091, "Desc": "the name given to the default logical style attached to paragraphs ."}{"node_name": "listenerList", "type": "field", "idx": 80163, "Desc": "the change listeners for the model ."}{"node_name": "changeEvent", "type": "field", "idx": 80164, "Desc": "only one changeevent is needed per model instance since the event's only ( read-only ) state is the source property . the source of events generated here is always \" this \" ."}{"node_name": "ALIGN_LEFT", "type": "field", "idx": 80513, "Desc": "character following tab is positioned at location ."}{"node_name": "ALIGN_RIGHT", "type": "field", "idx": 80514, "Desc": "characters following tab are positioned such that all following characters up to next tab / newline end at location ."}{"node_name": "ALIGN_CENTER", "type": "field", "idx": 80515, "Desc": "characters following tab are positioned such that all following characters up to next tab / newline are centered around the tabs location ."}{"node_name": "ALIGN_DECIMAL", "type": "field", "idx": 80516, "Desc": "characters following tab are aligned such that next decimal / tab / newline is at the tab location , very similar to right_tab , just includes decimal as additional character to look for ."}{"node_name": "ALIGN_BAR", "type": "field", "idx": 80517, "Desc": "align bar"}{"node_name": "LEAD_NONE", "type": "field", "idx": 80518, "Desc": "lead none"}{"node_name": "LEAD_DOTS", "type": "field", "idx": 80519, "Desc": "lead dots"}{"node_name": "LEAD_HYPHENS", "type": "field", "idx": 80520, "Desc": "lead hyphens"}{"node_name": "LEAD_UNDERLINE", "type": "field", "idx": 80521, "Desc": "lead underline"}{"node_name": "LEAD_THICKLINE", "type": "field", "idx": 80522, "Desc": "lead thickline"}{"node_name": "LEAD_EQUALS", "type": "field", "idx": 80523, "Desc": "lead equals"}{"node_name": "BadBreakWeight", "type": "field", "idx": 80605, "Desc": "the weight to indicate a view is a bad break opportunity for the purpose of formatting . this value indicates that no attempt should be made to break the view into fragments as the view has not been written to support fragmenting ."}{"node_name": "GoodBreakWeight", "type": "field", "idx": 80606, "Desc": "the weight to indicate a view supports breaking , but better opportunities probably exist ."}{"node_name": "ExcellentBreakWeight", "type": "field", "idx": 80607, "Desc": "the weight to indicate a view supports breaking , and this represents a very attractive place to break ."}{"node_name": "ForcedBreakWeight", "type": "field", "idx": 80608, "Desc": "the weight to indicate a view supports breaking , and must be broken to be represented properly when placed in a view that formats its children by breaking them ."}{"node_name": "X_AXIS", "type": "field", "idx": 80609, "Desc": "axis for format / break operations ."}{"node_name": "Y_AXIS", "type": "field", "idx": 80610, "Desc": "axis for format / break operations ."}{"node_name": "listenerList", "type": "field", "idx": 80834, "Desc": "the collection of registered listeners"}{"node_name": "lightWeightPopupEnabled", "type": "field", "idx": 80872, "Desc": "lightweight popup enabled ."}{"node_name": "heavyWeightPopupEnabled", "type": "field", "idx": 80873, "Desc": "heavyweight popup enabled ."}{"node_name": "NONE", "type": "field", "idx": 80914, "Desc": "an int representing no transfer action ."}{"node_name": "COPY", "type": "field", "idx": 80915, "Desc": "an int representing a \" copy \" transfer action . this value is used when data is copied to a clipboard or copied elsewhere in a drag and drop operation ."}{"node_name": "MOVE", "type": "field", "idx": 80916, "Desc": "an int representing a \" move \" transfer action . this value is used when data is moved to a clipboard ( i.e. a cut ) or moved elsewhere in a drag and drop operation ."}{"node_name": "COPY_OR_MOVE", "type": "field", "idx": 80917, "Desc": "an int representing a source action capability of either \" copy \" or \" move \" ."}{"node_name": "LINK", "type": "field", "idx": 80918, "Desc": "an int representing a \" link \" transfer action . this value is used to specify that data should be linked in a drag and drop operation ."}{"node_name": "nodeDimensions", "type": "field", "idx": 80978, "Desc": "object responsible for getting the size of a node ."}{"node_name": "treeModel", "type": "field", "idx": 80979, "Desc": "model providing information ."}{"node_name": "treeSelectionModel", "type": "field", "idx": 80980, "Desc": "selection model ."}{"node_name": "rootVisible", "type": "field", "idx": 80981, "Desc": "true if the root node is displayed , false if its children are the highest visible nodes ."}{"node_name": "rowHeight", "type": "field", "idx": 80982, "Desc": "height to use for each row . if this is <= 0 the renderer will be used to determine the height for each row ."}{"node_name": "EMPTY_ENUMERATION", "type": "field", "idx": 81053, "Desc": "an enumeration that is always empty . this is used when an enumeration of a leaf node's children is requested ."}{"node_name": "parent", "type": "field", "idx": 81054, "Desc": "this node's parent , or null if this node has no parent"}{"node_name": "children", "type": "field", "idx": 81055, "Desc": "array of children , may be null if this node has no children"}{"node_name": "userObject", "type": "field", "idx": 81056, "Desc": "optional user object"}{"node_name": "allowsChildren", "type": "field", "idx": 81057, "Desc": "true if the node is able to have children"}{"node_name": "border", "type": "field", "idx": 81137, "Desc": "border to use ."}{"node_name": "realEditor", "type": "field", "idx": 81152, "Desc": "editor handling the editing ."}{"node_name": "renderer", "type": "field", "idx": 81153, "Desc": "renderer , used to get border and offsets from ."}{"node_name": "editingContainer", "type": "field", "idx": 81154, "Desc": "editing container , will contain the editorcomponent ."}{"node_name": "editingComponent", "type": "field", "idx": 81155, "Desc": "component used in editing , obtained from the editingcontainer ."}{"node_name": "canEdit", "type": "field", "idx": 81156, "Desc": "as of java 2 platform v1.4 canEdit should no longer be used . if you wish to provide similar behavior you should directly override iscelleditable ."}{"node_name": "offset", "type": "field", "idx": 81157, "Desc": "used in editing . indicates x position to place editingcomponent ."}{"node_name": "tree", "type": "field", "idx": 81158, "Desc": "jtree instance listening too ."}{"node_name": "lastPath", "type": "field", "idx": 81159, "Desc": "last path that was selected ."}{"node_name": "timer", "type": "field", "idx": 81160, "Desc": "used before starting the editing session ."}{"node_name": "lastRow", "type": "field", "idx": 81161, "Desc": "row that was last passed into gettreecelleditorcomponent ."}{"node_name": "borderSelectionColor", "type": "field", "idx": 81162, "Desc": "true if the border selection color should be drawn ."}{"node_name": "editingIcon", "type": "field", "idx": 81163, "Desc": "icon to use when editing ."}{"node_name": "font", "type": "field", "idx": 81164, "Desc": "font to paint with , null indicates font of renderer is to be used ."}{"node_name": "selected", "type": "field", "idx": 81222, "Desc": "is the value currently selected ."}{"node_name": "hasFocus", "type": "field", "idx": 81223, "Desc": "true if has focus ."}{"node_name": "closedIcon", "type": "field", "idx": 81224, "Desc": "icon used to show non-leaf nodes that aren't expanded ."}{"node_name": "leafIcon", "type": "field", "idx": 81225, "Desc": "icon used to show leaf nodes ."}{"node_name": "openIcon", "type": "field", "idx": 81226, "Desc": "icon used to show non-leaf nodes that are expanded ."}{"node_name": "textSelectionColor", "type": "field", "idx": 81227, "Desc": "color to use for the foreground for selected nodes ."}{"node_name": "textNonSelectionColor", "type": "field", "idx": 81228, "Desc": "color to use for the foreground for non-selected nodes ."}{"node_name": "backgroundSelectionColor", "type": "field", "idx": 81229, "Desc": "color to use for the background when a node is selected ."}{"node_name": "backgroundNonSelectionColor", "type": "field", "idx": 81230, "Desc": "color to use for the background when the node isn't selected ."}{"node_name": "borderSelectionColor", "type": "field", "idx": 81231, "Desc": "color to use for the focus indicator when the node has focus ."}{"node_name": "root", "type": "field", "idx": 81326, "Desc": "root of the tree ."}{"node_name": "listenerList", "type": "field", "idx": 81327, "Desc": "listeners ."}{"node_name": "asksAllowsChildren", "type": "field", "idx": 81328, "Desc": "determines how the isleaf method figures out if a node is a leaf node . if true , a node is a leaf node if it does not allow children . ( if it allows children , it is not a leaf node , even if no children are present . ) that lets you distinguish between folder nodes and file nodes in a file system , for example . if this value is false , then any node which has no children is a leaf node , and any node may acquire children ."}{"node_name": "SELECTION_MODE_PROPERTY", "type": "field", "idx": 81409, "Desc": "property name for selectionmode ."}{"node_name": "changeSupport", "type": "field", "idx": 81410, "Desc": "used to messaged registered listeners ."}{"node_name": "selection", "type": "field", "idx": 81411, "Desc": "paths that are currently selected . will be null if nothing is currently selected ."}{"node_name": "listenerList", "type": "field", "idx": 81412, "Desc": "event listener list ."}{"node_name": "rowMapper", "type": "field", "idx": 81413, "Desc": "provides a row for a given path ."}{"node_name": "listSelectionModel", "type": "field", "idx": 81414, "Desc": "handles maintaining the list selection model . the rowmapper is used to map from a treepath to a row , and the value is then placed here ."}{"node_name": "selectionMode", "type": "field", "idx": 81415, "Desc": "mode for the selection , will be either single_tree_selection , contiguous_tree_selection or discontiguous_tree_selection ."}{"node_name": "leadPath", "type": "field", "idx": 81416, "Desc": "last path that was added ."}{"node_name": "leadIndex", "type": "field", "idx": 81417, "Desc": "index of the lead path in selection ."}{"node_name": "leadRow", "type": "field", "idx": 81418, "Desc": "lead row ."}{"node_name": "event", "type": "field", "idx": 81479, "Desc": "the event that the exception was created for ."}{"node_name": "SINGLE_TREE_SELECTION", "type": "field", "idx": 81615, "Desc": "selection can only contain one path at a time ."}{"node_name": "CONTIGUOUS_TREE_SELECTION", "type": "field", "idx": 81616, "Desc": "selection can only be contiguous . this will only be enforced if a rowmapper instance is provided . that is , if no rowmapper is set this behaves the same as discontiguous_tree_selection ."}{"node_name": "DISCONTIGUOUS_TREE_SELECTION", "type": "field", "idx": 81617, "Desc": "selection can contain any number of items that are not necessarily contiguous ."}{"node_name": "UndoName", "type": "field", "idx": 81913, "Desc": "string returned by getundopresentationname ; as of java 2 platform v1.3.1 UndoName is no longer used . this value is now localized and comes from the defaults table with key abstractundoableedit.undotext ."}{"node_name": "RedoName", "type": "field", "idx": 81914, "Desc": "string returned by getredopresentationname ; as of java 2 platform v1.3.1 RedoName is no longer used . this value is now localized and comes from the defaults table with key abstractundoableedit.redotext ."}{"node_name": "edits", "type": "field", "idx": 81935, "Desc": "the collection of undoableedits undone / redone en masse by this compoundedit ."}{"node_name": "RCSID", "type": "field", "idx": 81953, "Desc": "obsolete rcs version identity ."}{"node_name": "object", "type": "field", "idx": 81954, "Desc": "the object being edited"}{"node_name": "preState", "type": "field", "idx": 81955, "Desc": "the state information prior to the edit"}{"node_name": "postState", "type": "field", "idx": 81956, "Desc": "the state information after the edit"}{"node_name": "undoRedoName", "type": "field", "idx": 81957, "Desc": "the undo / redo presentation name"}{"node_name": "RCSID", "type": "field", "idx": 81972, "Desc": "resource id for this class ."}{"node_name": "updateLevel", "type": "field", "idx": 81992, "Desc": "the update level ."}{"node_name": "compoundEdit", "type": "field", "idx": 81993, "Desc": "the compound edit ."}{"node_name": "listeners", "type": "field", "idx": 81994, "Desc": "the list of listeners ."}{"node_name": "realSource", "type": "field", "idx": 81995, "Desc": "the real source ."}{"node_name": "DO_NOTHING_ON_CLOSE", "type": "field", "idx": 82061, "Desc": "the do-nothing default window close operation ."}{"node_name": "HIDE_ON_CLOSE", "type": "field", "idx": 82062, "Desc": "the hide-window default window close operation"}{"node_name": "DISPOSE_ON_CLOSE", "type": "field", "idx": 82063, "Desc": "the dispose-window default window close operation . note : when the last displayable window within the java virtual machine ( vm ) is disposed of , the vm may terminate . see awt threading issues for more information ."}{"node_name": "EXIT_ON_CLOSE", "type": "field", "idx": 82064, "Desc": "the exit application default window close operation . attempting to set this on windows that support this , such as jframe , may throw a securityexception based on the securitymanager . it is recommended you only use this in an application ."}{"node_name": "NOPOS", "type": "field", "idx": 82066, "Desc": "used to signal that no position is available ."}{"node_name": "fileObject", "type": "field", "idx": 82122, "Desc": "the file object which all methods are delegated to ."}{"node_name": "fileManager", "type": "field", "idx": 82133, "Desc": "the file manager which all methods are delegated to ."}{"node_name": "extension", "type": "field", "idx": 82276, "Desc": "the extension which ( by convention ) is normally used for this kind of file object . if no convention exists , the empty string ( \"\") is used ."}{"node_name": "uri", "type": "field", "idx": 82284, "Desc": "a uri for this file object ."}{"node_name": "kind", "type": "field", "idx": 82285, "Desc": "the kind of this file object ."}{"node_name": "errorCode", "type": "field", "idx": 82362, "Desc": "the error code with which to create the systemexception ."}{"node_name": "XA_RBBASE", "type": "field", "idx": 82363, "Desc": "the inclusive lower bound of the rollback codes ."}{"node_name": "XA_RBROLLBACK", "type": "field", "idx": 82364, "Desc": "indicates that the rollback was caused by an unspecified reason ."}{"node_name": "XA_RBCOMMFAIL", "type": "field", "idx": 82365, "Desc": "indicates that the rollback was caused by a communication failure ."}{"node_name": "XA_RBDEADLOCK", "type": "field", "idx": 82366, "Desc": "a deadlock was detected ."}{"node_name": "XA_RBINTEGRITY", "type": "field", "idx": 82367, "Desc": "a condition that violates the integrity of the resource was detected ."}{"node_name": "XA_RBOTHER", "type": "field", "idx": 82368, "Desc": "the resource manager rolled back the transaction branch for a reason not on this list ."}{"node_name": "XA_RBPROTO", "type": "field", "idx": 82369, "Desc": "a protocol error occurred in the resource manager ."}{"node_name": "XA_RBTIMEOUT", "type": "field", "idx": 82370, "Desc": "a transaction branch took too long ."}{"node_name": "XA_RBTRANSIENT", "type": "field", "idx": 82371, "Desc": "may retry the transaction branch ."}{"node_name": "XA_RBEND", "type": "field", "idx": 82372, "Desc": "the inclusive upper bound of the rollback error code ."}{"node_name": "XA_NOMIGRATE", "type": "field", "idx": 82373, "Desc": "resumption must occur where the suspension occurred ."}{"node_name": "XA_HEURHAZ", "type": "field", "idx": 82374, "Desc": "the transaction branch may have been heuristically completed ."}{"node_name": "XA_HEURCOM", "type": "field", "idx": 82375, "Desc": "the transaction branch has been heuristically committed ."}{"node_name": "XA_HEURRB", "type": "field", "idx": 82376, "Desc": "the transaction branch has been heuristically rolled back ."}{"node_name": "XA_HEURMIX", "type": "field", "idx": 82377, "Desc": "the transaction branch has been heuristically committed and rolled back ."}{"node_name": "XA_RETRY", "type": "field", "idx": 82378, "Desc": "routine returned with no effect and may be reissued ."}{"node_name": "XA_RDONLY", "type": "field", "idx": 82379, "Desc": "the transaction branch was read-only and has been committed ."}{"node_name": "XAER_ASYNC", "type": "field", "idx": 82380, "Desc": "there is an asynchronous operation already outstanding ."}{"node_name": "XAER_RMERR", "type": "field", "idx": 82381, "Desc": "a resource manager error has occurred in the transaction branch ."}{"node_name": "XAER_NOTA", "type": "field", "idx": 82382, "Desc": "the xid is not valid ."}{"node_name": "XAER_INVAL", "type": "field", "idx": 82383, "Desc": "invalid arguments were given ."}{"node_name": "XAER_PROTO", "type": "field", "idx": 82384, "Desc": "routine was invoked in an inproper context ."}{"node_name": "XAER_RMFAIL", "type": "field", "idx": 82385, "Desc": "resource manager is unavailable ."}{"node_name": "XAER_DUPID", "type": "field", "idx": 82386, "Desc": "the xid already exists ."}{"node_name": "XAER_OUTSIDE", "type": "field", "idx": 82387, "Desc": "the resource manager is doing work outside a global transaction ."}{"node_name": "TMENDRSCAN", "type": "field", "idx": 82394, "Desc": "ends a recovery scan ."}{"node_name": "TMFAIL", "type": "field", "idx": 82395, "Desc": "disassociates the caller and marks the transaction branch rollback-only ."}{"node_name": "TMJOIN", "type": "field", "idx": 82396, "Desc": "caller is joining existing transaction branch ."}{"node_name": "TMNOFLAGS", "type": "field", "idx": 82397, "Desc": "use tmnoflags to indicate no flags value is selected ."}{"node_name": "TMONEPHASE", "type": "field", "idx": 82398, "Desc": "caller is using one-phase optimization ."}{"node_name": "TMRESUME", "type": "field", "idx": 82399, "Desc": "caller is resuming association with a suspended transaction branch ."}{"node_name": "TMSTARTRSCAN", "type": "field", "idx": 82400, "Desc": "starts a recovery scan ."}{"node_name": "TMSUCCESS", "type": "field", "idx": 82401, "Desc": "disassociates caller from a transaction branch ."}{"node_name": "TMSUSPEND", "type": "field", "idx": 82402, "Desc": "caller is suspending ( not ending ) its association with a transaction branch ."}{"node_name": "XA_RDONLY", "type": "field", "idx": 82403, "Desc": "the transaction branch has been read-only and has been committed ."}{"node_name": "XA_OK", "type": "field", "idx": 82404, "Desc": "the transaction work has been prepared normally ."}{"node_name": "MAXGTRIDSIZE", "type": "field", "idx": 82428, "Desc": "maximum number of bytes returned by getglobaltransactionid() ."}{"node_name": "MAXBQUALSIZE", "type": "field", "idx": 82429, "Desc": "maximum number of bytes returned by getbranchqualifier() ."}{"node_name": "INCLUSIVE", "type": "field", "idx": 82530, "Desc": "the canonical xml ( without comments ) canonicalization method algorithm uri ."}{"node_name": "INCLUSIVE_WITH_COMMENTS", "type": "field", "idx": 82531, "Desc": "the canonical xml with comments canonicalization method algorithm uri ."}{"node_name": "EXCLUSIVE", "type": "field", "idx": 82532, "Desc": "the exclusive canonical xml ( without comments ) canonicalization method algorithm uri ."}{"node_name": "EXCLUSIVE_WITH_COMMENTS", "type": "field", "idx": 82533, "Desc": "the exclusive canonical xml with comments canonicalization method algorithm uri ."}{"node_name": "INCLUSIVE_11", "type": "field", "idx": 82534, "Desc": "the canonical xml 1.1 ( without comments ) canonicalization method algorithm uri ."}{"node_name": "INCLUSIVE_11_WITH_COMMENTS", "type": "field", "idx": 82535, "Desc": "the canonical xml 1.1 with comments canonicalization method algorithm uri ."}{"node_name": "SHA1", "type": "field", "idx": 82538, "Desc": "the sha1 digest method algorithm uri ."}{"node_name": "SHA224", "type": "field", "idx": 82539, "Desc": "the sha224 digest method algorithm uri ."}{"node_name": "SHA256", "type": "field", "idx": 82540, "Desc": "the sha256 digest method algorithm uri ."}{"node_name": "SHA384", "type": "field", "idx": 82541, "Desc": "the sha384 digest method algorithm uri ."}{"node_name": "SHA512", "type": "field", "idx": 82542, "Desc": "the sha512 digest method algorithm uri ."}{"node_name": "RIPEMD160", "type": "field", "idx": 82543, "Desc": "the ripemd-160 digest method algorithm uri ."}{"node_name": "SHA3_224", "type": "field", "idx": 82544, "Desc": "the sha3-224 digest method algorithm uri ."}{"node_name": "SHA3_256", "type": "field", "idx": 82545, "Desc": "the sha3-256 digest method algorithm uri ."}{"node_name": "SHA3_384", "type": "field", "idx": 82546, "Desc": "the sha3-384 digest method algorithm uri ."}{"node_name": "SHA3_512", "type": "field", "idx": 82547, "Desc": "the sha3-512 digest method algorithm uri ."}{"node_name": "DSA_TYPE", "type": "field", "idx": 82636, "Desc": "uri identifying the dsa keyvalue keyinfo type : http://www.w3.org/2000/09/xmldsig#dsakeyvalue . this can be specified as the value of the type parameter of the retrievalmethod class to describe a remote dsakeyvalue structure ."}{"node_name": "RSA_TYPE", "type": "field", "idx": 82637, "Desc": "uri identifying the rsa keyvalue keyinfo type : http://www.w3.org/2000/09/xmldsig#rsakeyvalue . this can be specified as the value of the type parameter of the retrievalmethod class to describe a remote rsakeyvalue structure ."}{"node_name": "EC_TYPE", "type": "field", "idx": 82638, "Desc": "uri identifying the ec keyvalue keyinfo type : http://www.w3.org/2009/xmldsig11#eckeyvalue . this can be specified as the value of the type parameter of the retrievalmethod class to describe a remote eckeyvalue structure ."}{"node_name": "TYPE", "type": "field", "idx": 82641, "Desc": "uri identifying the pgpdata keyinfo type : http://www.w3.org/2000/09/xmldsig#pgpdata . this can be specified as the value of the type parameter of the retrievalmethod class to describe a remote pgpdata structure ."}{"node_name": "TYPE", "type": "field", "idx": 82651, "Desc": "uri identifying the x509data keyinfo type : http://www.w3.org/2000/09/xmldsig#x509data . this can be specified as the value of the type parameter of the retrievalmethod class to describe a remote x509data structure ."}{"node_name": "RAW_X509_CERTIFICATE_TYPE", "type": "field", "idx": 82652, "Desc": "uri identifying the binary ( asn.1 der ) x.509 certificate keyinfo type : http://www.w3.org/2000/09/xmldsig#rawx509certificate . this can be specified as the value of the type parameter of the retrievalmethod class to describe a remote x509 certificate ."}{"node_name": "TYPE", "type": "field", "idx": 82658, "Desc": "uri that identifies the manifest element ( this can be specified as the value of the type parameter of the reference class to identify the referent's type ) ."}{"node_name": "DSA_SHA1", "type": "field", "idx": 82672, "Desc": "the dsa-sha1 ( dss ) signature method algorithm uri ."}{"node_name": "DSA_SHA256", "type": "field", "idx": 82673, "Desc": "the dsa-sha256 ( dss ) signature method algorithm uri ."}{"node_name": "RSA_SHA1", "type": "field", "idx": 82674, "Desc": "the rsa-sha1 ( pkcs #1 ) signature method algorithm uri ."}{"node_name": "RSA_SHA224", "type": "field", "idx": 82675, "Desc": "the rsa-sha224 ( pkcs #1 ) signature method algorithm uri ."}{"node_name": "RSA_SHA256", "type": "field", "idx": 82676, "Desc": "the rsa-sha256 ( pkcs #1 ) signature method algorithm uri ."}{"node_name": "RSA_SHA384", "type": "field", "idx": 82677, "Desc": "the rsa-sha384 ( pkcs #1 ) signature method algorithm uri ."}{"node_name": "RSA_SHA512", "type": "field", "idx": 82678, "Desc": "the rsa-sha512 ( pkcs #1 ) signature method algorithm uri ."}{"node_name": "SHA1_RSA_MGF1", "type": "field", "idx": 82679, "Desc": "the sha1-rsa-mgf1 ( pkcs #1 ) signature method algorithm uri ."}{"node_name": "SHA224_RSA_MGF1", "type": "field", "idx": 82680, "Desc": "the sha224-rsa-mgf1 ( pkcs #1 ) signature method algorithm uri ."}{"node_name": "SHA256_RSA_MGF1", "type": "field", "idx": 82681, "Desc": "the sha256-rsa-mgf1 ( pkcs #1 ) signature method algorithm uri ."}{"node_name": "SHA384_RSA_MGF1", "type": "field", "idx": 82682, "Desc": "the sha384-rsa-mgf1 ( pkcs #1 ) signature method algorithm uri ."}{"node_name": "SHA512_RSA_MGF1", "type": "field", "idx": 82683, "Desc": "the sha512-rsa-mgf1 ( pkcs #1 ) signature method algorithm uri ."}{"node_name": "ECDSA_SHA1", "type": "field", "idx": 82684, "Desc": "the ecdsa-sha1 ( fips 180-4 ) signature method algorithm uri ."}{"node_name": "ECDSA_SHA224", "type": "field", "idx": 82685, "Desc": "the ecdsa-sha224 ( fips 180-4 ) signature method algorithm uri ."}{"node_name": "ECDSA_SHA256", "type": "field", "idx": 82686, "Desc": "the ecdsa-sha256 ( fips 180-4 ) signature method algorithm uri ."}{"node_name": "ECDSA_SHA384", "type": "field", "idx": 82687, "Desc": "the ecdsa-sha384 ( fips 180-4 ) signature method algorithm uri ."}{"node_name": "ECDSA_SHA512", "type": "field", "idx": 82688, "Desc": "the ecdsa-sha512 ( fips 180-4 ) signature method algorithm uri ."}{"node_name": "HMAC_SHA1", "type": "field", "idx": 82689, "Desc": "the hmac-sha1 mac signature method algorithm uri"}{"node_name": "HMAC_SHA224", "type": "field", "idx": 82690, "Desc": "the hmac-sha224 mac signature method algorithm uri ."}{"node_name": "HMAC_SHA256", "type": "field", "idx": 82691, "Desc": "the hmac-sha256 mac signature method algorithm uri ."}{"node_name": "HMAC_SHA384", "type": "field", "idx": 82692, "Desc": "the hmac-sha384 mac signature method algorithm uri ."}{"node_name": "HMAC_SHA512", "type": "field", "idx": 82693, "Desc": "the hmac-sha512 mac signature method algorithm uri ."}{"node_name": "TYPE", "type": "field", "idx": 82696, "Desc": "uri that identifies the signatureproperties element ( this can be specified as the value of the type parameter of the reference class to identify the referent's type ) ."}{"node_name": "DEFAULT", "type": "field", "idx": 82712, "Desc": "indicates the default namespace ( \" #default \") ."}{"node_name": "INTERSECT", "type": "field", "idx": 82736, "Desc": "the intersect filter operation ."}{"node_name": "SUBTRACT", "type": "field", "idx": 82737, "Desc": "the subtract filter operation ."}{"node_name": "UNION", "type": "field", "idx": 82738, "Desc": "the union filter operation ."}{"node_name": "BASE64", "type": "field", "idx": 82756, "Desc": "the base64 transform algorithm uri ."}{"node_name": "ENVELOPED", "type": "field", "idx": 82757, "Desc": "the enveloped signature transform algorithm uri ."}{"node_name": "XPATH", "type": "field", "idx": 82758, "Desc": "the xpath transform algorithm uri ."}{"node_name": "XPATH2", "type": "field", "idx": 82759, "Desc": "the xpath filter 2 transform algorithm uri ."}{"node_name": "XSLT", "type": "field", "idx": 82760, "Desc": "the xslt transform algorithm uri ."}{"node_name": "TYPE", "type": "field", "idx": 82809, "Desc": "uri that identifies the object element ( this can be specified as the value of the type parameter of the reference class to identify the referent's type ) ."}{"node_name": "XMLNS", "type": "field", "idx": 82815, "Desc": "the xml namespace uri of the w3c recommendation for xml-signature syntax and processing ."}{"node_name": "SIGN", "type": "field", "idx": 82956, "Desc": "a key for signing ."}{"node_name": "VERIFY", "type": "field", "idx": 82957, "Desc": "a key for verifying ."}{"node_name": "ENCRYPT", "type": "field", "idx": 82958, "Desc": "a key for encrypting ."}{"node_name": "DECRYPT", "type": "field", "idx": 82959, "Desc": "a key for decrypting ."}{"node_name": "JANUARY", "type": "field", "idx": 83092, "Desc": "value for first month of year ."}{"node_name": "FEBRUARY", "type": "field", "idx": 83093, "Desc": "value for second month of year ."}{"node_name": "MARCH", "type": "field", "idx": 83094, "Desc": "value for third month of year ."}{"node_name": "APRIL", "type": "field", "idx": 83095, "Desc": "value for fourth month of year ."}{"node_name": "MAY", "type": "field", "idx": 83096, "Desc": "value for fifth month of year ."}{"node_name": "JUNE", "type": "field", "idx": 83097, "Desc": "value for sixth month of year ."}{"node_name": "JULY", "type": "field", "idx": 83098, "Desc": "value for seventh month of year ."}{"node_name": "AUGUST", "type": "field", "idx": 83099, "Desc": "value for eighth month of year ."}{"node_name": "SEPTEMBER", "type": "field", "idx": 83100, "Desc": "value for ninth month of year ."}{"node_name": "OCTOBER", "type": "field", "idx": 83101, "Desc": "value for tenth month of year ."}{"node_name": "NOVEMBER", "type": "field", "idx": 83102, "Desc": "value for eleven month of year ."}{"node_name": "DECEMBER", "type": "field", "idx": 83103, "Desc": "value for twelve month of year ."}{"node_name": "LESSER", "type": "field", "idx": 83104, "Desc": "comparison result ."}{"node_name": "EQUAL", "type": "field", "idx": 83105, "Desc": "comparison result ."}{"node_name": "GREATER", "type": "field", "idx": 83106, "Desc": "comparison result ."}{"node_name": "INDETERMINATE", "type": "field", "idx": 83107, "Desc": "comparison result ."}{"node_name": "FIELD_UNDEFINED", "type": "field", "idx": 83108, "Desc": "designation that an \" int \" field is not set ."}{"node_name": "YEARS", "type": "field", "idx": 83109, "Desc": "a constant that represents the years field ."}{"node_name": "MONTHS", "type": "field", "idx": 83110, "Desc": "a constant that represents the months field ."}{"node_name": "DAYS", "type": "field", "idx": 83111, "Desc": "a constant that represents the days field ."}{"node_name": "HOURS", "type": "field", "idx": 83112, "Desc": "a constant that represents the hours field ."}{"node_name": "MINUTES", "type": "field", "idx": 83113, "Desc": "a constant that represents the minutes field ."}{"node_name": "SECONDS", "type": "field", "idx": 83114, "Desc": "a constant that represents the seconds field ."}{"node_name": "DATETIME", "type": "field", "idx": 83115, "Desc": "fully qualified name for w3c xml schema 1.0 datatype datetime ."}{"node_name": "TIME", "type": "field", "idx": 83116, "Desc": "fully qualified name for w3c xml schema 1.0 datatype time ."}{"node_name": "DATE", "type": "field", "idx": 83117, "Desc": "fully qualified name for w3c xml schema 1.0 datatype date ."}{"node_name": "GYEARMONTH", "type": "field", "idx": 83118, "Desc": "fully qualified name for w3c xml schema 1.0 datatype gyearmonth ."}{"node_name": "GMONTHDAY", "type": "field", "idx": 83119, "Desc": "fully qualified name for w3c xml schema 1.0 datatype gmonthday ."}{"node_name": "GYEAR", "type": "field", "idx": 83120, "Desc": "fully qualified name for w3c xml schema 1.0 datatype gyear ."}{"node_name": "GMONTH", "type": "field", "idx": 83121, "Desc": "fully qualified name for w3c xml schema 1.0 datatype gmonth ."}{"node_name": "GDAY", "type": "field", "idx": 83122, "Desc": "fully qualified name for w3c xml schema 1.0 datatype gday ."}{"node_name": "DURATION", "type": "field", "idx": 83123, "Desc": "fully qualified name for w3c xml schema datatype duration ."}{"node_name": "DURATION_DAYTIME", "type": "field", "idx": 83124, "Desc": "fully qualified name for xquery 1.0 and xpath 2.0 datatype daytimeduration ."}{"node_name": "DURATION_YEARMONTH", "type": "field", "idx": 83125, "Desc": "fully qualified name for xquery 1.0 and xpath 2.0 datatype yearmonthduration ."}{"node_name": "MAX_TIMEZONE_OFFSET", "type": "field", "idx": 83126, "Desc": "w3c xml schema max timezone offset is - 14:00 . zone offset is in minutes ."}{"node_name": "MIN_TIMEZONE_OFFSET", "type": "field", "idx": 83127, "Desc": "w3c xml schema min timezone offset is + 14:00 . zone offset is in minutes ."}{"node_name": "DATATYPEFACTORY_PROPERTY", "type": "field", "idx": 83129, "Desc": "default property name as defined in jsr 206 : java ( tm ) api for xml processing ( jaxp ) 1.3 . default value is javax.xml.datatype.datatypefactory ."}{"node_name": "DATATYPEFACTORY_IMPLEMENTATION_CLASS", "type": "field", "idx": 83130, "Desc": "default implementation class name as defined in jsr 206 : java ( tm ) api for xml processing ( jaxp ) 1.3 . implementers should specify the name of an appropriate class to be instantiated if no other implementation resolution mechanism succeeds . users should not refer to DATATYPEFACTORY_IMPLEMENTATION_CLASS ; it is intended only to document a factory implementation detail ."}{"node_name": "IS_NAMESPACE_AWARE", "type": "field", "idx": 83773, "Desc": "the property used to turn on / off namespace support , this is to support xml 1.0 documents , only the true setting must be supported"}{"node_name": "IS_VALIDATING", "type": "field", "idx": 83774, "Desc": "the property used to turn on / off implementation specific validation"}{"node_name": "IS_COALESCING", "type": "field", "idx": 83775, "Desc": "the property that requires the parser to coalesce adjacent character data sections"}{"node_name": "IS_REPLACING_ENTITY_REFERENCES", "type": "field", "idx": 83776, "Desc": "requires the parser to replace internal entity references with their replacement text and report them as characters"}{"node_name": "IS_SUPPORTING_EXTERNAL_ENTITIES", "type": "field", "idx": 83777, "Desc": "the property that requires the parser to resolve external parsed entities"}{"node_name": "SUPPORT_DTD", "type": "field", "idx": 83778, "Desc": "the property that requires the parser to support dtds"}{"node_name": "REPORTER", "type": "field", "idx": 83779, "Desc": "the property used to set / get the implementation of the xmlreporter interface"}{"node_name": "RESOLVER", "type": "field", "idx": 83780, "Desc": "the property used to set / get the implementation of the xmlresolver"}{"node_name": "ALLOCATOR", "type": "field", "idx": 83781, "Desc": "the property used to set / get the implementation of the allocator"}{"node_name": "IS_REPAIRING_NAMESPACES", "type": "field", "idx": 83844, "Desc": "property used to set prefix defaulting on the output side"}{"node_name": "START_ELEMENT", "type": "field", "idx": 83890, "Desc": "indicates an event is a start element"}{"node_name": "END_ELEMENT", "type": "field", "idx": 83891, "Desc": "indicates an event is an end element"}{"node_name": "PROCESSING_INSTRUCTION", "type": "field", "idx": 83892, "Desc": "indicates an event is a processing instruction"}{"node_name": "CHARACTERS", "type": "field", "idx": 83893, "Desc": "indicates an event is characters"}{"node_name": "COMMENT", "type": "field", "idx": 83894, "Desc": "indicates an event is a comment"}{"node_name": "SPACE", "type": "field", "idx": 83895, "Desc": "the characters are white space ( see [ xml ] , 2.10 \" white space handling \") . events are only reported as space if they are ignorable white space . otherwise they are reported as characters ."}{"node_name": "START_DOCUMENT", "type": "field", "idx": 83896, "Desc": "indicates an event is a start document"}{"node_name": "END_DOCUMENT", "type": "field", "idx": 83897, "Desc": "indicates an event is an end document"}{"node_name": "ENTITY_REFERENCE", "type": "field", "idx": 83898, "Desc": "indicates an event is an entity reference"}{"node_name": "ATTRIBUTE", "type": "field", "idx": 83899, "Desc": "indicates an event is an attribute"}{"node_name": "DTD", "type": "field", "idx": 83900, "Desc": "indicates an event is a dtd"}{"node_name": "CDATA", "type": "field", "idx": 83901, "Desc": "indicates an event is a cdata section"}{"node_name": "NAMESPACE", "type": "field", "idx": 83902, "Desc": "indicates the event is a namespace declaration"}{"node_name": "NOTATION_DECLARATION", "type": "field", "idx": 83903, "Desc": "indicates a notation"}{"node_name": "ENTITY_DECLARATION", "type": "field", "idx": 83904, "Desc": "indicates a entity declaration"}{"node_name": "nested", "type": "field", "idx": 83906, "Desc": ""}{"node_name": "location", "type": "field", "idx": 83907, "Desc": ""}{"node_name": "FEATURE", "type": "field", "idx": 84070, "Desc": "if transformerfactory.getfeature ( java.lang.string ) returns true when passed this value as an argument , the transformer supports result output of this type ."}{"node_name": "FEATURE", "type": "field", "idx": 84094, "Desc": "if transformerfactory.getfeature ( java.lang.string ) returns true when passed this value as an argument , the transformer supports source input of this type ."}{"node_name": "METHOD", "type": "field", "idx": 84116, "Desc": "method = \" xml \" | \" html \" | \" text \" | expanded name . the value of the method property identifies the overall method that should be used for outputting the result tree . other non-namespaced values may be used , such as \" xhtml \" , but , if accepted , the handling of such values is implementation defined . if any of the method values are not accepted and are not namespace qualified , then transformer.setoutputproperty ( java.lang.string , java.lang.string ) or transformer.setoutputproperties ( java.util.properties ) will throw a illegalargumentexception ."}{"node_name": "VERSION", "type": "field", "idx": 84117, "Desc": "version = nmtoken . version specifies the version of the output method . when the output method is \" xml \" , the version value specifies the version of xml to be used for outputting the result tree . the default value for the xml output method is 1.0 . when the output method is \" html \" , the version value indicates the version of the html . the default value for the xml output method is 4.0 , which specifies that the result should be output as html conforming to the html 4.0 recommendation [ html ] . if the output method is \" text \" , the version property is ignored ."}{"node_name": "ENCODING", "type": "field", "idx": 84118, "Desc": "encoding = string . encoding specifies the preferred character encoding that the transformer should use to encode sequences of characters as sequences of bytes . the value of the encoding property should be treated case-insensitively . the value must only contain characters in the range #x21 to #x7e ( i.e. , printable ascii characters ) . the value should either be a charset registered with the internet assigned numbers authority [ iana ] , [ rfc2278 ] or start with x- ."}{"node_name": "OMIT_XML_DECLARATION", "type": "field", "idx": 84119, "Desc": "omit-xml-declaration = \" yes \" | \" no \" . omit-xml-declaration specifies whether the xslt processor should output an xml declaration ; the value must be yes or no ."}{"node_name": "STANDALONE", "type": "field", "idx": 84120, "Desc": "standalone = \" yes \" | \" no \" . standalone specifies whether the transformer should output a standalone document declaration ; the value must be yes or no ."}{"node_name": "DOCTYPE_PUBLIC", "type": "field", "idx": 84121, "Desc": "doctype-public = string . see the documentation for the doctype_system property for a description of what the value of the key should be ."}{"node_name": "DOCTYPE_SYSTEM", "type": "field", "idx": 84122, "Desc": "doctype-system = string . doctype-system specifies the system identifier to be used in the document type declaration . if the doctype-system property is specified , the xml output method should output a document type declaration immediately before the first element . the name following < ! doctype should be the name of the first element . if doctype-public property is also specified , then the xml output method should output public followed by the public identifier and then the system identifier ; otherwise , it should output system followed by the system identifier . the internal subset should be empty . the value of the doctype-public property should be ignored unless the doctype-system property is specified . if the doctype-public or doctype-system properties are specified , then the html output method should output a document type declaration immediately before the first element . the name following < ! doctype should be html or html . if the doctype-public property is specified , then the output method should output public followed by the specified public identifier ; if the doctype-system property is also specified , it should also output the specified system identifier following the public identifier . if the doctype-system property is specified but the doctype-public property is not specified , then the output method should output system followed by the specified system identifier . doctype-system specifies the system identifier to be used in the document type declaration ."}{"node_name": "CDATA_SECTION_ELEMENTS", "type": "field", "idx": 84123, "Desc": "cdata-section-elements = expanded names . cdata-section-elements specifies a whitespace delimited list of the names of elements whose text node children should be output using cdata sections . note that these names must use the format described in the section qualfied name representation in javax.xml.transform ."}{"node_name": "INDENT", "type": "field", "idx": 84124, "Desc": "indent = \" yes \" | \" no \" . indent specifies whether the transformer may add additional whitespace when outputting the result tree ; the value must be yes or no ."}{"node_name": "MEDIA_TYPE", "type": "field", "idx": 84125, "Desc": "media-type = string . media-type specifies the media type ( mime content type ) of the data that results from outputting the result tree . the charset parameter should not be specified explicitly ; instead , when the top-level media type is text , a charset parameter should be added according to the character encoding actually used by the output method ."}{"node_name": "PI_DISABLE_OUTPUT_ESCAPING", "type": "field", "idx": 84127, "Desc": "the name of the processing instruction that is sent if the result tree disables output escaping . normally , result tree serialization escapes& and < ( and possibly other characters ) when outputting text nodes . this ensures that the output is well-formed xml . however , it is sometimes convenient to be able to produce output that is almost , but not quite well-formed xml ; for example , the output may include ill-formed sections that will be transformed into well-formed xml by a subsequent non-xml aware process . if a processing instruction is sent with this name , serialization should be output without any escaping . result dom trees may also have pi_disable_output_escaping and pi_enable_output_escaping inserted into the tree ."}{"node_name": "PI_ENABLE_OUTPUT_ESCAPING", "type": "field", "idx": 84128, "Desc": "the name of the processing instruction that is sent if the result tree enables output escaping at some point after having received a pi_disable_output_escaping processing instruction ."}{"node_name": "FEATURE", "type": "field", "idx": 84133, "Desc": "if transformerfactory.getfeature ( java.lang.string ) returns true when passed this value as an argument , the transformer supports result output of this type ."}{"node_name": "FEATURE", "type": "field", "idx": 84147, "Desc": "if transformerfactory.getfeature ( java.lang.string ) returns true when passed this value as an argument , the transformer supports source input of this type ."}{"node_name": "FEATURE", "type": "field", "idx": 84167, "Desc": "if transformerfactory.getfeature ( java.lang.string ) returns true when passed this value as an argument , the transformerfactory returned from transformerfactory.newinstance() may be safely cast to a saxtransformerfactory ."}{"node_name": "FEATURE_XMLFILTER", "type": "field", "idx": 84168, "Desc": "if transformerfactory.getfeature ( java.lang.string ) returns true when passed this value as an argument , the newxmlfilter ( source src ) and newxmlfilter ( templates templates ) methods are supported ."}{"node_name": "FEATURE", "type": "field", "idx": 84203, "Desc": "if transformerfactory.getfeature ( string name ) returns true when passed this value as an argument , the transformer supports result output of this type ."}{"node_name": "FEATURE", "type": "field", "idx": 84214, "Desc": "if transformerfactory.getfeature ( string name ) returns true when passed this value as an argument , the transformer supports source input of this type ."}{"node_name": "FEATURE", "type": "field", "idx": 84226, "Desc": "if transformerfactory.getfeature ( java.lang.string ) returns true when passed this value as an argument , the transformer supports result output of this type ."}{"node_name": "FEATURE", "type": "field", "idx": 84248, "Desc": "if transformerfactory.getfeature ( java.lang.string ) returns true when passed this value as an argument , the transformer supports source input of this type ."}{"node_name": "NULL_NS_URI", "type": "field", "idx": 84511, "Desc": "namespace uri to use to represent that there is no namespace . defined by the namespace specification to be \"\" ."}{"node_name": "DEFAULT_NS_PREFIX", "type": "field", "idx": 84512, "Desc": "prefix to use to represent the default xml namespace . defined by the xml specification to be \"\" ."}{"node_name": "XML_NS_URI", "type": "field", "idx": 84513, "Desc": "the official xml namespace name uri . defined by the xml specification to be \" http://www.w3.org/xml/1998/namespace \" ."}{"node_name": "XML_NS_PREFIX", "type": "field", "idx": 84514, "Desc": "the official xml namespace prefix . defined by the xml specification to be \" xml \" ."}{"node_name": "XMLNS_ATTRIBUTE_NS_URI", "type": "field", "idx": 84515, "Desc": "the official xml attribute used for specifying xml namespace declarations , xmlconstants.xmlns_attribute , namespace name uri . defined by the xml specification to be \" http://www.w3.org/2000/xmlns / \" ."}{"node_name": "XMLNS_ATTRIBUTE", "type": "field", "idx": 84516, "Desc": "the official xml attribute used for specifying xml namespace declarations . it is not valid to use as a prefix . defined by the xml specification to be \" xmlns \" ."}{"node_name": "W3C_XML_SCHEMA_NS_URI", "type": "field", "idx": 84517, "Desc": "w3c xml schema namespace uri . defined to be \" http://www.w3.org/2001/xmlschema \" ."}{"node_name": "W3C_XML_SCHEMA_INSTANCE_NS_URI", "type": "field", "idx": 84518, "Desc": "w3c xml schema instance namespace uri . defined to be \" http://www.w3.org/2001/xmlschema-instance \" ."}{"node_name": "W3C_XPATH_DATATYPE_NS_URI", "type": "field", "idx": 84519, "Desc": "w3c xpath datatype namespace uri . defined to be \" http://www.w3.org/2003/11/xpath-datatypes \" ."}{"node_name": "XML_DTD_NS_URI", "type": "field", "idx": 84520, "Desc": "xml document type declaration namespace uri as an arbitrary value . since not formally defined by any existing standard , arbitrarily define to be \" http://www.w3.org/tr/rec-xml \" ."}{"node_name": "RELAXNG_NS_URI", "type": "field", "idx": 84521, "Desc": "relax ng namespace uri . defined to be \" http://relaxng.org/ns/structure/1.0 \" ."}{"node_name": "FEATURE_SECURE_PROCESSING", "type": "field", "idx": 84522, "Desc": "feature for secure processing . true instructs the implementation to process xml securely . this may set limits on xml constructs to avoid conditions such as denial of service attacks . false instructs the implementation to process xml in accordance with the xml specifications ignoring security issues such as limits on xml constructs to avoid conditions such as denial of service attacks ."}{"node_name": "ACCESS_EXTERNAL_DTD", "type": "field", "idx": 84523, "Desc": "property : accessexternaldtd restrict access to external dtds and external entity references to the protocols specified . if access is denied due to the restriction of this property , a runtime exception that is specific to the context is thrown . in the case of saxparser for example , saxexception is thrown . value : a list of protocols separated by comma . a protocol is the scheme portion of a uri , or in the case of the jar protocol , \" jar \" plus the scheme portion separated by colon . a scheme is defined as : scheme = alpha * ( alpha | digit | \" + \" | \" - \" | \" . \" ) where alpha = a-z and a-z . and the jar protocol : jar [: scheme ] protocols including the keyword \" jar \" are case-insensitive . any whitespaces as defined by character.isspacechar ( char ) in the value will be ignored . examples of protocols are file , http , jar : file . default value : the default value is implementation specific and therefore not specified . the following options are provided for consideration : an empty string to deny all access to external references ; a specific protocol , such as file , to give permission to only the protocol ; the keyword \" all \" to grant permission to all protocols . when feature_secure_processing is enabled , it is recommended that implementations restrict external connections by default , though this may cause problems for applications that process xml / xsd / xsl with external references . granting all access : the keyword \" all \" grants permission to all protocols . system property : the value of this property can be set or overridden by system property javax.xml.accessexternaldtd . jaxp.properties : this configuration file is in standard properties format and typically located in the conf directory of the java installation . if the file exists and the system property is specified , its value will be used to override the default of the property ."}{"node_name": "ACCESS_EXTERNAL_SCHEMA", "type": "field", "idx": 84524, "Desc": "property : accessexternalschema restrict access to the protocols specified for external reference set by the schemalocation attribute , import and include element . if access is denied due to the restriction of this property , a runtime exception that is specific to the context is thrown . in the case of schemafactory for example , org.xml.sax.saxexception is thrown . value : a list of protocols separated by comma . a protocol is the scheme portion of a uri , or in the case of the jar protocol , \" jar \" plus the scheme portion separated by colon . a scheme is defined as : scheme = alpha * ( alpha | digit | \" + \" | \" - \" | \" . \" ) where alpha = a-z and a-z . and the jar protocol : jar [: scheme ] protocols including the keyword \" jar \" are case-insensitive . any whitespaces as defined by character.isspacechar ( char ) in the value will be ignored . examples of protocols are file , http , jar : file . default value : the default value is implementation specific and therefore not specified . the following options are provided for consideration : an empty string to deny all access to external references ; a specific protocol , such as file , to give permission to only the protocol ; the keyword \" all \" to grant permission to all protocols . when feature_secure_processing is enabled , it is recommended that implementations restrict external connections by default , though this may cause problems for applications that process xml / xsd / xsl with external references . granting all access : the keyword \" all \" grants permission to all protocols . system property : the value of this property can be set or overridden by system property javax.xml.accessexternalschema jaxp.properties : this configuration file is in standard properties format and typically located in the conf directory of the java installation . if the file exists and the system property is specified , its value will be used to override the default of the property ."}{"node_name": "ACCESS_EXTERNAL_STYLESHEET", "type": "field", "idx": 84525, "Desc": "property : accessexternalstylesheet restrict access to the protocols specified for external references set by the stylesheet processing instruction , import and include element , and document function . if access is denied due to the restriction of this property , a runtime exception that is specific to the context is thrown . in the case of constructing new transformer for example , transformerconfigurationexception will be thrown by the transformerfactory . value : a list of protocols separated by comma . a protocol is the scheme portion of a uri , or in the case of the jar protocol , \" jar \" plus the scheme portion separated by colon . a scheme is defined as : scheme = alpha * ( alpha | digit | \" + \" | \" - \" | \" . \" ) where alpha = a-z and a-z . and the jar protocol : jar [: scheme ] protocols including the keyword \" jar \" are case-insensitive . any whitespaces as defined by character.isspacechar ( char ) in the value will be ignored . examples of protocols are file , http , jar : file . default value : the default value is implementation specific and therefore not specified . the following options are provided for consideration : an empty string to deny all access to external references ; a specific protocol , such as file , to give permission to only the protocol ; the keyword \" all \" to grant permission to all protocols . when feature_secure_processing is enabled , it is recommended that implementations restrict external connections by default , though this may cause problems for applications that process xml / xsd / xsl with external references . granting all access : the keyword \" all \" grants permission to all protocols . system property : the value of this property can be set or overridden by system property javax.xml.accessexternalstylesheet jaxp.properties : this configuration file is in standard properties format and typically located in the conf directory of the java installation . if the file exists and the system property is specified , its value will be used to override the default of the property ."}{"node_name": "USE_CATALOG", "type": "field", "idx": 84526, "Desc": "feature : usecatalog instructs xml processors to use xml catalogs to resolve entity references . catalogs may be set through jaxp factories , system properties , or jaxp.properties by using the javax.xml.catalog.files property defined in catalogfeatures . the following code enables catalog on sax parser : saxparserfactory spf = saxparserfactory.newinstance() ; spf.setfeature ( xmlconstants.use_catalog , true ); saxparser parser = spf.newsaxparser() ; parser.setproperty ( catalogfeatures.feature.files.getpropertyname() , \" catalog.xml \") ; value : a boolean . if the value is true , and a catalog is set , the xml parser will resolve external references using catalogresolver . if the value is false , xml catalog is ignored even if one is set . the default value is true . system property : the value of this property can be set or overridden by system property javax.xml.usecatalog jaxp.properties : this configuration file is in standard properties format and typically located in the conf directory of the java installation . if the file exists and the system property is specified , its value will be used to override the default value of the property ."}{"node_name": "NUMBER", "type": "field", "idx": 84569, "Desc": "the xpath 1.0 number data type . maps to java double ."}{"node_name": "STRING", "type": "field", "idx": 84570, "Desc": "the xpath 1.0 string data type . maps to java string ."}{"node_name": "BOOLEAN", "type": "field", "idx": 84571, "Desc": "the xpath 1.0 boolean data type . maps to java boolean ."}{"node_name": "NODESET", "type": "field", "idx": 84572, "Desc": "the xpath 1.0 nodeset data type . maps to java nodelist ."}{"node_name": "NODE", "type": "field", "idx": 84573, "Desc": "the xpath 1.0 nodeset data type . maps to java node ."}{"node_name": "DOM_OBJECT_MODEL", "type": "field", "idx": 84574, "Desc": "the uri for the dom object model , \" http://java.sun.com/jaxp/xpath/dom \" ."}{"node_name": "DEFAULT_PROPERTY_NAME", "type": "field", "idx": 84622, "Desc": "the default property name according to the jaxp spec ."}{"node_name": "DEFAULT_OBJECT_MODEL_URI", "type": "field", "idx": 84623, "Desc": "default object model uri ."}{"node_name": "AUTOLOAD_PERMISSION_NAME", "type": "field", "idx": 84830, "Desc": "the name of the runtime permission for creating instances of this class . granting this permission to a language runtime allows it to export its linkers for automatic loading into other language runtimes ."}{"node_name": "PUBLIC", "type": "field", "idx": 84923, "Desc": "a canonical lookup object that wraps methodhandles.publiclookup() ."}{"node_name": "GET_LOOKUP_PERMISSION_NAME", "type": "field", "idx": 85061, "Desc": "the name of a runtime permission required to successfully invoke the getlookup() method ."}{"node_name": "BITS", "type": "field", "idx": 85288, "Desc": "unit for bits"}{"node_name": "BYTES", "type": "field", "idx": 85289, "Desc": "unit for bytes"}{"node_name": "NAME", "type": "field", "idx": 85292, "Desc": "setting name \" enabled \" , signifies that the event should be recorded ."}{"node_name": "NAME", "type": "field", "idx": 85380, "Desc": "settings name \" period \" for configuring periodic events"}{"node_name": "NAME", "type": "field", "idx": 85461, "Desc": "settings name \" stacktrace \" to be used for enabling event stack traces ."}{"node_name": "NAME", "type": "field", "idx": 85463, "Desc": "setting name \" threshold \" for configuring event thresholds ."}{"node_name": "TICKS", "type": "field", "idx": 85465, "Desc": "unit for ticks ."}{"node_name": "SECONDS", "type": "field", "idx": 85466, "Desc": "unit for seconds ."}{"node_name": "MILLISECONDS", "type": "field", "idx": 85467, "Desc": "unit for milliseconds ."}{"node_name": "NANOSECONDS", "type": "field", "idx": 85468, "Desc": "unit for nanoseconds ."}{"node_name": "MICROSECONDS", "type": "field", "idx": 85469, "Desc": "unit for microseconds ."}{"node_name": "MILLISECONDS_SINCE_EPOCH", "type": "field", "idx": 85471, "Desc": "the unit for the difference , measured in milliseconds , between the current time and midnight , january 1 , 1970 utc ."}{"node_name": "TICKS", "type": "field", "idx": 85472, "Desc": "the unit for the number of ticks that have transpired since some arbitrary starting date ."}{"node_name": "NOPOS", "type": "field", "idx": 85497, "Desc": "used to signal that no position is available ."}{"node_name": "PARAM_REMOTE_AGENT", "type": "field", "idx": 85549, "Desc": "the remote agent to launch ."}{"node_name": "PARAM_TIMEOUT", "type": "field", "idx": 85550, "Desc": "milliseconds before connect timeout ."}{"node_name": "PARAM_HOST_NAME", "type": "field", "idx": 85551, "Desc": "the local hostname to connect to ."}{"node_name": "PARAM_LAUNCH", "type": "field", "idx": 85552, "Desc": "should jdi-controlled launching be used ?"}{"node_name": "MXBEAN_NAME", "type": "field", "idx": 85900, "Desc": "string representation of the objectname for the flightrecordermxbean ."}{"node_name": "SO_FLOW_SLA", "type": "field", "idx": 86044, "Desc": "service level properties . when a security manager is installed , setting or getting this option requires a networkpermission ( \" setoption.so_flow_sla \") or \" getoption.so_flow_sla \" respectively ."}{"node_name": "TCP_QUICKACK", "type": "field", "idx": 86045, "Desc": "disable delayed acknowledgements . this socket option can be used to reduce or disable delayed acknowledgments ( acks ) . when tcp_quickack is enabled , acks are sent immediately , rather than delayed if needed in accordance to normal tcp operation . this option is not permanent , it only enables a switch to or from tcp_quickack mode . subsequent operations of the tcp protocol will once again disable / enable tcp_quickack mode depending on internal protocol processing and factors such as delayed ack timeouts occurring and data transfer , therefore this option needs to be set with setoption after each operation of tcp on a given socket . the value of this socket option is a boolean that represents whether the option is enabled or disabled . the socket option is specific to stream-oriented sockets using the tcp / ip protocol . the exact semantics of this socket option are socket type and system dependent ."}{"node_name": "TCP_KEEPIDLE", "type": "field", "idx": 86046, "Desc": "keep-alive idle time . the value of this socket option is an integer that is the number of seconds of idle time before keep-alive initiates a probe . the socket option is specific to stream-oriented sockets using the tcp / ip protocol . the exact semantics of this socket option are system dependent . when the so_keepalive option is enabled , tcp probes a connection that has been idle for some amount of time . the default value for this idle period is system dependent , but is typically 2 hours . the tcp_keepidle option can be used to affect this value for a given socket ."}{"node_name": "TCP_KEEPINTERVAL", "type": "field", "idx": 86047, "Desc": "keep-alive retransmission interval time . the value of this socket option is an integer that is the number of seconds to wait before retransmitting a keep-alive probe . the socket option is specific to stream-oriented sockets using the tcp / ip protocol . the exact semantics of this socket option are system dependent . when the so_keepalive option is enabled , tcp probes a connection that has been idle for some amount of time . if the remote system does not respond to a keep-alive probe , tcp retransmits the probe after some amount of time . the default value for this retransmission interval is system dependent , but is typically 75 seconds . the tcp_keepinterval option can be used to affect this value for a given socket ."}{"node_name": "TCP_KEEPCOUNT", "type": "field", "idx": 86048, "Desc": "keep-alive retransmission maximum limit . the value of this socket option is an integer that is the maximum number of keep-alive probes to be sent . the socket option is specific to stream-oriented sockets using the tcp / ip protocol . the exact semantics of this socket option are system dependent . when the so_keepalive option is enabled , tcp probes a connection that has been idle for some amount of time . if the remote system does not respond to a keep-alive probe , tcp retransmits the probe a certain number of times before a connection is considered to be broken . the default value for this keep-alive probe retransmit limit is system dependent , but is typically 8 . the tcp_keepcount option can be used to affect this value for a given socket ."}{"node_name": "UNSET", "type": "field", "idx": 86056, "Desc": ""}{"node_name": "NORMAL_PRIORITY", "type": "field", "idx": 86057, "Desc": ""}{"node_name": "HIGH_PRIORITY", "type": "field", "idx": 86058, "Desc": ""}{"node_name": "DEFAULT_LIFETIME", "type": "field", "idx": 86184, "Desc": "a lifetime constant representing the default context lifetime . this value is set to 0 ."}{"node_name": "INDEFINITE_LIFETIME", "type": "field", "idx": 86185, "Desc": "a lifetime constant representing indefinite context lifetime . this value must is set to the maximum integer value in java - integer.max_value ."}{"node_name": "INITIATE_AND_ACCEPT", "type": "field", "idx": 86258, "Desc": "credential usage flag requesting that it be usable for both context initiation and acceptance ."}{"node_name": "INITIATE_ONLY", "type": "field", "idx": 86259, "Desc": "credential usage flag requesting that it be usable for context initiation only ."}{"node_name": "ACCEPT_ONLY", "type": "field", "idx": 86260, "Desc": "credential usage flag requesting that it be usable for context acceptance only ."}{"node_name": "DEFAULT_LIFETIME", "type": "field", "idx": 86261, "Desc": "a lifetime constant representing the default credential lifetime . this value it set to 0 ."}{"node_name": "INDEFINITE_LIFETIME", "type": "field", "idx": 86262, "Desc": "a lifetime constant representing indefinite credential lifetime . this value must is set to the maximum integer value in java - integer.max_value ."}{"node_name": "BAD_BINDINGS", "type": "field", "idx": 86286, "Desc": "channel bindings mismatch ."}{"node_name": "BAD_MECH", "type": "field", "idx": 86287, "Desc": "unsupported mechanism requested ."}{"node_name": "BAD_NAME", "type": "field", "idx": 86288, "Desc": "invalid name provided ."}{"node_name": "BAD_NAMETYPE", "type": "field", "idx": 86289, "Desc": "name of unsupported type provided ."}{"node_name": "BAD_STATUS", "type": "field", "idx": 86290, "Desc": "invalid status code ."}{"node_name": "BAD_MIC", "type": "field", "idx": 86291, "Desc": "token had invalid integrity check ."}{"node_name": "CONTEXT_EXPIRED", "type": "field", "idx": 86292, "Desc": "security context expired ."}{"node_name": "CREDENTIALS_EXPIRED", "type": "field", "idx": 86293, "Desc": "expired credentials ."}{"node_name": "DEFECTIVE_CREDENTIAL", "type": "field", "idx": 86294, "Desc": "defective credentials ."}{"node_name": "DEFECTIVE_TOKEN", "type": "field", "idx": 86295, "Desc": "defective token ."}{"node_name": "FAILURE", "type": "field", "idx": 86296, "Desc": "general failure , unspecified at gss-api level ."}{"node_name": "NO_CONTEXT", "type": "field", "idx": 86297, "Desc": "invalid security context ."}{"node_name": "NO_CRED", "type": "field", "idx": 86298, "Desc": "invalid credentials ."}{"node_name": "BAD_QOP", "type": "field", "idx": 86299, "Desc": "unsupported qop value ."}{"node_name": "UNAUTHORIZED", "type": "field", "idx": 86300, "Desc": "operation unauthorized ."}{"node_name": "UNAVAILABLE", "type": "field", "idx": 86301, "Desc": "operation unavailable ."}{"node_name": "DUPLICATE_ELEMENT", "type": "field", "idx": 86302, "Desc": "duplicate credential element requested ."}{"node_name": "NAME_NOT_MN", "type": "field", "idx": 86303, "Desc": "name contains multi-mechanism elements ."}{"node_name": "DUPLICATE_TOKEN", "type": "field", "idx": 86304, "Desc": "the token was a duplicate of an earlier token . this is a fatal error code that may occur during context establishment . it is not used to indicate supplementary status values . the messageprop object is used for that purpose ."}{"node_name": "OLD_TOKEN", "type": "field", "idx": 86305, "Desc": "the token's validity period has expired . this is a fatal error code that may occur during context establishment . it is not used to indicate supplementary status values . the messageprop object is used for that purpose ."}{"node_name": "UNSEQ_TOKEN", "type": "field", "idx": 86306, "Desc": "a later token has already been processed . this is a fatal error code that may occur during context establishment . it is not used to indicate supplementary status values . the messageprop object is used for that purpose ."}{"node_name": "GAP_TOKEN", "type": "field", "idx": 86307, "Desc": "an expected per-message token was not received . this is a fatal error code that may occur during context establishment . it is not used to indicate supplementary status values . the messageprop object is used for that purpose ."}{"node_name": "NT_HOSTBASED_SERVICE", "type": "field", "idx": 86373, "Desc": "oid indicating a host-based service name form . it is used to represent services associated with host computers . this name form is constructed using two elements , \" service \" and \" hostname \" , as follows : service @hostname . it represents the following oid value : { iso ( 1 ) member-body ( 2 ) united states (8 40 ) mit ( 113554 ) infosys ( 1 ) gssapi ( 2 ) generic ( 1 ) service_name ( 4 ) }"}{"node_name": "NT_USER_NAME", "type": "field", "idx": 86374, "Desc": "name type to indicate a named user on a local system . it represents the following oid value : { iso ( 1 ) member-body ( 2 ) united states (8 40 ) mit ( 113554 ) infosys ( 1 ) gssapi ( 2 ) generic ( 1 ) user_name ( 1 ) }"}{"node_name": "NT_MACHINE_UID_NAME", "type": "field", "idx": 86375, "Desc": "name type to indicate a numeric user identifier corresponding to a user on a local system . ( e.g. uid ) . it represents the following oid value : { iso ( 1 ) member-body ( 2 ) united states (8 40 ) mit ( 113554 ) infosys ( 1 ) gssapi ( 2 ) generic ( 1 ) machine_uid_name ( 2 ) }"}{"node_name": "NT_STRING_UID_NAME", "type": "field", "idx": 86376, "Desc": "name type to indicate a string of digits representing the numeric user identifier of a user on a local system . it represents the following oid value : { iso ( 1 ) member-body ( 2 ) united states (8 40 ) mit ( 113554 ) infosys ( 1 ) gssapi ( 2 ) generic ( 1 ) string_uid_name ( 3 ) }"}{"node_name": "NT_ANONYMOUS", "type": "field", "idx": 86377, "Desc": "name type for representing an anonymous entity . it represents the following oid value : { 1 ( iso ) , 3 ( org ) , 6 ( dod ) , 1 ( internet ) , 5 ( security ) , 6 ( nametypes ) , 3 ( gss-anonymous-name ) }"}{"node_name": "NT_EXPORT_NAME", "type": "field", "idx": 86378, "Desc": "name type used to indicate an exported name produced by the export method . it represents the following oid value : { 1 ( iso ) , 3 ( org ) , 6 ( dod ) , 1 ( internet ) , 5 ( security ) , 6 ( nametypes ) , 4 ( gss-api-exported-name ) }"}{"node_name": "PROPERTY", "type": "field", "idx": 86439, "Desc": "the system property to specify the domimplementationsource class names ."}{"node_name": "CSS_UNKNOWN", "type": "field", "idx": 86739, "Desc": "the value is not a recognized css2 value . the value can only be obtained by using the csstext attribute ."}{"node_name": "CSS_NUMBER", "type": "field", "idx": 86740, "Desc": "the value is a simple number . the value can be obtained by using the getfloatvalue method ."}{"node_name": "CSS_PERCENTAGE", "type": "field", "idx": 86741, "Desc": "the value is a percentage . the value can be obtained by using the getfloatvalue method ."}{"node_name": "CSS_EMS", "type": "field", "idx": 86742, "Desc": "the value is a length ( ems ) . the value can be obtained by using the getfloatvalue method ."}{"node_name": "CSS_EXS", "type": "field", "idx": 86743, "Desc": "the value is a length ( exs ) . the value can be obtained by using the getfloatvalue method ."}{"node_name": "CSS_PX", "type": "field", "idx": 86744, "Desc": "the value is a length ( px ) . the value can be obtained by using the getfloatvalue method ."}{"node_name": "CSS_CM", "type": "field", "idx": 86745, "Desc": "the value is a length ( cm ) . the value can be obtained by using the getfloatvalue method ."}{"node_name": "CSS_MM", "type": "field", "idx": 86746, "Desc": "the value is a length ( mm ) . the value can be obtained by using the getfloatvalue method ."}{"node_name": "CSS_IN", "type": "field", "idx": 86747, "Desc": "the value is a length ( in ) . the value can be obtained by using the getfloatvalue method ."}{"node_name": "CSS_PT", "type": "field", "idx": 86748, "Desc": "the value is a length ( pt ) . the value can be obtained by using the getfloatvalue method ."}{"node_name": "CSS_PC", "type": "field", "idx": 86749, "Desc": "the value is a length ( pc ) . the value can be obtained by using the getfloatvalue method ."}{"node_name": "CSS_DEG", "type": "field", "idx": 86750, "Desc": "the value is an angle ( deg ) . the value can be obtained by using the getfloatvalue method ."}{"node_name": "CSS_RAD", "type": "field", "idx": 86751, "Desc": "the value is an angle ( rad ) . the value can be obtained by using the getfloatvalue method ."}{"node_name": "CSS_GRAD", "type": "field", "idx": 86752, "Desc": "the value is an angle ( grad ) . the value can be obtained by using the getfloatvalue method ."}{"node_name": "CSS_MS", "type": "field", "idx": 86753, "Desc": "the value is a time ( ms ) . the value can be obtained by using the getfloatvalue method ."}{"node_name": "CSS_S", "type": "field", "idx": 86754, "Desc": "the value is a time ( s ) . the value can be obtained by using the getfloatvalue method ."}{"node_name": "CSS_HZ", "type": "field", "idx": 86755, "Desc": "the value is a frequency ( hz ) . the value can be obtained by using the getfloatvalue method ."}{"node_name": "CSS_KHZ", "type": "field", "idx": 86756, "Desc": "the value is a frequency ( khz ) . the value can be obtained by using the getfloatvalue method ."}{"node_name": "CSS_DIMENSION", "type": "field", "idx": 86757, "Desc": "the value is a number with an unknown dimension . the value can be obtained by using the getfloatvalue method ."}{"node_name": "CSS_STRING", "type": "field", "idx": 86758, "Desc": "the value is a string . the value can be obtained by using the getstringvalue method ."}{"node_name": "CSS_URI", "type": "field", "idx": 86759, "Desc": "the value is a uri . the value can be obtained by using the getstringvalue method ."}{"node_name": "CSS_IDENT", "type": "field", "idx": 86760, "Desc": "the value is an identifier . the value can be obtained by using the getstringvalue method ."}{"node_name": "CSS_ATTR", "type": "field", "idx": 86761, "Desc": "the value is a attribute function . the value can be obtained by using the getstringvalue method ."}{"node_name": "CSS_COUNTER", "type": "field", "idx": 86762, "Desc": "the value is a counter or counters function . the value can be obtained by using the getcountervalue method ."}{"node_name": "CSS_RECT", "type": "field", "idx": 86763, "Desc": "the value is a rect function . the value can be obtained by using the getrectvalue method ."}{"node_name": "CSS_RGBCOLOR", "type": "field", "idx": 86764, "Desc": "the value is a rgb color . the value can be obtained by using the getrgbcolorvalue method ."}{"node_name": "UNKNOWN_RULE", "type": "field", "idx": 86779, "Desc": "the rule is a cssunknownrule ."}{"node_name": "STYLE_RULE", "type": "field", "idx": 86780, "Desc": "the rule is a cssstylerule ."}{"node_name": "CHARSET_RULE", "type": "field", "idx": 86781, "Desc": "the rule is a csscharsetrule ."}{"node_name": "IMPORT_RULE", "type": "field", "idx": 86782, "Desc": "the rule is a cssimportrule ."}{"node_name": "MEDIA_RULE", "type": "field", "idx": 86783, "Desc": "the rule is a cssmediarule ."}{"node_name": "FONT_FACE_RULE", "type": "field", "idx": 86784, "Desc": "the rule is a cssfontfacerule ."}{"node_name": "PAGE_RULE", "type": "field", "idx": 86785, "Desc": "the rule is a csspagerule ."}{"node_name": "CSS_INHERIT", "type": "field", "idx": 86828, "Desc": "the value is inherited and the csstext contains \" inherit \" ."}{"node_name": "CSS_PRIMITIVE_VALUE", "type": "field", "idx": 86829, "Desc": "the value is a primitive value and an instance of the cssprimitivevalue interface can be obtained by using binding-specific casting methods on this instance of the cssvalue interface ."}{"node_name": "CSS_VALUE_LIST", "type": "field", "idx": 86830, "Desc": "the value is a cssvalue list and an instance of the cssvaluelist interface can be obtained by using binding-specific casting methods on this instance of the cssvalue interface ."}{"node_name": "CSS_CUSTOM", "type": "field", "idx": 86831, "Desc": "the value is a custom value ."}{"node_name": "SEVERITY_WARNING", "type": "field", "idx": 86932, "Desc": "the severity of the error described by the domerror is warning . a severity_warning will not cause the processing to stop , unless domerrorhandler.handleerror() returns false ."}{"node_name": "SEVERITY_ERROR", "type": "field", "idx": 86933, "Desc": "the severity of the error described by the domerror is error . a severity_error may not cause the processing to stop if the error can be recovered , unless domerrorhandler.handleerror() returns false ."}{"node_name": "SEVERITY_FATAL_ERROR", "type": "field", "idx": 86934, "Desc": "the severity of the error described by the domerror is fatal error . a severity_fatal_error will cause the normal processing to stop . the return value of domerrorhandler.handleerror() is ignored unless the implementation chooses to continue , in which case the behavior becomes undefined ."}{"node_name": "code", "type": "field", "idx": 86945, "Desc": ""}{"node_name": "INDEX_SIZE_ERR", "type": "field", "idx": 86946, "Desc": "if index or size is negative , or greater than the allowed value ."}{"node_name": "DOMSTRING_SIZE_ERR", "type": "field", "idx": 86947, "Desc": "if the specified range of text does not fit into a domstring ."}{"node_name": "HIERARCHY_REQUEST_ERR", "type": "field", "idx": 86948, "Desc": "if any node is inserted somewhere it doesn't belong ."}{"node_name": "WRONG_DOCUMENT_ERR", "type": "field", "idx": 86949, "Desc": "if a node is used in a different document than the one that created it ( that doesn't support it ) ."}{"node_name": "INVALID_CHARACTER_ERR", "type": "field", "idx": 86950, "Desc": "if an invalid or illegal character is specified , such as in an xml name ."}{"node_name": "NO_DATA_ALLOWED_ERR", "type": "field", "idx": 86951, "Desc": "if data is specified for a node which does not support data ."}{"node_name": "NO_MODIFICATION_ALLOWED_ERR", "type": "field", "idx": 86952, "Desc": "if an attempt is made to modify an object where modifications are not allowed ."}{"node_name": "NOT_FOUND_ERR", "type": "field", "idx": 86953, "Desc": "if an attempt is made to reference a node in a context where it does not exist ."}{"node_name": "NOT_SUPPORTED_ERR", "type": "field", "idx": 86954, "Desc": "if the implementation does not support the requested type of object or operation ."}{"node_name": "INUSE_ATTRIBUTE_ERR", "type": "field", "idx": 86955, "Desc": "if an attempt is made to add an attribute that is already in use elsewhere ."}{"node_name": "INVALID_STATE_ERR", "type": "field", "idx": 86956, "Desc": "if an attempt is made to use an object that is not , or is no longer , usable ."}{"node_name": "SYNTAX_ERR", "type": "field", "idx": 86957, "Desc": "if an invalid or illegal string is specified ."}{"node_name": "INVALID_MODIFICATION_ERR", "type": "field", "idx": 86958, "Desc": "if an attempt is made to modify the type of the underlying object ."}{"node_name": "NAMESPACE_ERR", "type": "field", "idx": 86959, "Desc": "if an attempt is made to create or change an object in a way which is incorrect with regard to namespaces ."}{"node_name": "INVALID_ACCESS_ERR", "type": "field", "idx": 86960, "Desc": "if a parameter or an operation is not supported by the underlying object ."}{"node_name": "VALIDATION_ERR", "type": "field", "idx": 86961, "Desc": "if a call to a method such as insertbefore or removechild would make the node invalid with respect to \" partial validity \" , this exception would be raised and the operation would not be done . this code is used in [ dom level 3 validation ] . refer to this specification for further information ."}{"node_name": "TYPE_MISMATCH_ERR", "type": "field", "idx": 86962, "Desc": "if the type of an object is incompatible with the expected type of the parameter associated to the object ."}{"node_name": "CAPTURING_PHASE", "type": "field", "idx": 87070, "Desc": "the current event phase is the capturing phase ."}{"node_name": "AT_TARGET", "type": "field", "idx": 87071, "Desc": "the event is currently being evaluated at the target eventtarget ."}{"node_name": "BUBBLING_PHASE", "type": "field", "idx": 87072, "Desc": "the current event phase is the bubbling phase ."}{"node_name": "code", "type": "field", "idx": 87087, "Desc": ""}{"node_name": "UNSPECIFIED_EVENT_TYPE_ERR", "type": "field", "idx": 87088, "Desc": "if the event's type was not specified by initializing the event before the method was called . specification of the event's type as null or an empty string will also trigger this exception ."}{"node_name": "MODIFICATION", "type": "field", "idx": 87132, "Desc": "the attr was modified in place ."}{"node_name": "ADDITION", "type": "field", "idx": 87133, "Desc": "the attr was just added ."}{"node_name": "REMOVAL", "type": "field", "idx": 87134, "Desc": "the attr was just removed ."}{"node_name": "MODE_SYNCHRONOUS", "type": "field", "idx": 87811, "Desc": "create a synchronous lsparser ."}{"node_name": "MODE_ASYNCHRONOUS", "type": "field", "idx": 87812, "Desc": "create an asynchronous lsparser ."}{"node_name": "code", "type": "field", "idx": 87820, "Desc": ""}{"node_name": "PARSE_ERR", "type": "field", "idx": 87821, "Desc": "if an attempt was made to load a document , or an xml fragment , using lsparser and the processing has been stopped ."}{"node_name": "SERIALIZE_ERR", "type": "field", "idx": 87822, "Desc": "if an attempt was made to serialize a node using lsserializer and the processing has been stopped ."}{"node_name": "ACTION_APPEND_AS_CHILDREN", "type": "field", "idx": 87854, "Desc": "append the result of the parse operation as children of the context node . for this action to work , the context node must be an element or a documentfragment ."}{"node_name": "ACTION_REPLACE_CHILDREN", "type": "field", "idx": 87855, "Desc": "replace all the children of the context node with the result of the parse operation . for this action to work , the context node must be an element , a document , or a documentfragment ."}{"node_name": "ACTION_INSERT_BEFORE", "type": "field", "idx": 87856, "Desc": "insert the result of the parse operation as the immediately preceding sibling of the context node . for this action to work the context node's parent must be an element or a documentfragment ."}{"node_name": "ACTION_INSERT_AFTER", "type": "field", "idx": 87857, "Desc": "insert the result of the parse operation as the immediately following sibling of the context node . for this action to work the context node's parent must be an element or a documentfragment ."}{"node_name": "ACTION_REPLACE", "type": "field", "idx": 87858, "Desc": "replace the context node with the result of the parse operation . for this action to work , the context node must have a parent , and the parent must be an element or a documentfragment ."}{"node_name": "FILTER_ACCEPT", "type": "field", "idx": 87874, "Desc": "accept the node ."}{"node_name": "FILTER_REJECT", "type": "field", "idx": 87875, "Desc": "reject the node and its children ."}{"node_name": "FILTER_SKIP", "type": "field", "idx": 87876, "Desc": "skip this single node . the children of this node will still be considered ."}{"node_name": "FILTER_INTERRUPT", "type": "field", "idx": 87877, "Desc": "interrupt the normal processing of the document ."}{"node_name": "ELEMENT_NODE", "type": "field", "idx": 87940, "Desc": "the node is an element ."}{"node_name": "ATTRIBUTE_NODE", "type": "field", "idx": 87941, "Desc": "the node is an attr ."}{"node_name": "TEXT_NODE", "type": "field", "idx": 87942, "Desc": "the node is a text node ."}{"node_name": "CDATA_SECTION_NODE", "type": "field", "idx": 87943, "Desc": "the node is a cdatasection ."}{"node_name": "ENTITY_REFERENCE_NODE", "type": "field", "idx": 87944, "Desc": "the node is an entityreference ."}{"node_name": "ENTITY_NODE", "type": "field", "idx": 87945, "Desc": "the node is an entity ."}{"node_name": "PROCESSING_INSTRUCTION_NODE", "type": "field", "idx": 87946, "Desc": "the node is a processinginstruction ."}{"node_name": "COMMENT_NODE", "type": "field", "idx": 87947, "Desc": "the node is a comment ."}{"node_name": "DOCUMENT_NODE", "type": "field", "idx": 87948, "Desc": "the node is a document ."}{"node_name": "DOCUMENT_TYPE_NODE", "type": "field", "idx": 87949, "Desc": "the node is a documenttype ."}{"node_name": "DOCUMENT_FRAGMENT_NODE", "type": "field", "idx": 87950, "Desc": "the node is a documentfragment ."}{"node_name": "NOTATION_NODE", "type": "field", "idx": 87951, "Desc": "the node is a notation ."}{"node_name": "DOCUMENT_POSITION_DISCONNECTED", "type": "field", "idx": 87952, "Desc": "the two nodes are disconnected . order between disconnected nodes is always implementation-specific ."}{"node_name": "DOCUMENT_POSITION_PRECEDING", "type": "field", "idx": 87953, "Desc": "the second node precedes the reference node ."}{"node_name": "DOCUMENT_POSITION_FOLLOWING", "type": "field", "idx": 87954, "Desc": "the node follows the reference node ."}{"node_name": "DOCUMENT_POSITION_CONTAINS", "type": "field", "idx": 87955, "Desc": "the node contains the reference node . a node which contains is always preceding , too ."}{"node_name": "DOCUMENT_POSITION_CONTAINED_BY", "type": "field", "idx": 87956, "Desc": "the node is contained by the reference node . a node which is contained is always following , too ."}{"node_name": "DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC", "type": "field", "idx": 87957, "Desc": "the determination of preceding versus following is implementation-specific ."}{"node_name": "START_TO_START", "type": "field", "idx": 88030, "Desc": "compare start boundary-point of sourcerange to start boundary-point of range on which compareboundarypoints is invoked ."}{"node_name": "START_TO_END", "type": "field", "idx": 88031, "Desc": "compare start boundary-point of sourcerange to end boundary-point of range on which compareboundarypoints is invoked ."}{"node_name": "END_TO_END", "type": "field", "idx": 88032, "Desc": "compare end boundary-point of sourcerange to end boundary-point of range on which compareboundarypoints is invoked ."}{"node_name": "END_TO_START", "type": "field", "idx": 88033, "Desc": "compare end boundary-point of sourcerange to start boundary-point of range on which compareboundarypoints is invoked ."}{"node_name": "code", "type": "field", "idx": 88074, "Desc": ""}{"node_name": "BAD_BOUNDARYPOINTS_ERR", "type": "field", "idx": 88075, "Desc": "if the boundary-points of a range do not meet specific requirements ."}{"node_name": "INVALID_NODE_TYPE_ERR", "type": "field", "idx": 88076, "Desc": "if the container of an boundary-point of a range is being set to either a node of an invalid type or a node with an ancestor of an invalid type ."}{"node_name": "FILTER_ACCEPT", "type": "field", "idx": 88124, "Desc": "accept the node . navigation methods defined for nodeiterator or treewalker will return this node ."}{"node_name": "FILTER_REJECT", "type": "field", "idx": 88125, "Desc": "reject the node . navigation methods defined for nodeiterator or treewalker will not return this node . for treewalker , the children of this node will also be rejected . nodeiterators treat this as a synonym for filter_skip ."}{"node_name": "FILTER_SKIP", "type": "field", "idx": 88126, "Desc": "skip this single node . navigation methods defined for nodeiterator or treewalker will not return this node . for both nodeiterator and treewalker , the children of this node will still be considered ."}{"node_name": "SHOW_ALL", "type": "field", "idx": 88127, "Desc": "show all nodes ."}{"node_name": "SHOW_ELEMENT", "type": "field", "idx": 88128, "Desc": "show element nodes ."}{"node_name": "SHOW_ATTRIBUTE", "type": "field", "idx": 88129, "Desc": "show attr nodes . this is meaningful only when creating an nodeiterator or treewalker with an attribute node as its root ; in this case , it means that the attribute node will appear in the first position of the iteration or traversal . since attributes are never children of other nodes , they do not appear when traversing over the document tree ."}{"node_name": "SHOW_TEXT", "type": "field", "idx": 88130, "Desc": "show text nodes ."}{"node_name": "SHOW_CDATA_SECTION", "type": "field", "idx": 88131, "Desc": "show cdatasection nodes ."}{"node_name": "SHOW_ENTITY_REFERENCE", "type": "field", "idx": 88132, "Desc": "show entityreference nodes ."}{"node_name": "SHOW_ENTITY", "type": "field", "idx": 88133, "Desc": "show entity nodes . this is meaningful only when creating an nodeiterator or treewalker with an entity node as its root ; in this case , it means that the entity node will appear in the first position of the traversal . since entities are not part of the document tree , they do not appear when traversing over the document tree ."}{"node_name": "SHOW_PROCESSING_INSTRUCTION", "type": "field", "idx": 88134, "Desc": "show processinginstruction nodes ."}{"node_name": "SHOW_COMMENT", "type": "field", "idx": 88135, "Desc": "show comment nodes ."}{"node_name": "SHOW_DOCUMENT", "type": "field", "idx": 88136, "Desc": "show document nodes ."}{"node_name": "SHOW_DOCUMENT_TYPE", "type": "field", "idx": 88137, "Desc": "show documenttype nodes ."}{"node_name": "SHOW_DOCUMENT_FRAGMENT", "type": "field", "idx": 88138, "Desc": "show documentfragment nodes ."}{"node_name": "SHOW_NOTATION", "type": "field", "idx": 88139, "Desc": "show notation nodes . this is meaningful only when creating an nodeiterator or treewalker with a notation node as its root ; in this case , it means that the notation node will appear in the first position of the traversal . since notations are not part of the document tree , they do not appear when traversing over the document tree ."}{"node_name": "DERIVATION_RESTRICTION", "type": "field", "idx": 88165, "Desc": "if the document's schema is an xml schema [ xml schema part 1 ] , this constant represents the derivation by restriction if complex types are involved , or a restriction if simple types are involved . the reference type definition is derived by restriction from the other type definition if the other type definition is the same as the reference type definition , or if the other type definition can be reached recursively following the { base type definition } property from the reference type definition , and all the derivation methods involved are restriction ."}{"node_name": "DERIVATION_EXTENSION", "type": "field", "idx": 88166, "Desc": "if the document's schema is an xml schema [ xml schema part 1 ] , this constant represents the derivation by extension . the reference type definition is derived by extension from the other type definition if the other type definition can be reached recursively following the { base type definition } property from the reference type definition , and at least one of the derivation methods involved is an extension ."}{"node_name": "DERIVATION_UNION", "type": "field", "idx": 88167, "Desc": "if the document's schema is an xml schema [ xml schema part 1 ] , this constant represents the union if simple types are involved . the reference type definition is derived by union from the other type definition if there exists two type definitions t1 and t2 such as the reference type definition is derived from t1 by derivation_restriction or derivation_extension , t2 is derived from the other type definition by derivation_restriction , t1 has { variety } union , and one of the { member type definitions } is t2 . note that t1 could be the same as the reference type definition , and t2 could be the same as the other type definition ."}{"node_name": "DERIVATION_LIST", "type": "field", "idx": 88168, "Desc": "if the document's schema is an xml schema [ xml schema part 1 ] , this constant represents the list . the reference type definition is derived by list from the other type definition if there exists two type definitions t1 and t2 such as the reference type definition is derived from t1 by derivation_restriction or derivation_extension , t2 is derived from the other type definition by derivation_restriction , t1 has { variety } list , and t2 is the { item type definition} . note that t1 could be the same as the reference type definition , and t2 could be the same as the other type definition ."}{"node_name": "NODE_CLONED", "type": "field", "idx": 88176, "Desc": "the node is cloned , using node.clonenode() ."}{"node_name": "NODE_IMPORTED", "type": "field", "idx": 88177, "Desc": "the node is imported , using document.importnode() ."}{"node_name": "NODE_DELETED", "type": "field", "idx": 88178, "Desc": "the node is deleted . note : this may not be supported or may not be reliable in certain environments , such as java , where the implementation has no real control over when objects are actually deleted ."}{"node_name": "NODE_RENAMED", "type": "field", "idx": 88179, "Desc": "the node is renamed , using document.renamenode() ."}{"node_name": "NODE_ADOPTED", "type": "field", "idx": 88180, "Desc": "the node is adopted , using document.adoptnode() ."}{"node_name": "code", "type": "field", "idx": 88204, "Desc": ""}{"node_name": "INVALID_EXPRESSION_ERR", "type": "field", "idx": 88205, "Desc": "if the expression has a syntax error or otherwise is not a legal expression according to the rules of the specific xpathevaluator or contains specialized extension functions or variables not supported by this implementation ."}{"node_name": "TYPE_ERR", "type": "field", "idx": 88206, "Desc": "if the expression cannot be converted to return the specified type ."}{"node_name": "XPATH_NAMESPACE_NODE", "type": "field", "idx": 88214, "Desc": "the node is a namespace ."}{"node_name": "ANY_TYPE", "type": "field", "idx": 88220, "Desc": "this code does not represent a specific type . an evaluation of an xpath expression will never produce this type . if this type is requested , then the evaluation returns whatever type naturally results from evaluation of the expression . if the natural result is a node set when any_type was requested , then unordered_node_iterator_type is always the resulting type . any other representation of a node set must be explicitly requested ."}{"node_name": "NUMBER_TYPE", "type": "field", "idx": 88221, "Desc": "the result is a number as defined by . document modification does not invalidate the number , but may mean that reevaluation would not yield the same number ."}{"node_name": "STRING_TYPE", "type": "field", "idx": 88222, "Desc": "the result is a string as defined by . document modification does not invalidate the string , but may mean that the string no longer corresponds to the current document ."}{"node_name": "BOOLEAN_TYPE", "type": "field", "idx": 88223, "Desc": "the result is a boolean as defined by . document modification does not invalidate the boolean , but may mean that reevaluation would not yield the same boolean ."}{"node_name": "UNORDERED_NODE_ITERATOR_TYPE", "type": "field", "idx": 88224, "Desc": "the result is a node set as defined by that will be accessed iteratively , which may not produce nodes in a particular order . document modification invalidates the iteration . this is the default type returned if the result is a node set and any_type is requested ."}{"node_name": "ORDERED_NODE_ITERATOR_TYPE", "type": "field", "idx": 88225, "Desc": "the result is a node set as defined by that will be accessed iteratively , which will produce document-ordered nodes . document modification invalidates the iteration ."}{"node_name": "UNORDERED_NODE_SNAPSHOT_TYPE", "type": "field", "idx": 88226, "Desc": "the result is a node set as defined by that will be accessed as a snapshot list of nodes that may not be in a particular order . document modification does not invalidate the snapshot but may mean that reevaluation would not yield the same snapshot and nodes in the snapshot may have been altered , moved , or removed from the document ."}{"node_name": "ORDERED_NODE_SNAPSHOT_TYPE", "type": "field", "idx": 88227, "Desc": "the result is a node set as defined by that will be accessed as a snapshot list of nodes that will be in original document order . document modification does not invalidate the snapshot but may mean that reevaluation would not yield the same snapshot and nodes in the snapshot may have been altered , moved , or removed from the document ."}{"node_name": "ANY_UNORDERED_NODE_TYPE", "type": "field", "idx": 88228, "Desc": "the result is a node set as defined by and will be accessed as a single node , which may be nullif the node set is empty . document modification does not invalidate the node , but may mean that the result node no longer corresponds to the current document . this is a convenience that permits optimization since the implementation can stop once any node in the in the resulting set has been found . if there are more than one node in the actual result , the single node returned might not be the first in document order ."}{"node_name": "FIRST_ORDERED_NODE_TYPE", "type": "field", "idx": 88229, "Desc": "the result is a node set as defined by and will be accessed as a single node , which may be null if the node set is empty . document modification does not invalidate the node , but may mean that the result node no longer corresponds to the current document . this is a convenience that permits optimization since the implementation can stop once the first node in document order of the resulting set has been found . if there are more than one node in the actual result , the single node returned will be the first in document order ."}{"node_name": "XMLNS", "type": "field", "idx": 88570, "Desc": "the xml namespace uri as a constant . the value is http://www.w3.org/xml/1998/namespace as defined in the \" namespaces in xml \" * recommendation . this is the namespace uri that is automatically mapped to the \" xml \" prefix ."}{"node_name": "NSDECL", "type": "field", "idx": 88571, "Desc": "the namespace declaration uri as a constant . the value is http://www.w3.org/xmlns/2000 / , as defined in a backwards-incompatible erratum to the \" namespaces in xml \" recommendation . because that erratum postdated sax2 , sax2 defaults to the original recommendation , and does not normally use this uri . this is the namespace uri that is optionally applied to xmlns and xmlns : * attributes , which are used to declare namespaces ."}